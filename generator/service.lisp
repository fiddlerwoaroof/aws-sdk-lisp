(defpackage #:aws-sdk/generator/service
  (:use #:cl
        #:aws-sdk/generator/operation
        #:aws-sdk/generator/shape
        #:aws-sdk/utils)
  (:import-from #:yason)
  (:export #:dump-service
           #:load-service
           #:generate-service
           #:generate-all-services))
(in-package #:aws-sdk/generator/service)

(defpackage #:aws-sdk/generator/service/dump)

(defun dump-service-to-stream (service json &optional (stream *standard-output*))
  (let ((*package* (find-package :aws-sdk/generator/service/dump))
        (*print-case* :downcase)
        (package-name (make-symbol (format nil "~:@(~A/~A/~A~)" :aws-sdk :services service))))
    (format stream "~&;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.~2%")
    (format stream "~&~S~%"
            `(defpackage ,package-name
               (:use)
               (:nicknames ,(make-symbol (format nil "~:@(~A/~A~)" :aws service)))
               (:import-from #:aws-sdk/generator/shape)
               (:import-from #:aws-sdk/generator/operation)
               (:import-from #:aws-sdk/api)))
    (format stream "~&~S~%" `(in-package ,package-name))
    (let ((hash (yason:parse
                 (uiop:read-file-string json))))
      (loop for name being each hash-key of (gethash "shapes" hash)
              using (hash-value options)
            do #+ (or) (format stream "~&~S~%" (compile-shape name options))
            (let ((*print-readably* t))
              (pprint (compile-shape name options)
                      stream)))

      (loop for action being each hash-key of (gethash "operations" hash)
              using (hash-value options)
            for input = (gethash "input" options)
            do (let ((*print-readably* t))
                 (pprint (compile-operation
                           service action (gethash "apiVersion"
                                                   (gethash "metadata" hash)) options
                           (and input
                                (loop for key being each hash-key of (gethash "members"
                                                                              (gethash (gethash "shape" input)
                                                                                       (gethash "shapes" hash)))
                                      collect (lispify key))))
                         stream))
            #+ (or) (format stream "~&~S~%"
                       (compile-operation
                        service action (gethash "apiVersion"
                                                (gethash "metadata" hash)) options
                        (and input
                             (loop for key being each hash-key of (gethash "members"
                                                                           (gethash (gethash "shape" input)
                                                                                    (gethash "shapes" hash)))
                                   collect (lispify key))))))
      (force-output stream))))

(defun dump-service (service json output)
  (with-open-file (out output :direction :output :if-exists :supersede)
    (dump-service-to-stream service json out)))

(defun load-service (service json)
  (uiop:with-temporary-file (:pathname file :direction :output)
    (dump-service service json file)
    (compile-file file)
    (load file)))

(defun generate-service (service)
  (let* ((output-dir (asdf:system-relative-pathname :aws-sdk #P"services/"))
         (output (make-pathname :defaults output-dir
                                :name service
                                :type "lisp"))
         (service-dir
           (uiop:ensure-directory-pathname
            (merge-pathnames service
                             (asdf:system-relative-pathname :aws-sdk #P"specs/apis/"))))
         (api-2.json
           (merge-pathnames #P"api-2.json"
                            (car (last (uiop:subdirectories service-dir))))))
    (assert (probe-file api-2.json))
    (dump-service service api-2.json output)
    output))

(defun generate-all-services (&key silent)
  (dolist (service-dir
           (uiop:subdirectories (asdf:system-relative-pathname :aws-sdk #P"specs/apis/")))
    (let ((file (generate-service (car (last (pathname-directory service-dir))))))
      (unless silent
        (format t "~&Generated '~A'~%" file)))))
