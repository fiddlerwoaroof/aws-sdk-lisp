;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/route53
  (:use)
  (:nicknames #:aws/route53)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/route53)

(common-lisp:progn
 (common-lisp:defstruct (alarm-identifier (:copier common-lisp:nil))
   (region
    (common-lisp:error #A((19) common-lisp:base-char . ":region is required"))
    :type (common-lisp:or cloud-watch-region common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or alarm-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'alarm-identifier 'make-alarm-identifier))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape alarm-identifier))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Region"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'region)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:deftype alias-health-enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct (alias-target (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (dnsname
    (common-lisp:error #A((20) common-lisp:base-char . ":dnsname is required"))
    :type (common-lisp:or dnsname common-lisp:null))
   (evaluate-target-health
    (common-lisp:error
     #A((35) common-lisp:base-char . ":evaluate-target-health is required"))
    :type (common-lisp:or alias-health-enabled common-lisp:null)))
 (common-lisp:export (common-lisp:list 'alias-target 'make-alias-target))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape alias-target))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "DNSName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dnsname)))
    (aws-sdk/generator/shape::to-query-params "EvaluateTargetHealth"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'evaluate-target-health))))))
(common-lisp:deftype associate-vpccomment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-vpcwith-hosted-zone-request (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error #A((16) common-lisp:base-char . ":vpc is required"))
    :type (common-lisp:or vpc common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or associate-vpccomment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-vpcwith-hosted-zone-request
                    'make-associate-vpcwith-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          associate-vpcwith-hosted-zone-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "VPC"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpc)))
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment))))))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-vpcwith-hosted-zone-response (:copier common-lisp:nil))
   (change-info
    (common-lisp:error
     #A((24) common-lisp:base-char . ":change-info is required"))
    :type (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-vpcwith-hosted-zone-response
                    'make-associate-vpcwith-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          associate-vpcwith-hosted-zone-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ChangeInfo"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'change-info))))))
(common-lisp:progn
 (common-lisp:defstruct (change (:copier common-lisp:nil))
   (action
    (common-lisp:error #A((19) common-lisp:base-char . ":action is required"))
    :type (common-lisp:or change-action common-lisp:null))
   (resource-record-set
    (common-lisp:error
     #A((32) common-lisp:base-char . ":resource-record-set is required"))
    :type (common-lisp:or resource-record-set common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change 'make-change))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape change))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Action"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action)))
    (aws-sdk/generator/shape::to-query-params "ResourceRecordSet"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-record-set))))))
(common-lisp:deftype change-action () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (change-batch (:copier common-lisp:nil))
   (comment common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (changes
    (common-lisp:error #A((20) common-lisp:base-char . ":changes is required"))
    :type (common-lisp:or changes common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change-batch 'make-change-batch))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape change-batch))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment)))
    (aws-sdk/generator/shape::to-query-params "Changes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'changes))))))
(common-lisp:progn
 (common-lisp:defstruct (change-info (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or change-status common-lisp:null))
   (submitted-at
    (common-lisp:error
     #A((25) common-lisp:base-char . ":submitted-at is required"))
    :type (common-lisp:or time-stamp common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null)))
 (common-lisp:export (common-lisp:list 'change-info 'make-change-info))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape change-info))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "SubmittedAt"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'submitted-at)))
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment))))))
(common-lisp:progn
 (common-lisp:defstruct
     (change-resource-record-sets-request (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (change-batch
    (common-lisp:error
     #A((25) common-lisp:base-char . ":change-batch is required"))
    :type (common-lisp:or change-batch common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-resource-record-sets-request
                    'make-change-resource-record-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          change-resource-record-sets-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "ChangeBatch"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'change-batch))))))
(common-lisp:progn
 (common-lisp:defstruct
     (change-resource-record-sets-response (:copier common-lisp:nil))
   (change-info
    (common-lisp:error
     #A((24) common-lisp:base-char . ":change-info is required"))
    :type (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-resource-record-sets-response
                    'make-change-resource-record-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          change-resource-record-sets-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ChangeInfo"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'change-info))))))
(common-lisp:deftype change-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (change-tags-for-resource-request (:copier common-lisp:nil))
   (resource-type
    (common-lisp:error
     #A((26) common-lisp:base-char . ":resource-type is required"))
    :type (common-lisp:or tag-resource-type common-lisp:null))
   (resource-id
    (common-lisp:error
     #A((24) common-lisp:base-char . ":resource-id is required"))
    :type (common-lisp:or tag-resource-id common-lisp:null))
   (add-tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null))
   (remove-tag-keys common-lisp:nil :type
    (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-tags-for-resource-request
                    'make-change-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          change-tags-for-resource-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ResourceType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-type)))
    (aws-sdk/generator/shape::to-query-params "ResourceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-id)))
    (aws-sdk/generator/shape::to-query-params "AddTags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'add-tags)))
    (aws-sdk/generator/shape::to-query-params "RemoveTagKeys"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'remove-tag-keys))))))
(common-lisp:progn
 (common-lisp:defstruct
     (change-tags-for-resource-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'change-tags-for-resource-response
                    'make-change-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          change-tags-for-resource-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:deftype changes () '(trivial-types:proper-list change))
 (common-lisp:defun |make-changes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list change))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype checker-ip-ranges ()
   '(trivial-types:proper-list ipaddress-cidr))
 (common-lisp:defun |make-checker-ip-ranges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list ipaddress-cidr))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype child-health-check-list ()
   '(trivial-types:proper-list health-check-id))
 (common-lisp:defun |make-child-health-check-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list health-check-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cloud-watch-alarm-configuration (:copier common-lisp:nil))
   (evaluation-periods
    (common-lisp:error
     #A((31) common-lisp:base-char . ":evaluation-periods is required"))
    :type (common-lisp:or evaluation-periods common-lisp:null))
   (threshold
    (common-lisp:error
     #A((22) common-lisp:base-char . ":threshold is required"))
    :type (common-lisp:or threshold common-lisp:null))
   (comparison-operator
    (common-lisp:error
     #A((32) common-lisp:base-char . ":comparison-operator is required"))
    :type (common-lisp:or comparison-operator common-lisp:null))
   (period
    (common-lisp:error #A((19) common-lisp:base-char . ":period is required"))
    :type (common-lisp:or period common-lisp:null))
   (metric-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":metric-name is required"))
    :type (common-lisp:or metric-name common-lisp:null))
   (namespace
    (common-lisp:error
     #A((22) common-lisp:base-char . ":namespace is required"))
    :type (common-lisp:or namespace common-lisp:null))
   (statistic
    (common-lisp:error
     #A((22) common-lisp:base-char . ":statistic is required"))
    :type (common-lisp:or statistic common-lisp:null))
   (dimensions common-lisp:nil :type
    (common-lisp:or dimension-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloud-watch-alarm-configuration
                    'make-cloud-watch-alarm-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          cloud-watch-alarm-configuration))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EvaluationPeriods"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'evaluation-periods)))
    (aws-sdk/generator/shape::to-query-params "Threshold"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'threshold)))
    (aws-sdk/generator/shape::to-query-params "ComparisonOperator"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comparison-operator)))
    (aws-sdk/generator/shape::to-query-params "Period"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'period)))
    (aws-sdk/generator/shape::to-query-params "MetricName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'metric-name)))
    (aws-sdk/generator/shape::to-query-params "Namespace"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'namespace)))
    (aws-sdk/generator/shape::to-query-params "Statistic"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'statistic)))
    (aws-sdk/generator/shape::to-query-params "Dimensions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dimensions))))))
(common-lisp:deftype cloud-watch-region () 'common-lisp:string)
(common-lisp:deftype comparison-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (concurrent-modification (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification 'make-concurrent-modification))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          concurrent-modification))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (conflicting-domain-exists (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conflicting-domain-exists
                    'make-conflicting-domain-exists))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          conflicting-domain-exists))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (conflicting-types (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'conflicting-types 'make-conflicting-types))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape conflicting-types))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (create-health-check-request (:copier common-lisp:nil))
   (caller-reference
    (common-lisp:error
     #A((29) common-lisp:base-char . ":caller-reference is required"))
    :type (common-lisp:or health-check-nonce common-lisp:null))
   (health-check-config
    (common-lisp:error
     #A((32) common-lisp:base-char . ":health-check-config is required"))
    :type (common-lisp:or health-check-config common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-health-check-request
                    'make-create-health-check-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-health-check-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CallerReference"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'caller-reference)))
    (aws-sdk/generator/shape::to-query-params "HealthCheckConfig"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-config))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-health-check-response (:copier common-lisp:nil))
   (health-check
    (common-lisp:error
     #A((25) common-lisp:base-char . ":health-check is required"))
    :type (common-lisp:or health-check common-lisp:null))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-health-check-response
                    'make-create-health-check-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-health-check-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheck"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check)))
    (aws-sdk/generator/shape::to-query-params "Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location))))))
(common-lisp:progn
 (common-lisp:defstruct (create-hosted-zone-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or dnsname common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or vpc common-lisp:null))
   (caller-reference
    (common-lisp:error
     #A((29) common-lisp:base-char . ":caller-reference is required"))
    :type (common-lisp:or nonce common-lisp:null))
   (hosted-zone-config common-lisp:nil :type
    (common-lisp:or hosted-zone-config common-lisp:null))
   (delegation-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hosted-zone-request
                    'make-create-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-hosted-zone-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "VPC"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpc)))
    (aws-sdk/generator/shape::to-query-params "CallerReference"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'caller-reference)))
    (aws-sdk/generator/shape::to-query-params "HostedZoneConfig"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-config)))
    (aws-sdk/generator/shape::to-query-params "DelegationSetId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'delegation-set-id))))))
(common-lisp:progn
 (common-lisp:defstruct (create-hosted-zone-response (:copier common-lisp:nil))
   (hosted-zone
    (common-lisp:error
     #A((24) common-lisp:base-char . ":hosted-zone is required"))
    :type (common-lisp:or hosted-zone common-lisp:null))
   (change-info
    (common-lisp:error
     #A((24) common-lisp:base-char . ":change-info is required"))
    :type (common-lisp:or change-info common-lisp:null))
   (delegation-set
    (common-lisp:error
     #A((27) common-lisp:base-char . ":delegation-set is required"))
    :type (common-lisp:or delegation-set common-lisp:null))
   (vpc common-lisp:nil :type (common-lisp:or vpc common-lisp:null))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-hosted-zone-response
                    'make-create-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-hosted-zone-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZone"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone)))
    (aws-sdk/generator/shape::to-query-params "ChangeInfo"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'change-info)))
    (aws-sdk/generator/shape::to-query-params "DelegationSet"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'delegation-set)))
    (aws-sdk/generator/shape::to-query-params "VPC"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpc)))
    (aws-sdk/generator/shape::to-query-params "Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-reusable-delegation-set-request (:copier common-lisp:nil))
   (caller-reference
    (common-lisp:error
     #A((29) common-lisp:base-char . ":caller-reference is required"))
    :type (common-lisp:or nonce common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-reusable-delegation-set-request
                    'make-create-reusable-delegation-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-reusable-delegation-set-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CallerReference"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'caller-reference)))
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-reusable-delegation-set-response (:copier common-lisp:nil))
   (delegation-set
    (common-lisp:error
     #A((27) common-lisp:base-char . ":delegation-set is required"))
    :type (common-lisp:or delegation-set common-lisp:null))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-reusable-delegation-set-response
                    'make-create-reusable-delegation-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-reusable-delegation-set-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DelegationSet"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'delegation-set)))
    (aws-sdk/generator/shape::to-query-params "Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-instance-request (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or dnsname common-lisp:null))
   (ttl (common-lisp:error #A((16) common-lisp:base-char . ":ttl is required"))
    :type (common-lisp:or ttl common-lisp:null))
   (traffic-policy-id
    (common-lisp:error
     #A((30) common-lisp:base-char . ":traffic-policy-id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version
    (common-lisp:error
     #A((35) common-lisp:base-char . ":traffic-policy-version is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-instance-request
                    'make-create-traffic-policy-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-traffic-policy-instance-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "TTL"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ttl)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-id)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-version))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-instance-response (:copier common-lisp:nil))
   (traffic-policy-instance
    (common-lisp:error
     #A((36) common-lisp:base-char . ":traffic-policy-instance is required"))
    :type (common-lisp:or traffic-policy-instance common-lisp:null))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-instance-response
                    'make-create-traffic-policy-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-traffic-policy-instance-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstance"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance)))
    (aws-sdk/generator/shape::to-query-params "Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or traffic-policy-name common-lisp:null))
   (document
    (common-lisp:error
     #A((21) common-lisp:base-char . ":document is required"))
    :type (common-lisp:or traffic-policy-document common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or traffic-policy-comment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-request
                    'make-create-traffic-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-traffic-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Document"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'document)))
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-response (:copier common-lisp:nil))
   (traffic-policy
    (common-lisp:error
     #A((27) common-lisp:base-char . ":traffic-policy is required"))
    :type (common-lisp:or traffic-policy common-lisp:null))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-response
                    'make-create-traffic-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-traffic-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy)))
    (aws-sdk/generator/shape::to-query-params "Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-version-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (document
    (common-lisp:error
     #A((21) common-lisp:base-char . ":document is required"))
    :type (common-lisp:or traffic-policy-document common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or traffic-policy-comment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-version-request
                    'make-create-traffic-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-traffic-policy-version-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Document"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'document)))
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-traffic-policy-version-response (:copier common-lisp:nil))
   (traffic-policy
    (common-lisp:error
     #A((27) common-lisp:base-char . ":traffic-policy is required"))
    :type (common-lisp:or traffic-policy common-lisp:null))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or resource-uri common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-traffic-policy-version-response
                    'make-create-traffic-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-traffic-policy-version-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy)))
    (aws-sdk/generator/shape::to-query-params "Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpcassociation-authorization-request (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error #A((16) common-lisp:base-char . ":vpc is required"))
    :type (common-lisp:or vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpcassociation-authorization-request
                    'make-create-vpcassociation-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-vpcassociation-authorization-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "VPC"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpc))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-vpcassociation-authorization-response (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error #A((16) common-lisp:base-char . ":vpc is required"))
    :type (common-lisp:or vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-vpcassociation-authorization-response
                    'make-create-vpcassociation-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-vpcassociation-authorization-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "VPC"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpc))))))
(common-lisp:deftype dnsname () 'common-lisp:string)
(common-lisp:deftype dnsrcode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (delegation-set (:copier common-lisp:nil))
   (id common-lisp:nil :type (common-lisp:or resource-id common-lisp:null))
   (caller-reference common-lisp:nil :type
    (common-lisp:or nonce common-lisp:null))
   (name-servers
    (common-lisp:error
     #A((25) common-lisp:base-char . ":name-servers is required"))
    :type (common-lisp:or delegation-set-name-servers common-lisp:null)))
 (common-lisp:export (common-lisp:list 'delegation-set 'make-delegation-set))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delegation-set))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "CallerReference"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'caller-reference)))
    (aws-sdk/generator/shape::to-query-params "NameServers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name-servers))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delegation-set-already-created (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-already-created
                    'make-delegation-set-already-created))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delegation-set-already-created))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delegation-set-already-reusable (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-already-reusable
                    'make-delegation-set-already-reusable))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delegation-set-already-reusable))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (delegation-set-in-use (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-in-use 'make-delegation-set-in-use))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delegation-set-in-use))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:deftype delegation-set-name-servers ()
   '(trivial-types:proper-list dnsname))
 (common-lisp:defun |make-delegation-set-name-servers|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dnsname))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (delegation-set-not-available (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-not-available
                    'make-delegation-set-not-available))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delegation-set-not-available))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (delegation-set-not-reusable (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delegation-set-not-reusable
                    'make-delegation-set-not-reusable))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delegation-set-not-reusable))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:deftype delegation-sets ()
   '(trivial-types:proper-list delegation-set))
 (common-lisp:defun |make-delegation-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list delegation-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (delete-health-check-request (:copier common-lisp:nil))
   (health-check-id
    (common-lisp:error
     #A((28) common-lisp:base-char . ":health-check-id is required"))
    :type (common-lisp:or health-check-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-health-check-request
                    'make-delete-health-check-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-health-check-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheckId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-health-check-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-health-check-response
                    'make-delete-health-check-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-health-check-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-hosted-zone-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-hosted-zone-request
                    'make-delete-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-hosted-zone-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-hosted-zone-response (:copier common-lisp:nil))
   (change-info
    (common-lisp:error
     #A((24) common-lisp:base-char . ":change-info is required"))
    :type (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-hosted-zone-response
                    'make-delete-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-hosted-zone-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ChangeInfo"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'change-info))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-reusable-delegation-set-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-reusable-delegation-set-request
                    'make-delete-reusable-delegation-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-reusable-delegation-set-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-reusable-delegation-set-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-reusable-delegation-set-response
                    'make-delete-reusable-delegation-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-reusable-delegation-set-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-policy-instance-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-policy-instance-request
                    'make-delete-traffic-policy-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-traffic-policy-instance-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-policy-instance-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-policy-instance-response
                    'make-delete-traffic-policy-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-traffic-policy-instance-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-policy-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (version
    (common-lisp:error #A((20) common-lisp:base-char . ":version is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-policy-request
                    'make-delete-traffic-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-traffic-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-traffic-policy-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-traffic-policy-response
                    'make-delete-traffic-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-traffic-policy-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpcassociation-authorization-request (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error #A((16) common-lisp:base-char . ":vpc is required"))
    :type (common-lisp:or vpc common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-vpcassociation-authorization-request
                    'make-delete-vpcassociation-authorization-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-vpcassociation-authorization-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "VPC"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpc))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-vpcassociation-authorization-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-vpcassociation-authorization-response
                    'make-delete-vpcassociation-authorization-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-vpcassociation-authorization-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (dimension (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or dimension-field common-lisp:null))
   (value
    (common-lisp:error #A((18) common-lisp:base-char . ":value is required"))
    :type (common-lisp:or dimension-field common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dimension 'make-dimension))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape dimension))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value))))))
(common-lisp:deftype dimension-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dimension-list () '(trivial-types:proper-list dimension))
 (common-lisp:defun |make-dimension-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dimension))
   aws-sdk/generator/shape::members))
(common-lisp:deftype disassociate-vpccomment () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-vpcfrom-hosted-zone-request (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (vpc (common-lisp:error #A((16) common-lisp:base-char . ":vpc is required"))
    :type (common-lisp:or vpc common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or disassociate-vpccomment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-vpcfrom-hosted-zone-request
                    'make-disassociate-vpcfrom-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          disassociate-vpcfrom-hosted-zone-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "VPC"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpc)))
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment))))))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-vpcfrom-hosted-zone-response (:copier common-lisp:nil))
   (change-info
    (common-lisp:error
     #A((24) common-lisp:base-char . ":change-info is required"))
    :type (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-vpcfrom-hosted-zone-response
                    'make-disassociate-vpcfrom-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          disassociate-vpcfrom-hosted-zone-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ChangeInfo"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'change-info))))))
(common-lisp:deftype enable-sni () 'common-lisp:boolean)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype error-messages ()
   '(trivial-types:proper-list error-message))
 (common-lisp:defun |make-error-messages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list error-message))
   aws-sdk/generator/shape::members))
(common-lisp:deftype evaluation-periods () 'common-lisp:integer)
(common-lisp:deftype failure-threshold () 'common-lisp:integer)
(common-lisp:deftype fully-qualified-domain-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (geo-location (:copier common-lisp:nil))
   (continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null)))
 (common-lisp:export (common-lisp:list 'geo-location 'make-geo-location))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape geo-location))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ContinentCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'continent-code)))
    (aws-sdk/generator/shape::to-query-params "CountryCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'country-code)))
    (aws-sdk/generator/shape::to-query-params "SubdivisionCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'subdivision-code))))))
(common-lisp:deftype geo-location-continent-code () 'common-lisp:string)
(common-lisp:deftype geo-location-continent-name () 'common-lisp:string)
(common-lisp:deftype geo-location-country-code () 'common-lisp:string)
(common-lisp:deftype geo-location-country-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (geo-location-details (:copier common-lisp:nil))
   (continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (continent-name common-lisp:nil :type
    (common-lisp:or geo-location-continent-name common-lisp:null))
   (country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (country-name common-lisp:nil :type
    (common-lisp:or geo-location-country-name common-lisp:null))
   (subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null))
   (subdivision-name common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'geo-location-details 'make-geo-location-details))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape geo-location-details))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ContinentCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'continent-code)))
    (aws-sdk/generator/shape::to-query-params "ContinentName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'continent-name)))
    (aws-sdk/generator/shape::to-query-params "CountryCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'country-code)))
    (aws-sdk/generator/shape::to-query-params "CountryName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'country-name)))
    (aws-sdk/generator/shape::to-query-params "SubdivisionCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'subdivision-code)))
    (aws-sdk/generator/shape::to-query-params "SubdivisionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'subdivision-name))))))
(common-lisp:progn
 (common-lisp:deftype geo-location-details-list ()
   '(trivial-types:proper-list geo-location-details))
 (common-lisp:defun |make-geo-location-details-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list geo-location-details))
   aws-sdk/generator/shape::members))
(common-lisp:deftype geo-location-subdivision-code () 'common-lisp:string)
(common-lisp:deftype geo-location-subdivision-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (get-change-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-change-request 'make-get-change-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-change-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id))))))
(common-lisp:progn
 (common-lisp:defstruct (get-change-response (:copier common-lisp:nil))
   (change-info
    (common-lisp:error
     #A((24) common-lisp:base-char . ":change-info is required"))
    :type (common-lisp:or change-info common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-change-response 'make-get-change-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-change-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ChangeInfo"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'change-info))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-checker-ip-ranges-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-checker-ip-ranges-request
                    'make-get-checker-ip-ranges-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-checker-ip-ranges-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-checker-ip-ranges-response (:copier common-lisp:nil))
   (checker-ip-ranges
    (common-lisp:error
     #A((30) common-lisp:base-char . ":checker-ip-ranges is required"))
    :type (common-lisp:or checker-ip-ranges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-checker-ip-ranges-response
                    'make-get-checker-ip-ranges-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-checker-ip-ranges-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CheckerIpRanges"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'checker-ip-ranges))))))
(common-lisp:progn
 (common-lisp:defstruct (get-geo-location-request (:copier common-lisp:nil))
   (continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-geo-location-request 'make-get-geo-location-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-geo-location-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ContinentCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'continent-code)))
    (aws-sdk/generator/shape::to-query-params "CountryCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'country-code)))
    (aws-sdk/generator/shape::to-query-params "SubdivisionCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'subdivision-code))))))
(common-lisp:progn
 (common-lisp:defstruct (get-geo-location-response (:copier common-lisp:nil))
   (geo-location-details
    (common-lisp:error
     #A((33) common-lisp:base-char . ":geo-location-details is required"))
    :type (common-lisp:or geo-location-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-geo-location-response
                    'make-get-geo-location-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-geo-location-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GeoLocationDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'geo-location-details))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-count-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-count-request
                    'make-get-health-check-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-health-check-count-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-count-response (:copier common-lisp:nil))
   (health-check-count
    (common-lisp:error
     #A((31) common-lisp:base-char . ":health-check-count is required"))
    :type (common-lisp:or health-check-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-count-response
                    'make-get-health-check-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-health-check-count-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheckCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-count))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-last-failure-reason-request (:copier common-lisp:nil))
   (health-check-id
    (common-lisp:error
     #A((28) common-lisp:base-char . ":health-check-id is required"))
    :type (common-lisp:or health-check-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-last-failure-reason-request
                    'make-get-health-check-last-failure-reason-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-health-check-last-failure-reason-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheckId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-last-failure-reason-response (:copier common-lisp:nil))
   (health-check-observations
    (common-lisp:error
     #A((38) common-lisp:base-char . ":health-check-observations is required"))
    :type (common-lisp:or health-check-observations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-last-failure-reason-response
                    'make-get-health-check-last-failure-reason-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-health-check-last-failure-reason-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheckObservations"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-observations))))))
(common-lisp:progn
 (common-lisp:defstruct (get-health-check-request (:copier common-lisp:nil))
   (health-check-id
    (common-lisp:error
     #A((28) common-lisp:base-char . ":health-check-id is required"))
    :type (common-lisp:or health-check-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-request 'make-get-health-check-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-health-check-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheckId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-id))))))
(common-lisp:progn
 (common-lisp:defstruct (get-health-check-response (:copier common-lisp:nil))
   (health-check
    (common-lisp:error
     #A((25) common-lisp:base-char . ":health-check is required"))
    :type (common-lisp:or health-check common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-response
                    'make-get-health-check-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-health-check-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheck"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-status-request (:copier common-lisp:nil))
   (health-check-id
    (common-lisp:error
     #A((28) common-lisp:base-char . ":health-check-id is required"))
    :type (common-lisp:or health-check-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-status-request
                    'make-get-health-check-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-health-check-status-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheckId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-health-check-status-response (:copier common-lisp:nil))
   (health-check-observations
    (common-lisp:error
     #A((38) common-lisp:base-char . ":health-check-observations is required"))
    :type (common-lisp:or health-check-observations common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-health-check-status-response
                    'make-get-health-check-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-health-check-status-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheckObservations"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-observations))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-hosted-zone-count-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-hosted-zone-count-request
                    'make-get-hosted-zone-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-hosted-zone-count-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-hosted-zone-count-response (:copier common-lisp:nil))
   (hosted-zone-count
    (common-lisp:error
     #A((30) common-lisp:base-char . ":hosted-zone-count is required"))
    :type (common-lisp:or hosted-zone-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-hosted-zone-count-response
                    'make-get-hosted-zone-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-hosted-zone-count-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-count))))))
(common-lisp:progn
 (common-lisp:defstruct (get-hosted-zone-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-hosted-zone-request 'make-get-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-hosted-zone-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id))))))
(common-lisp:progn
 (common-lisp:defstruct (get-hosted-zone-response (:copier common-lisp:nil))
   (hosted-zone
    (common-lisp:error
     #A((24) common-lisp:base-char . ":hosted-zone is required"))
    :type (common-lisp:or hosted-zone common-lisp:null))
   (delegation-set common-lisp:nil :type
    (common-lisp:or delegation-set common-lisp:null))
   (vpcs common-lisp:nil :type (common-lisp:or vpcs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-hosted-zone-response 'make-get-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-hosted-zone-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZone"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone)))
    (aws-sdk/generator/shape::to-query-params "DelegationSet"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'delegation-set)))
    (aws-sdk/generator/shape::to-query-params "VPCs"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpcs))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reusable-delegation-set-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reusable-delegation-set-request
                    'make-get-reusable-delegation-set-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-reusable-delegation-set-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-reusable-delegation-set-response (:copier common-lisp:nil))
   (delegation-set
    (common-lisp:error
     #A((27) common-lisp:base-char . ":delegation-set is required"))
    :type (common-lisp:or delegation-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-reusable-delegation-set-response
                    'make-get-reusable-delegation-set-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-reusable-delegation-set-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DelegationSet"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'delegation-set))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-instance-count-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-instance-count-request
                    'make-get-traffic-policy-instance-count-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-traffic-policy-instance-count-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-instance-count-response (:copier common-lisp:nil))
   (traffic-policy-instance-count
    (common-lisp:error
     #A((42) common-lisp:base-char
        . ":traffic-policy-instance-count is required"))
    :type (common-lisp:or traffic-policy-instance-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-instance-count-response
                    'make-get-traffic-policy-instance-count-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-traffic-policy-instance-count-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-count))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-instance-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-instance-request
                    'make-get-traffic-policy-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-traffic-policy-instance-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-traffic-policy-instance-response (:copier common-lisp:nil))
   (traffic-policy-instance
    (common-lisp:error
     #A((36) common-lisp:base-char . ":traffic-policy-instance is required"))
    :type (common-lisp:or traffic-policy-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-instance-response
                    'make-get-traffic-policy-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-traffic-policy-instance-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstance"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance))))))
(common-lisp:progn
 (common-lisp:defstruct (get-traffic-policy-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (version
    (common-lisp:error #A((20) common-lisp:base-char . ":version is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-request
                    'make-get-traffic-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-traffic-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:defstruct (get-traffic-policy-response (:copier common-lisp:nil))
   (traffic-policy
    (common-lisp:error
     #A((27) common-lisp:base-char . ":traffic-policy is required"))
    :type (common-lisp:or traffic-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-traffic-policy-response
                    'make-get-traffic-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-traffic-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy))))))
(common-lisp:progn
 (common-lisp:defstruct (health-check (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or health-check-id common-lisp:null))
   (caller-reference
    (common-lisp:error
     #A((29) common-lisp:base-char . ":caller-reference is required"))
    :type (common-lisp:or health-check-nonce common-lisp:null))
   (health-check-config
    (common-lisp:error
     #A((32) common-lisp:base-char . ":health-check-config is required"))
    :type (common-lisp:or health-check-config common-lisp:null))
   (health-check-version
    (common-lisp:error
     #A((33) common-lisp:base-char . ":health-check-version is required"))
    :type (common-lisp:or health-check-version common-lisp:null))
   (cloud-watch-alarm-configuration common-lisp:nil :type
    (common-lisp:or cloud-watch-alarm-configuration common-lisp:null)))
 (common-lisp:export (common-lisp:list 'health-check 'make-health-check))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape health-check))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "CallerReference"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'caller-reference)))
    (aws-sdk/generator/shape::to-query-params "HealthCheckConfig"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-config)))
    (aws-sdk/generator/shape::to-query-params "HealthCheckVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-version)))
    (aws-sdk/generator/shape::to-query-params "CloudWatchAlarmConfiguration"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'cloud-watch-alarm-configuration))))))
(common-lisp:progn
 (common-lisp:defstruct (health-check-already-exists (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-already-exists
                    'make-health-check-already-exists))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          health-check-already-exists))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (health-check-config (:copier common-lisp:nil))
   (ipaddress common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or health-check-type common-lisp:null))
   (resource-path common-lisp:nil :type
    (common-lisp:or resource-path common-lisp:null))
   (fully-qualified-domain-name common-lisp:nil :type
    (common-lisp:or fully-qualified-domain-name common-lisp:null))
   (search-string common-lisp:nil :type
    (common-lisp:or search-string common-lisp:null))
   (request-interval common-lisp:nil :type
    (common-lisp:or request-interval common-lisp:null))
   (failure-threshold common-lisp:nil :type
    (common-lisp:or failure-threshold common-lisp:null))
   (measure-latency common-lisp:nil :type
    (common-lisp:or measure-latency common-lisp:null))
   (inverted common-lisp:nil :type (common-lisp:or inverted common-lisp:null))
   (health-threshold common-lisp:nil :type
    (common-lisp:or health-threshold common-lisp:null))
   (child-health-checks common-lisp:nil :type
    (common-lisp:or child-health-check-list common-lisp:null))
   (enable-sni common-lisp:nil :type
    (common-lisp:or enable-sni common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or health-check-region-list common-lisp:null))
   (alarm-identifier common-lisp:nil :type
    (common-lisp:or alarm-identifier common-lisp:null))
   (insufficient-data-health-status common-lisp:nil :type
    (common-lisp:or insufficient-data-health-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-config 'make-health-check-config))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape health-check-config))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "IPAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ipaddress)))
    (aws-sdk/generator/shape::to-query-params "Port"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'port)))
    (aws-sdk/generator/shape::to-query-params "Type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "ResourcePath"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-path)))
    (aws-sdk/generator/shape::to-query-params "FullyQualifiedDomainName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'fully-qualified-domain-name)))
    (aws-sdk/generator/shape::to-query-params "SearchString"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'search-string)))
    (aws-sdk/generator/shape::to-query-params "RequestInterval"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'request-interval)))
    (aws-sdk/generator/shape::to-query-params "FailureThreshold"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'failure-threshold)))
    (aws-sdk/generator/shape::to-query-params "MeasureLatency"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'measure-latency)))
    (aws-sdk/generator/shape::to-query-params "Inverted"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'inverted)))
    (aws-sdk/generator/shape::to-query-params "HealthThreshold"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-threshold)))
    (aws-sdk/generator/shape::to-query-params "ChildHealthChecks"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'child-health-checks)))
    (aws-sdk/generator/shape::to-query-params "EnableSNI"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'enable-sni)))
    (aws-sdk/generator/shape::to-query-params "Regions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'regions)))
    (aws-sdk/generator/shape::to-query-params "AlarmIdentifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'alarm-identifier)))
    (aws-sdk/generator/shape::to-query-params "InsufficientDataHealthStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'insufficient-data-health-status))))))
(common-lisp:deftype health-check-count () 'common-lisp:integer)
(common-lisp:deftype health-check-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (health-check-in-use (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-in-use 'make-health-check-in-use))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape health-check-in-use))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype health-check-nonce () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (health-check-observation (:copier common-lisp:nil))
   (region common-lisp:nil :type
    (common-lisp:or health-check-region common-lisp:null))
   (ipaddress common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (status-report common-lisp:nil :type
    (common-lisp:or status-report common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-observation 'make-health-check-observation))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          health-check-observation))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Region"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'region)))
    (aws-sdk/generator/shape::to-query-params "IPAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ipaddress)))
    (aws-sdk/generator/shape::to-query-params "StatusReport"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status-report))))))
(common-lisp:progn
 (common-lisp:deftype health-check-observations ()
   '(trivial-types:proper-list health-check-observation))
 (common-lisp:defun |make-health-check-observations|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            health-check-observation))
   aws-sdk/generator/shape::members))
(common-lisp:deftype health-check-region () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype health-check-region-list ()
   '(trivial-types:proper-list health-check-region))
 (common-lisp:defun |make-health-check-region-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list health-check-region))
   aws-sdk/generator/shape::members))
(common-lisp:deftype health-check-type () 'common-lisp:string)
(common-lisp:deftype health-check-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (health-check-version-mismatch (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'health-check-version-mismatch
                    'make-health-check-version-mismatch))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          health-check-version-mismatch))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:deftype health-checks ()
   '(trivial-types:proper-list health-check))
 (common-lisp:defun |make-health-checks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list health-check))
   aws-sdk/generator/shape::members))
(common-lisp:deftype health-threshold () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (hosted-zone (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or dnsname common-lisp:null))
   (caller-reference
    (common-lisp:error
     #A((29) common-lisp:base-char . ":caller-reference is required"))
    :type (common-lisp:or nonce common-lisp:null))
   (config common-lisp:nil :type
    (common-lisp:or hosted-zone-config common-lisp:null))
   (resource-record-set-count common-lisp:nil :type
    (common-lisp:or hosted-zone-rrset-count common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hosted-zone 'make-hosted-zone))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape hosted-zone))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "CallerReference"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'caller-reference)))
    (aws-sdk/generator/shape::to-query-params "Config"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'config)))
    (aws-sdk/generator/shape::to-query-params "ResourceRecordSetCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-record-set-count))))))
(common-lisp:progn
 (common-lisp:defstruct (hosted-zone-already-exists (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hosted-zone-already-exists
                    'make-hosted-zone-already-exists))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          hosted-zone-already-exists))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (hosted-zone-config (:copier common-lisp:nil))
   (comment common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null))
   (private-zone common-lisp:nil :type
    (common-lisp:or is-private-zone common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hosted-zone-config 'make-hosted-zone-config))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape hosted-zone-config))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment)))
    (aws-sdk/generator/shape::to-query-params "PrivateZone"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'private-zone))))))
(common-lisp:deftype hosted-zone-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (hosted-zone-not-empty (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hosted-zone-not-empty 'make-hosted-zone-not-empty))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          hosted-zone-not-empty))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (hosted-zone-not-found (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'hosted-zone-not-found 'make-hosted-zone-not-found))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          hosted-zone-not-found))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype hosted-zone-rrset-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype hosted-zones () '(trivial-types:proper-list hosted-zone))
 (common-lisp:defun |make-hosted-zones|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list hosted-zone))
   aws-sdk/generator/shape::members))
(common-lisp:deftype ipaddress () 'common-lisp:string)
(common-lisp:deftype ipaddress-cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (incompatible-version (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'incompatible-version 'make-incompatible-version))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape incompatible-version))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype insufficient-data-health-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (invalid-argument (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument 'make-invalid-argument))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape invalid-argument))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-change-batch (:copier common-lisp:nil))
   (messages common-lisp:nil :type
    (common-lisp:or error-messages common-lisp:null))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-change-batch 'make-invalid-change-batch))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape invalid-change-batch))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "messages"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'messages)))
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-domain-name (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-domain-name 'make-invalid-domain-name))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape invalid-domain-name))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-input (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'invalid-input 'make-invalid-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape invalid-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-pagination-token (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-pagination-token 'make-invalid-pagination-token))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-pagination-token))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-traffic-policy-document (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-traffic-policy-document
                    'make-invalid-traffic-policy-document))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-traffic-policy-document))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-vpcid (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'invalid-vpcid 'make-invalid-vpcid))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape invalid-vpcid))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype inverted () 'common-lisp:boolean)
(common-lisp:deftype is-private-zone () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct (last-vpcassociation (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'last-vpcassociation 'make-last-vpcassociation))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape last-vpcassociation))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (limits-exceeded (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'limits-exceeded 'make-limits-exceeded))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape limits-exceeded))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (list-geo-locations-request (:copier common-lisp:nil))
   (start-continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (start-country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (start-subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geo-locations-request
                    'make-list-geo-locations-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-geo-locations-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StartContinentCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-continent-code)))
    (aws-sdk/generator/shape::to-query-params "StartCountryCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-country-code)))
    (aws-sdk/generator/shape::to-query-params "StartSubdivisionCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-subdivision-code)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-geo-locations-response (:copier common-lisp:nil))
   (geo-location-details-list
    (common-lisp:error
     #A((38) common-lisp:base-char . ":geo-location-details-list is required"))
    :type (common-lisp:or geo-location-details-list common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (next-continent-code common-lisp:nil :type
    (common-lisp:or geo-location-continent-code common-lisp:null))
   (next-country-code common-lisp:nil :type
    (common-lisp:or geo-location-country-code common-lisp:null))
   (next-subdivision-code common-lisp:nil :type
    (common-lisp:or geo-location-subdivision-code common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-geo-locations-response
                    'make-list-geo-locations-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-geo-locations-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GeoLocationDetailsList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'geo-location-details-list)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "NextContinentCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-continent-code)))
    (aws-sdk/generator/shape::to-query-params "NextCountryCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-country-code)))
    (aws-sdk/generator/shape::to-query-params "NextSubdivisionCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-subdivision-code)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-health-checks-request (:copier common-lisp:nil))
   (marker common-lisp:nil :type (common-lisp:or page-marker common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-health-checks-request
                    'make-list-health-checks-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-health-checks-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-health-checks-response (:copier common-lisp:nil))
   (health-checks
    (common-lisp:error
     #A((26) common-lisp:base-char . ":health-checks is required"))
    :type (common-lisp:or health-checks common-lisp:null))
   (marker
    (common-lisp:error #A((19) common-lisp:base-char . ":marker is required"))
    :type (common-lisp:or page-marker common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or page-marker common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-health-checks-response
                    'make-list-health-checks-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-health-checks-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthChecks"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-checks)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "NextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hosted-zones-by-name-request (:copier common-lisp:nil))
   (dnsname common-lisp:nil :type (common-lisp:or dnsname common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hosted-zones-by-name-request
                    'make-list-hosted-zones-by-name-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-hosted-zones-by-name-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DNSName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dnsname)))
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-hosted-zones-by-name-response (:copier common-lisp:nil))
   (hosted-zones
    (common-lisp:error
     #A((25) common-lisp:base-char . ":hosted-zones is required"))
    :type (common-lisp:or hosted-zones common-lisp:null))
   (dnsname common-lisp:nil :type (common-lisp:or dnsname common-lisp:null))
   (hosted-zone-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (next-dnsname common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (next-hosted-zone-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hosted-zones-by-name-response
                    'make-list-hosted-zones-by-name-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-hosted-zones-by-name-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZones"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zones)))
    (aws-sdk/generator/shape::to-query-params "DNSName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dnsname)))
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "NextDNSName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-dnsname)))
    (aws-sdk/generator/shape::to-query-params "NextHostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-hosted-zones-request (:copier common-lisp:nil))
   (marker common-lisp:nil :type (common-lisp:or page-marker common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null))
   (delegation-set-id common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hosted-zones-request
                    'make-list-hosted-zones-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-hosted-zones-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items)))
    (aws-sdk/generator/shape::to-query-params "DelegationSetId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'delegation-set-id))))))
(common-lisp:progn
 (common-lisp:defstruct (list-hosted-zones-response (:copier common-lisp:nil))
   (hosted-zones
    (common-lisp:error
     #A((25) common-lisp:base-char . ":hosted-zones is required"))
    :type (common-lisp:or hosted-zones common-lisp:null))
   (marker
    (common-lisp:error #A((19) common-lisp:base-char . ":marker is required"))
    :type (common-lisp:or page-marker common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or page-marker common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-hosted-zones-response
                    'make-list-hosted-zones-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-hosted-zones-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZones"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zones)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "NextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-record-sets-request (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (start-record-name common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (start-record-type common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (start-record-identifier common-lisp:nil :type
    (common-lisp:or resource-record-set-identifier common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-record-sets-request
                    'make-list-resource-record-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-resource-record-sets-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "StartRecordName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-record-name)))
    (aws-sdk/generator/shape::to-query-params "StartRecordType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-record-type)))
    (aws-sdk/generator/shape::to-query-params "StartRecordIdentifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-record-identifier)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-resource-record-sets-response (:copier common-lisp:nil))
   (resource-record-sets
    (common-lisp:error
     #A((33) common-lisp:base-char . ":resource-record-sets is required"))
    :type (common-lisp:or resource-record-sets common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (next-record-name common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (next-record-type common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (next-record-identifier common-lisp:nil :type
    (common-lisp:or resource-record-set-identifier common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-resource-record-sets-response
                    'make-list-resource-record-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-resource-record-sets-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ResourceRecordSets"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-record-sets)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "NextRecordName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-record-name)))
    (aws-sdk/generator/shape::to-query-params "NextRecordType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-record-type)))
    (aws-sdk/generator/shape::to-query-params "NextRecordIdentifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-record-identifier)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-reusable-delegation-sets-request (:copier common-lisp:nil))
   (marker common-lisp:nil :type (common-lisp:or page-marker common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-reusable-delegation-sets-request
                    'make-list-reusable-delegation-sets-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-reusable-delegation-sets-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-reusable-delegation-sets-response (:copier common-lisp:nil))
   (delegation-sets
    (common-lisp:error
     #A((28) common-lisp:base-char . ":delegation-sets is required"))
    :type (common-lisp:or delegation-sets common-lisp:null))
   (marker
    (common-lisp:error #A((19) common-lisp:base-char . ":marker is required"))
    :type (common-lisp:or page-marker common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or page-marker common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-reusable-delegation-sets-response
                    'make-list-reusable-delegation-sets-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-reusable-delegation-sets-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DelegationSets"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'delegation-sets)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "NextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-request (:copier common-lisp:nil))
   (resource-type
    (common-lisp:error
     #A((26) common-lisp:base-char . ":resource-type is required"))
    :type (common-lisp:or tag-resource-type common-lisp:null))
   (resource-id
    (common-lisp:error
     #A((24) common-lisp:base-char . ":resource-id is required"))
    :type (common-lisp:or tag-resource-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-request
                    'make-list-tags-for-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-tags-for-resource-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ResourceType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-type)))
    (aws-sdk/generator/shape::to-query-params "ResourceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resource-response (:copier common-lisp:nil))
   (resource-tag-set
    (common-lisp:error
     #A((29) common-lisp:base-char . ":resource-tag-set is required"))
    :type (common-lisp:or resource-tag-set common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resource-response
                    'make-list-tags-for-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-tags-for-resource-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ResourceTagSet"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-tag-set))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resources-request (:copier common-lisp:nil))
   (resource-type
    (common-lisp:error
     #A((26) common-lisp:base-char . ":resource-type is required"))
    :type (common-lisp:or tag-resource-type common-lisp:null))
   (resource-ids
    (common-lisp:error
     #A((25) common-lisp:base-char . ":resource-ids is required"))
    :type (common-lisp:or tag-resource-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resources-request
                    'make-list-tags-for-resources-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-tags-for-resources-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ResourceType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-type)))
    (aws-sdk/generator/shape::to-query-params "ResourceIds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-ids))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-tags-for-resources-response (:copier common-lisp:nil))
   (resource-tag-sets
    (common-lisp:error
     #A((30) common-lisp:base-char . ":resource-tag-sets is required"))
    :type (common-lisp:or resource-tag-set-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-resources-response
                    'make-list-tags-for-resources-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-tags-for-resources-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ResourceTagSets"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-tag-sets))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policies-request (:copier common-lisp:nil))
   (traffic-policy-id-marker common-lisp:nil :type
    (common-lisp:or traffic-policy-id common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policies-request
                    'make-list-traffic-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyIdMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-id-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policies-response (:copier common-lisp:nil))
   (traffic-policy-summaries
    (common-lisp:error
     #A((37) common-lisp:base-char . ":traffic-policy-summaries is required"))
    :type (common-lisp:or traffic-policy-summaries common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (traffic-policy-id-marker
    (common-lisp:error
     #A((37) common-lisp:base-char . ":traffic-policy-id-marker is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policies-response
                    'make-list-traffic-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicySummaries"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-summaries)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyIdMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-id-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-by-hosted-zone-request
      (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-by-hosted-zone-request
                    'make-list-traffic-policy-instances-by-hosted-zone-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policy-instances-by-hosted-zone-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceNameMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-name-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceTypeMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-type-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-by-hosted-zone-response
      (:copier common-lisp:nil))
   (traffic-policy-instances
    (common-lisp:error
     #A((37) common-lisp:base-char . ":traffic-policy-instances is required"))
    :type (common-lisp:or traffic-policy-instances common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-by-hosted-zone-response
                    'make-list-traffic-policy-instances-by-hosted-zone-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policy-instances-by-hosted-zone-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstances"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instances)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceNameMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-name-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceTypeMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-type-marker)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-by-policy-request
      (:copier common-lisp:nil))
   (traffic-policy-id
    (common-lisp:error
     #A((30) common-lisp:base-char . ":traffic-policy-id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version
    (common-lisp:error
     #A((35) common-lisp:base-char . ":traffic-policy-version is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null))
   (hosted-zone-id-marker common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-by-policy-request
                    'make-list-traffic-policy-instances-by-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policy-instances-by-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-id)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-version)))
    (aws-sdk/generator/shape::to-query-params "HostedZoneIdMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceNameMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-name-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceTypeMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-type-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-by-policy-response
      (:copier common-lisp:nil))
   (traffic-policy-instances
    (common-lisp:error
     #A((37) common-lisp:base-char . ":traffic-policy-instances is required"))
    :type (common-lisp:or traffic-policy-instances common-lisp:null))
   (hosted-zone-id-marker common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-by-policy-response
                    'make-list-traffic-policy-instances-by-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policy-instances-by-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstances"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instances)))
    (aws-sdk/generator/shape::to-query-params "HostedZoneIdMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceNameMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-name-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceTypeMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-type-marker)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-request (:copier common-lisp:nil))
   (hosted-zone-id-marker common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-request
                    'make-list-traffic-policy-instances-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policy-instances-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneIdMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceNameMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-name-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceTypeMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-type-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-instances-response (:copier common-lisp:nil))
   (traffic-policy-instances
    (common-lisp:error
     #A((37) common-lisp:base-char . ":traffic-policy-instances is required"))
    :type (common-lisp:or traffic-policy-instances common-lisp:null))
   (hosted-zone-id-marker common-lisp:nil :type
    (common-lisp:or resource-id common-lisp:null))
   (traffic-policy-instance-name-marker common-lisp:nil :type
    (common-lisp:or dnsname common-lisp:null))
   (traffic-policy-instance-type-marker common-lisp:nil :type
    (common-lisp:or rrtype common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-instances-response
                    'make-list-traffic-policy-instances-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policy-instances-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstances"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instances)))
    (aws-sdk/generator/shape::to-query-params "HostedZoneIdMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceNameMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-name-marker)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceTypeMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-type-marker)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-versions-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version-marker common-lisp:nil :type
    (common-lisp:or traffic-policy-version-marker common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-versions-request
                    'make-list-traffic-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policy-versions-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyVersionMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-version-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-traffic-policy-versions-response (:copier common-lisp:nil))
   (traffic-policies
    (common-lisp:error
     #A((29) common-lisp:base-char . ":traffic-policies is required"))
    :type (common-lisp:or traffic-policies common-lisp:null))
   (is-truncated
    (common-lisp:error
     #A((25) common-lisp:base-char . ":is-truncated is required"))
    :type (common-lisp:or page-truncated common-lisp:null))
   (traffic-policy-version-marker
    (common-lisp:error
     #A((42) common-lisp:base-char
        . ":traffic-policy-version-marker is required"))
    :type (common-lisp:or traffic-policy-version-marker common-lisp:null))
   (max-items
    (common-lisp:error
     #A((22) common-lisp:base-char . ":max-items is required"))
    :type (common-lisp:or page-max-items common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-traffic-policy-versions-response
                    'make-list-traffic-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-traffic-policy-versions-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policies)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyVersionMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-version-marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vpcassociation-authorizations-request (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vpcassociation-authorizations-request
                    'make-list-vpcassociation-authorizations-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-vpcassociation-authorizations-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-vpcassociation-authorizations-response (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (vpcs
    (common-lisp:error #A((17) common-lisp:base-char . ":vpcs is required"))
    :type (common-lisp:or vpcs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-vpcassociation-authorizations-response
                    'make-list-vpcassociation-authorizations-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-vpcassociation-authorizations-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "VPCs"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpcs))))))
(common-lisp:deftype max-results () 'common-lisp:string)
(common-lisp:deftype measure-latency () 'common-lisp:boolean)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype nameserver () 'common-lisp:string)
(common-lisp:deftype namespace () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (no-such-change (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'no-such-change 'make-no-such-change))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape no-such-change))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (no-such-delegation-set (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-such-delegation-set 'make-no-such-delegation-set))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          no-such-delegation-set))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (no-such-geo-location (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-such-geo-location 'make-no-such-geo-location))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape no-such-geo-location))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (no-such-health-check (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-such-health-check 'make-no-such-health-check))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape no-such-health-check))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (no-such-hosted-zone (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-such-hosted-zone 'make-no-such-hosted-zone))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape no-such-hosted-zone))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (no-such-traffic-policy (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-such-traffic-policy 'make-no-such-traffic-policy))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          no-such-traffic-policy))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (no-such-traffic-policy-instance (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-such-traffic-policy-instance
                    'make-no-such-traffic-policy-instance))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          no-such-traffic-policy-instance))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype nonce () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (not-authorized-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'not-authorized-exception 'make-not-authorized-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          not-authorized-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype page-marker () 'common-lisp:string)
(common-lisp:deftype page-max-items () 'common-lisp:string)
(common-lisp:deftype page-truncated () 'common-lisp:boolean)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype period () 'common-lisp:integer)
(common-lisp:deftype port () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (prior-request-not-complete (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'prior-request-not-complete
                    'make-prior-request-not-complete))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          prior-request-not-complete))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (public-zone-vpcassociation (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'public-zone-vpcassociation
                    'make-public-zone-vpcassociation))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          public-zone-vpcassociation))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype rdata () 'common-lisp:string)
(common-lisp:deftype rrtype () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype record-data ()
   '(trivial-types:proper-list record-data-entry))
 (common-lisp:defun |make-record-data|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record-data-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype record-data-entry () 'common-lisp:string)
(common-lisp:deftype request-interval () 'common-lisp:integer)
(common-lisp:deftype resource-description () 'common-lisp:string)
(common-lisp:deftype resource-id () 'common-lisp:string)
(common-lisp:deftype resource-path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (resource-record (:copier common-lisp:nil))
   (value
    (common-lisp:error #A((18) common-lisp:base-char . ":value is required"))
    :type (common-lisp:or rdata common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-record 'make-resource-record))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape resource-record))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value))))))
(common-lisp:progn
 (common-lisp:defstruct (resource-record-set (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or dnsname common-lisp:null))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or rrtype common-lisp:null))
   (set-identifier common-lisp:nil :type
    (common-lisp:or resource-record-set-identifier common-lisp:null))
   (weight common-lisp:nil :type
    (common-lisp:or resource-record-set-weight common-lisp:null))
   (region common-lisp:nil :type
    (common-lisp:or resource-record-set-region common-lisp:null))
   (geo-location common-lisp:nil :type
    (common-lisp:or geo-location common-lisp:null))
   (failover common-lisp:nil :type
    (common-lisp:or resource-record-set-failover common-lisp:null))
   (multi-value-answer common-lisp:nil :type
    (common-lisp:or resource-record-set-multi-value-answer common-lisp:null))
   (ttl common-lisp:nil :type (common-lisp:or ttl common-lisp:null))
   (resource-records common-lisp:nil :type
    (common-lisp:or resource-records common-lisp:null))
   (alias-target common-lisp:nil :type
    (common-lisp:or alias-target common-lisp:null))
   (health-check-id common-lisp:nil :type
    (common-lisp:or health-check-id common-lisp:null))
   (traffic-policy-instance-id common-lisp:nil :type
    (common-lisp:or traffic-policy-instance-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-record-set 'make-resource-record-set))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape resource-record-set))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "SetIdentifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'set-identifier)))
    (aws-sdk/generator/shape::to-query-params "Weight"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'weight)))
    (aws-sdk/generator/shape::to-query-params "Region"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'region)))
    (aws-sdk/generator/shape::to-query-params "GeoLocation"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'geo-location)))
    (aws-sdk/generator/shape::to-query-params "Failover"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'failover)))
    (aws-sdk/generator/shape::to-query-params "MultiValueAnswer"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'multi-value-answer)))
    (aws-sdk/generator/shape::to-query-params "TTL"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ttl)))
    (aws-sdk/generator/shape::to-query-params "ResourceRecords"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-records)))
    (aws-sdk/generator/shape::to-query-params "AliasTarget"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'alias-target)))
    (aws-sdk/generator/shape::to-query-params "HealthCheckId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-id)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstanceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance-id))))))
(common-lisp:deftype resource-record-set-failover () 'common-lisp:string)
(common-lisp:deftype resource-record-set-identifier () 'common-lisp:string)
(common-lisp:deftype resource-record-set-multi-value-answer ()
  'common-lisp:boolean)
(common-lisp:deftype resource-record-set-region () 'common-lisp:string)
(common-lisp:deftype resource-record-set-weight () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype resource-record-sets ()
   '(trivial-types:proper-list resource-record-set))
 (common-lisp:defun |make-resource-record-sets|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-record-set))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype resource-records ()
   '(trivial-types:proper-list resource-record))
 (common-lisp:defun |make-resource-records|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (resource-tag-set (:copier common-lisp:nil))
   (resource-type common-lisp:nil :type
    (common-lisp:or tag-resource-type common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or tag-resource-id common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-tag-set 'make-resource-tag-set))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape resource-tag-set))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ResourceType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-type)))
    (aws-sdk/generator/shape::to-query-params "ResourceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-id)))
    (aws-sdk/generator/shape::to-query-params "Tags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tags))))))
(common-lisp:progn
 (common-lisp:deftype resource-tag-set-list ()
   '(trivial-types:proper-list resource-tag-set))
 (common-lisp:defun |make-resource-tag-set-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag-set))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-uri () 'common-lisp:string)
(common-lisp:deftype search-string () 'common-lisp:string)
(common-lisp:deftype statistic () 'common-lisp:string)
(common-lisp:deftype status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (status-report (:copier common-lisp:nil))
   (status common-lisp:nil :type (common-lisp:or status common-lisp:null))
   (checked-time common-lisp:nil :type
    (common-lisp:or time-stamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'status-report 'make-status-report))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape status-report))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "CheckedTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'checked-time))))))
(common-lisp:deftype subnet-mask () 'common-lisp:string)
(common-lisp:deftype ttl () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (tag (:copier common-lisp:nil))
   (key common-lisp:nil :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape tag))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Key"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key)))
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value))))))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-resource-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-resource-id-list ()
   '(trivial-types:proper-list tag-resource-id))
 (common-lisp:defun |make-tag-resource-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-resource-id))
   aws-sdk/generator/shape::members))
(common-lisp:deftype tag-resource-type () 'common-lisp:string)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (test-dnsanswer-request (:copier common-lisp:nil))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (record-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":record-name is required"))
    :type (common-lisp:or dnsname common-lisp:null))
   (record-type
    (common-lisp:error
     #A((24) common-lisp:base-char . ":record-type is required"))
    :type (common-lisp:or rrtype common-lisp:null))
   (resolver-ip common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (edns0client-subnet-ip common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (edns0client-subnet-mask common-lisp:nil :type
    (common-lisp:or subnet-mask common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-dnsanswer-request 'make-test-dnsanswer-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          test-dnsanswer-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "RecordName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'record-name)))
    (aws-sdk/generator/shape::to-query-params "RecordType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'record-type)))
    (aws-sdk/generator/shape::to-query-params "ResolverIP"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resolver-ip)))
    (aws-sdk/generator/shape::to-query-params "EDNS0ClientSubnetIP"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'edns0client-subnet-ip)))
    (aws-sdk/generator/shape::to-query-params "EDNS0ClientSubnetMask"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'edns0client-subnet-mask))))))
(common-lisp:progn
 (common-lisp:defstruct (test-dnsanswer-response (:copier common-lisp:nil))
   (nameserver
    (common-lisp:error
     #A((23) common-lisp:base-char . ":nameserver is required"))
    :type (common-lisp:or nameserver common-lisp:null))
   (record-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":record-name is required"))
    :type (common-lisp:or dnsname common-lisp:null))
   (record-type
    (common-lisp:error
     #A((24) common-lisp:base-char . ":record-type is required"))
    :type (common-lisp:or rrtype common-lisp:null))
   (record-data
    (common-lisp:error
     #A((24) common-lisp:base-char . ":record-data is required"))
    :type (common-lisp:or record-data common-lisp:null))
   (response-code
    (common-lisp:error
     #A((26) common-lisp:base-char . ":response-code is required"))
    :type (common-lisp:or dnsrcode common-lisp:null))
   (protocol
    (common-lisp:error
     #A((21) common-lisp:base-char . ":protocol is required"))
    :type (common-lisp:or transport-protocol common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'test-dnsanswer-response 'make-test-dnsanswer-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          test-dnsanswer-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Nameserver"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'nameserver)))
    (aws-sdk/generator/shape::to-query-params "RecordName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'record-name)))
    (aws-sdk/generator/shape::to-query-params "RecordType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'record-type)))
    (aws-sdk/generator/shape::to-query-params "RecordData"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'record-data)))
    (aws-sdk/generator/shape::to-query-params "ResponseCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'response-code)))
    (aws-sdk/generator/shape::to-query-params "Protocol"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'protocol))))))
(common-lisp:deftype threshold () 'common-lisp:double-float)
(common-lisp:progn
 (common-lisp:defstruct (throttling-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'make-throttling-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape throttling-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype time-stamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (too-many-health-checks (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'too-many-health-checks 'make-too-many-health-checks))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          too-many-health-checks))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (too-many-hosted-zones (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'too-many-hosted-zones 'make-too-many-hosted-zones))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          too-many-hosted-zones))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (too-many-traffic-policies (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'too-many-traffic-policies
                    'make-too-many-traffic-policies))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          too-many-traffic-policies))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (too-many-traffic-policy-instances (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'too-many-traffic-policy-instances
                    'make-too-many-traffic-policy-instances))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          too-many-traffic-policy-instances))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (too-many-vpcassociation-authorizations (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'too-many-vpcassociation-authorizations
                    'make-too-many-vpcassociation-authorizations))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          too-many-vpcassociation-authorizations))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:deftype traffic-policies ()
   '(trivial-types:proper-list traffic-policy))
 (common-lisp:defun |make-traffic-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list traffic-policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (traffic-policy (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (version
    (common-lisp:error #A((20) common-lisp:base-char . ":version is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or traffic-policy-name common-lisp:null))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or rrtype common-lisp:null))
   (document
    (common-lisp:error
     #A((21) common-lisp:base-char . ":document is required"))
    :type (common-lisp:or traffic-policy-document common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or traffic-policy-comment common-lisp:null)))
 (common-lisp:export (common-lisp:list 'traffic-policy 'make-traffic-policy))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape traffic-policy))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "Document"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'document)))
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment))))))
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-policy-already-exists (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-already-exists
                    'make-traffic-policy-already-exists))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          traffic-policy-already-exists))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype traffic-policy-comment () 'common-lisp:string)
(common-lisp:deftype traffic-policy-document () 'common-lisp:string)
(common-lisp:deftype traffic-policy-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (traffic-policy-in-use (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-in-use 'make-traffic-policy-in-use))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          traffic-policy-in-use))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (traffic-policy-instance (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-instance-id common-lisp:null))
   (hosted-zone-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hosted-zone-id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or dnsname common-lisp:null))
   (ttl (common-lisp:error #A((16) common-lisp:base-char . ":ttl is required"))
    :type (common-lisp:or ttl common-lisp:null))
   (state
    (common-lisp:error #A((18) common-lisp:base-char . ":state is required"))
    :type (common-lisp:or traffic-policy-instance-state common-lisp:null))
   (message
    (common-lisp:error #A((20) common-lisp:base-char . ":message is required"))
    :type (common-lisp:or message common-lisp:null))
   (traffic-policy-id
    (common-lisp:error
     #A((30) common-lisp:base-char . ":traffic-policy-id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version
    (common-lisp:error
     #A((35) common-lisp:base-char . ":traffic-policy-version is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null))
   (traffic-policy-type
    (common-lisp:error
     #A((32) common-lisp:base-char . ":traffic-policy-type is required"))
    :type (common-lisp:or rrtype common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-instance 'make-traffic-policy-instance))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          traffic-policy-instance))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "HostedZoneId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone-id)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "TTL"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ttl)))
    (aws-sdk/generator/shape::to-query-params "State"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'state)))
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-id)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-version)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-type))))))
(common-lisp:progn
 (common-lisp:defstruct
     (traffic-policy-instance-already-exists (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-instance-already-exists
                    'make-traffic-policy-instance-already-exists))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          traffic-policy-instance-already-exists))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype traffic-policy-instance-count () 'common-lisp:integer)
(common-lisp:deftype traffic-policy-instance-id () 'common-lisp:string)
(common-lisp:deftype traffic-policy-instance-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype traffic-policy-instances ()
   '(trivial-types:proper-list traffic-policy-instance))
 (common-lisp:defun |make-traffic-policy-instances|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list traffic-policy-instance))
   aws-sdk/generator/shape::members))
(common-lisp:deftype traffic-policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype traffic-policy-summaries ()
   '(trivial-types:proper-list traffic-policy-summary))
 (common-lisp:defun |make-traffic-policy-summaries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list traffic-policy-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (traffic-policy-summary (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or traffic-policy-name common-lisp:null))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or rrtype common-lisp:null))
   (latest-version
    (common-lisp:error
     #A((27) common-lisp:base-char . ":latest-version is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null))
   (traffic-policy-count
    (common-lisp:error
     #A((33) common-lisp:base-char . ":traffic-policy-count is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'traffic-policy-summary 'make-traffic-policy-summary))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          traffic-policy-summary))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "LatestVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'latest-version)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-count))))))
(common-lisp:deftype traffic-policy-version () 'common-lisp:integer)
(common-lisp:deftype traffic-policy-version-marker () 'common-lisp:string)
(common-lisp:deftype transport-protocol () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (update-health-check-request (:copier common-lisp:nil))
   (health-check-id
    (common-lisp:error
     #A((28) common-lisp:base-char . ":health-check-id is required"))
    :type (common-lisp:or health-check-id common-lisp:null))
   (health-check-version common-lisp:nil :type
    (common-lisp:or health-check-version common-lisp:null))
   (ipaddress common-lisp:nil :type
    (common-lisp:or ipaddress common-lisp:null))
   (port common-lisp:nil :type (common-lisp:or port common-lisp:null))
   (resource-path common-lisp:nil :type
    (common-lisp:or resource-path common-lisp:null))
   (fully-qualified-domain-name common-lisp:nil :type
    (common-lisp:or fully-qualified-domain-name common-lisp:null))
   (search-string common-lisp:nil :type
    (common-lisp:or search-string common-lisp:null))
   (failure-threshold common-lisp:nil :type
    (common-lisp:or failure-threshold common-lisp:null))
   (inverted common-lisp:nil :type (common-lisp:or inverted common-lisp:null))
   (health-threshold common-lisp:nil :type
    (common-lisp:or health-threshold common-lisp:null))
   (child-health-checks common-lisp:nil :type
    (common-lisp:or child-health-check-list common-lisp:null))
   (enable-sni common-lisp:nil :type
    (common-lisp:or enable-sni common-lisp:null))
   (regions common-lisp:nil :type
    (common-lisp:or health-check-region-list common-lisp:null))
   (alarm-identifier common-lisp:nil :type
    (common-lisp:or alarm-identifier common-lisp:null))
   (insufficient-data-health-status common-lisp:nil :type
    (common-lisp:or insufficient-data-health-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-health-check-request
                    'make-update-health-check-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-health-check-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheckId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-id)))
    (aws-sdk/generator/shape::to-query-params "HealthCheckVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check-version)))
    (aws-sdk/generator/shape::to-query-params "IPAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ipaddress)))
    (aws-sdk/generator/shape::to-query-params "Port"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'port)))
    (aws-sdk/generator/shape::to-query-params "ResourcePath"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-path)))
    (aws-sdk/generator/shape::to-query-params "FullyQualifiedDomainName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'fully-qualified-domain-name)))
    (aws-sdk/generator/shape::to-query-params "SearchString"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'search-string)))
    (aws-sdk/generator/shape::to-query-params "FailureThreshold"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'failure-threshold)))
    (aws-sdk/generator/shape::to-query-params "Inverted"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'inverted)))
    (aws-sdk/generator/shape::to-query-params "HealthThreshold"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-threshold)))
    (aws-sdk/generator/shape::to-query-params "ChildHealthChecks"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'child-health-checks)))
    (aws-sdk/generator/shape::to-query-params "EnableSNI"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'enable-sni)))
    (aws-sdk/generator/shape::to-query-params "Regions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'regions)))
    (aws-sdk/generator/shape::to-query-params "AlarmIdentifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'alarm-identifier)))
    (aws-sdk/generator/shape::to-query-params "InsufficientDataHealthStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'insufficient-data-health-status))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-health-check-response (:copier common-lisp:nil))
   (health-check
    (common-lisp:error
     #A((25) common-lisp:base-char . ":health-check is required"))
    :type (common-lisp:or health-check common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-health-check-response
                    'make-update-health-check-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-health-check-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HealthCheck"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'health-check))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-hosted-zone-comment-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or resource-id common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or resource-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-hosted-zone-comment-request
                    'make-update-hosted-zone-comment-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-hosted-zone-comment-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-hosted-zone-comment-response (:copier common-lisp:nil))
   (hosted-zone
    (common-lisp:error
     #A((24) common-lisp:base-char . ":hosted-zone is required"))
    :type (common-lisp:or hosted-zone common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-hosted-zone-comment-response
                    'make-update-hosted-zone-comment-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-hosted-zone-comment-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "HostedZone"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hosted-zone))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-policy-comment-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (version
    (common-lisp:error #A((20) common-lisp:base-char . ":version is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null))
   (comment
    (common-lisp:error #A((20) common-lisp:base-char . ":comment is required"))
    :type (common-lisp:or traffic-policy-comment common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-traffic-policy-comment-request
                    'make-update-traffic-policy-comment-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-traffic-policy-comment-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version)))
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-policy-comment-response (:copier common-lisp:nil))
   (traffic-policy
    (common-lisp:error
     #A((27) common-lisp:base-char . ":traffic-policy is required"))
    :type (common-lisp:or traffic-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-traffic-policy-comment-response
                    'make-update-traffic-policy-comment-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-traffic-policy-comment-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-policy-instance-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or traffic-policy-instance-id common-lisp:null))
   (ttl (common-lisp:error #A((16) common-lisp:base-char . ":ttl is required"))
    :type (common-lisp:or ttl common-lisp:null))
   (traffic-policy-id
    (common-lisp:error
     #A((30) common-lisp:base-char . ":traffic-policy-id is required"))
    :type (common-lisp:or traffic-policy-id common-lisp:null))
   (traffic-policy-version
    (common-lisp:error
     #A((35) common-lisp:base-char . ":traffic-policy-version is required"))
    :type (common-lisp:or traffic-policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-traffic-policy-instance-request
                    'make-update-traffic-policy-instance-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-traffic-policy-instance-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "TTL"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ttl)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-id)))
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-version))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-traffic-policy-instance-response (:copier common-lisp:nil))
   (traffic-policy-instance
    (common-lisp:error
     #A((36) common-lisp:base-char . ":traffic-policy-instance is required"))
    :type (common-lisp:or traffic-policy-instance common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-traffic-policy-instance-response
                    'make-update-traffic-policy-instance-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-traffic-policy-instance-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TrafficPolicyInstance"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'traffic-policy-instance))))))
(common-lisp:progn
 (common-lisp:defstruct (vpc (:copier common-lisp:nil))
   (vpcregion common-lisp:nil :type
    (common-lisp:or vpcregion common-lisp:null))
   (vpcid common-lisp:nil :type (common-lisp:or vpcid common-lisp:null)))
 (common-lisp:export (common-lisp:list 'vpc 'make-vpc))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape vpc))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "VPCRegion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpcregion)))
    (aws-sdk/generator/shape::to-query-params "VPCId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpcid))))))
(common-lisp:progn
 (common-lisp:defstruct
     (vpcassociation-authorization-not-found (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpcassociation-authorization-not-found
                    'make-vpcassociation-authorization-not-found))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          vpcassociation-authorization-not-found))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (vpcassociation-not-found (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'vpcassociation-not-found 'make-vpcassociation-not-found))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          vpcassociation-not-found))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype vpcid () 'common-lisp:string)
(common-lisp:deftype vpcregion () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype vpcs () '(trivial-types:proper-list vpc))
 (common-lisp:defun |make-vpcs|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list vpc))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun associate-vpcwith-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id vpc comment)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id vpc comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-vpcwith-hosted-zone-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a/associatevpc"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"AssociateVPCWithHostedZone")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "AssociateVPCWithHostedZoneResponse" common-lisp:nil)))
 (common-lisp:export 'associate-vpcwith-hosted-zone))
(common-lisp:progn
 (common-lisp:defun change-resource-record-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id change-batch)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id change-batch))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-change-resource-record-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a/rrset/"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ChangeResourceRecordSets")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ChangeResourceRecordSetsResponse" common-lisp:nil)))
 (common-lisp:export 'change-resource-record-sets))
(common-lisp:progn
 (common-lisp:defun change-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id add-tags
                     remove-tag-keys)
   (common-lisp:declare
    (common-lisp:ignorable resource-type resource-id add-tags remove-tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-change-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/tags/~a/~a"
                                                   resourcetype resourceid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ChangeTagsForResource")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ChangeTagsForResourceResponse" common-lisp:nil)))
 (common-lisp:export 'change-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun create-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key caller-reference health-check-config)
   (common-lisp:declare
    (common-lisp:ignorable caller-reference health-check-config))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-health-check-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateHealthCheck")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateHealthCheckResponse" common-lisp:nil)))
 (common-lisp:export 'create-health-check))
(common-lisp:progn
 (common-lisp:defun create-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name vpc caller-reference
                     hosted-zone-config delegation-set-id)
   (common-lisp:declare
    (common-lisp:ignorable name vpc caller-reference hosted-zone-config
     delegation-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-hosted-zone-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateHostedZone")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateHostedZoneResponse" common-lisp:nil)))
 (common-lisp:export 'create-hosted-zone))
(common-lisp:progn
 (common-lisp:defun create-reusable-delegation-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key caller-reference hosted-zone-id)
   (common-lisp:declare
    (common-lisp:ignorable caller-reference hosted-zone-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-reusable-delegation-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateReusableDelegationSet")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateReusableDelegationSetResponse" common-lisp:nil)))
 (common-lisp:export 'create-reusable-delegation-set))
(common-lisp:progn
 (common-lisp:defun create-traffic-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name document comment)
   (common-lisp:declare (common-lisp:ignorable name document comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-traffic-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateTrafficPolicy")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateTrafficPolicyResponse" common-lisp:nil)))
 (common-lisp:export 'create-traffic-policy))
(common-lisp:progn
 (common-lisp:defun create-traffic-policy-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id name ttl traffic-policy-id
                     traffic-policy-version)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id name ttl traffic-policy-id
     traffic-policy-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-traffic-policy-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateTrafficPolicyInstance")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateTrafficPolicyInstanceResponse" common-lisp:nil)))
 (common-lisp:export 'create-traffic-policy-instance))
(common-lisp:progn
 (common-lisp:defun create-traffic-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id document comment)
   (common-lisp:declare (common-lisp:ignorable id document comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-traffic-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/trafficpolicy/~a"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"CreateTrafficPolicyVersion")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateTrafficPolicyVersionResponse" common-lisp:nil)))
 (common-lisp:export 'create-traffic-policy-version))
(common-lisp:progn
 (common-lisp:defun create-vpcassociation-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id vpc)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-vpcassociation-authorization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a/authorizevpcassociation"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"CreateVPCAssociationAuthorization")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateVPCAssociationAuthorizationResponse" common-lisp:nil)))
 (common-lisp:export 'create-vpcassociation-authorization))
(common-lisp:progn
 (common-lisp:defun delete-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id)
   (common-lisp:declare (common-lisp:ignorable health-check-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-health-check-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/healthcheck/~a"
                                                   healthcheckid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteHealthCheck")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteHealthCheckResponse" common-lisp:nil)))
 (common-lisp:export 'delete-health-check))
(common-lisp:progn
 (common-lisp:defun delete-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-hosted-zone-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteHostedZone")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteHostedZoneResponse" common-lisp:nil)))
 (common-lisp:export 'delete-hosted-zone))
(common-lisp:progn
 (common-lisp:defun delete-reusable-delegation-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-reusable-delegation-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/delegationset/~a"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteReusableDelegationSet")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteReusableDelegationSetResponse" common-lisp:nil)))
 (common-lisp:export 'delete-reusable-delegation-set))
(common-lisp:progn
 (common-lisp:defun delete-traffic-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id version)
   (common-lisp:declare (common-lisp:ignorable id version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-traffic-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/trafficpolicy/~a/~a"
                                                   id version)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteTrafficPolicy")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteTrafficPolicyResponse" common-lisp:nil)))
 (common-lisp:export 'delete-traffic-policy))
(common-lisp:progn
 (common-lisp:defun delete-traffic-policy-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-traffic-policy-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/trafficpolicyinstance/~a"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteTrafficPolicyInstance")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteTrafficPolicyInstanceResponse" common-lisp:nil)))
 (common-lisp:export 'delete-traffic-policy-instance))
(common-lisp:progn
 (common-lisp:defun delete-vpcassociation-authorization
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id vpc)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id vpc))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-vpcassociation-authorization-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a/deauthorizevpcassociation"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"DeleteVPCAssociationAuthorization")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteVPCAssociationAuthorizationResponse" common-lisp:nil)))
 (common-lisp:export 'delete-vpcassociation-authorization))
(common-lisp:progn
 (common-lisp:defun disassociate-vpcfrom-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id vpc comment)
   (common-lisp:declare (common-lisp:ignorable hosted-zone-id vpc comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-vpcfrom-hosted-zone-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a/disassociatevpc"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DisassociateVPCFromHostedZone")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DisassociateVPCFromHostedZoneResponse" common-lisp:nil)))
 (common-lisp:export 'disassociate-vpcfrom-hosted-zone))
(common-lisp:progn
 (common-lisp:defun get-change
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-change-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/change/~a" id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetChange")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetChangeResponse" common-lisp:nil)))
 (common-lisp:export 'get-change))
(common-lisp:progn
 (common-lisp:defun get-checker-ip-ranges ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((7) common-lisp:base-char . "route53")
                             :method :get :params
                             (common-lisp:cons "Action" "GetCheckerIpRanges"))
    "GetCheckerIpRangesResponse" common-lisp:nil))
 (common-lisp:export 'get-checker-ip-ranges))
(common-lisp:progn
 (common-lisp:defun get-geo-location
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key continent-code country-code
                     subdivision-code)
   (common-lisp:declare
    (common-lisp:ignorable continent-code country-code subdivision-code))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-geo-location-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"GetGeoLocation")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetGeoLocationResponse" common-lisp:nil)))
 (common-lisp:export 'get-geo-location))
(common-lisp:progn
 (common-lisp:defun get-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id)
   (common-lisp:declare (common-lisp:ignorable health-check-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-health-check-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/healthcheck/~a"
                                                   healthcheckid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetHealthCheck")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetHealthCheckResponse" common-lisp:nil)))
 (common-lisp:export 'get-health-check))
(common-lisp:progn
 (common-lisp:defun get-health-check-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((7) common-lisp:base-char . "route53")
                             :method :get :params
                             (common-lisp:cons "Action" "GetHealthCheckCount"))
    "GetHealthCheckCountResponse" common-lisp:nil))
 (common-lisp:export 'get-health-check-count))
(common-lisp:progn
 (common-lisp:defun get-health-check-last-failure-reason
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id)
   (common-lisp:declare (common-lisp:ignorable health-check-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-health-check-last-failure-reason-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/healthcheck/~a/lastfailurereason"
                                                   healthcheckid)
                               :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"GetHealthCheckLastFailureReason")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetHealthCheckLastFailureReasonResponse" common-lisp:nil)))
 (common-lisp:export 'get-health-check-last-failure-reason))
(common-lisp:progn
 (common-lisp:defun get-health-check-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id)
   (common-lisp:declare (common-lisp:ignorable health-check-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-health-check-status-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/healthcheck/~a/status"
                                                   healthcheckid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetHealthCheckStatus")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetHealthCheckStatusResponse" common-lisp:nil)))
 (common-lisp:export 'get-health-check-status))
(common-lisp:progn
 (common-lisp:defun get-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-hosted-zone-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetHostedZone")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetHostedZoneResponse" common-lisp:nil)))
 (common-lisp:export 'get-hosted-zone))
(common-lisp:progn
 (common-lisp:defun get-hosted-zone-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((7) common-lisp:base-char . "route53")
                             :method :get :params
                             (common-lisp:cons "Action" "GetHostedZoneCount"))
    "GetHostedZoneCountResponse" common-lisp:nil))
 (common-lisp:export 'get-hosted-zone-count))
(common-lisp:progn
 (common-lisp:defun get-reusable-delegation-set
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-reusable-delegation-set-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/delegationset/~a"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetReusableDelegationSet")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetReusableDelegationSetResponse" common-lisp:nil)))
 (common-lisp:export 'get-reusable-delegation-set))
(common-lisp:progn
 (common-lisp:defun get-traffic-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id version)
   (common-lisp:declare (common-lisp:ignorable id version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-traffic-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/trafficpolicy/~a/~a"
                                                   id version)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetTrafficPolicy")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetTrafficPolicyResponse" common-lisp:nil)))
 (common-lisp:export 'get-traffic-policy))
(common-lisp:progn
 (common-lisp:defun get-traffic-policy-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-traffic-policy-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/trafficpolicyinstance/~a"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetTrafficPolicyInstance")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetTrafficPolicyInstanceResponse" common-lisp:nil)))
 (common-lisp:export 'get-traffic-policy-instance))
(common-lisp:progn
 (common-lisp:defun get-traffic-policy-instance-count ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((7) common-lisp:base-char . "route53")
                             :method :get :params
                             (common-lisp:cons "Action"
                                               "GetTrafficPolicyInstanceCount"))
    "GetTrafficPolicyInstanceCountResponse" common-lisp:nil))
 (common-lisp:export 'get-traffic-policy-instance-count))
(common-lisp:progn
 (common-lisp:defun list-geo-locations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key start-continent-code start-country-code
                     start-subdivision-code max-items)
   (common-lisp:declare
    (common-lisp:ignorable start-continent-code start-country-code
     start-subdivision-code max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-geo-locations-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListGeoLocations")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListGeoLocationsResponse" common-lisp:nil)))
 (common-lisp:export 'list-geo-locations))
(common-lisp:progn
 (common-lisp:defun list-health-checks
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-health-checks-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListHealthChecks")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListHealthChecksResponse" common-lisp:nil)))
 (common-lisp:export 'list-health-checks))
(common-lisp:progn
 (common-lisp:defun list-hosted-zones
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items delegation-set-id)
   (common-lisp:declare
    (common-lisp:ignorable marker max-items delegation-set-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-hosted-zones-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListHostedZones")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListHostedZonesResponse" common-lisp:nil)))
 (common-lisp:export 'list-hosted-zones))
(common-lisp:progn
 (common-lisp:defun list-hosted-zones-by-name
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dnsname hosted-zone-id max-items)
   (common-lisp:declare
    (common-lisp:ignorable dnsname hosted-zone-id max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-hosted-zones-by-name-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListHostedZonesByName")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListHostedZonesByNameResponse" common-lisp:nil)))
 (common-lisp:export 'list-hosted-zones-by-name))
(common-lisp:progn
 (common-lisp:defun list-resource-record-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id start-record-name
                     start-record-type start-record-identifier max-items)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id start-record-name start-record-type
     start-record-identifier max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-resource-record-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a/rrset"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ListResourceRecordSets")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListResourceRecordSetsResponse" common-lisp:nil)))
 (common-lisp:export 'list-resource-record-sets))
(common-lisp:progn
 (common-lisp:defun list-reusable-delegation-sets
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-reusable-delegation-sets-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListReusableDelegationSets")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListReusableDelegationSetsResponse" common-lisp:nil)))
 (common-lisp:export 'list-reusable-delegation-sets))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-id)
   (common-lisp:declare (common-lisp:ignorable resource-type resource-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/tags/~a/~a"
                                                   resourcetype resourceid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ListTagsForResource")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListTagsForResourceResponse" common-lisp:nil)))
 (common-lisp:export 'list-tags-for-resource))
(common-lisp:progn
 (common-lisp:defun list-tags-for-resources
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-type resource-ids)
   (common-lisp:declare (common-lisp:ignorable resource-type resource-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-resources-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/tags/~a"
                                                   resourcetype)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ListTagsForResources")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListTagsForResourcesResponse" common-lisp:nil)))
 (common-lisp:export 'list-tags-for-resources))
(common-lisp:progn
 (common-lisp:defun list-traffic-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key traffic-policy-id-marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable traffic-policy-id-marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-traffic-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListTrafficPolicies")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListTrafficPoliciesResponse" common-lisp:nil)))
 (common-lisp:export 'list-traffic-policies))
(common-lisp:progn
 (common-lisp:defun list-traffic-policy-instances
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id-marker
                     traffic-policy-instance-name-marker
                     traffic-policy-instance-type-marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id-marker
     traffic-policy-instance-name-marker traffic-policy-instance-type-marker
     max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-traffic-policy-instances-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListTrafficPolicyInstances")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListTrafficPolicyInstancesResponse" common-lisp:nil)))
 (common-lisp:export 'list-traffic-policy-instances))
(common-lisp:progn
 (common-lisp:defun list-traffic-policy-instances-by-hosted-zone
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id
                     traffic-policy-instance-name-marker
                     traffic-policy-instance-type-marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id traffic-policy-instance-name-marker
     traffic-policy-instance-type-marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-traffic-policy-instances-by-hosted-zone-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"ListTrafficPolicyInstancesByHostedZone")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListTrafficPolicyInstancesByHostedZoneResponse" common-lisp:nil)))
 (common-lisp:export 'list-traffic-policy-instances-by-hosted-zone))
(common-lisp:progn
 (common-lisp:defun list-traffic-policy-instances-by-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key traffic-policy-id traffic-policy-version
                     hosted-zone-id-marker traffic-policy-instance-name-marker
                     traffic-policy-instance-type-marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable traffic-policy-id traffic-policy-version
     hosted-zone-id-marker traffic-policy-instance-name-marker
     traffic-policy-instance-type-marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-traffic-policy-instances-by-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"ListTrafficPolicyInstancesByPolicy")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListTrafficPolicyInstancesByPolicyResponse" common-lisp:nil)))
 (common-lisp:export 'list-traffic-policy-instances-by-policy))
(common-lisp:progn
 (common-lisp:defun list-traffic-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id traffic-policy-version-marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable id traffic-policy-version-marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-traffic-policy-versions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/trafficpolicies/~a/versions"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ListTrafficPolicyVersions")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListTrafficPolicyVersionsResponse" common-lisp:nil)))
 (common-lisp:export 'list-traffic-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-vpcassociation-authorizations
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-vpcassociation-authorizations-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a/authorizevpcassociation"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"ListVPCAssociationAuthorizations")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListVPCAssociationAuthorizationsResponse" common-lisp:nil)))
 (common-lisp:export 'list-vpcassociation-authorizations))
(common-lisp:progn
 (common-lisp:defun test-dnsanswer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key hosted-zone-id record-name record-type
                     resolver-ip edns0client-subnet-ip edns0client-subnet-mask)
   (common-lisp:declare
    (common-lisp:ignorable hosted-zone-id record-name record-type resolver-ip
     edns0client-subnet-ip edns0client-subnet-mask))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-test-dnsanswer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"TestDNSAnswer")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "TestDNSAnswerResponse" common-lisp:nil)))
 (common-lisp:export 'test-dnsanswer))
(common-lisp:progn
 (common-lisp:defun update-health-check
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key health-check-id health-check-version
                     ipaddress port resource-path fully-qualified-domain-name
                     search-string failure-threshold inverted health-threshold
                     child-health-checks enable-sni regions alarm-identifier
                     insufficient-data-health-status)
   (common-lisp:declare
    (common-lisp:ignorable health-check-id health-check-version ipaddress port
     resource-path fully-qualified-domain-name search-string failure-threshold
     inverted health-threshold child-health-checks enable-sni regions
     alarm-identifier insufficient-data-health-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-health-check-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/healthcheck/~a"
                                                   healthcheckid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateHealthCheck")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateHealthCheckResponse" common-lisp:nil)))
 (common-lisp:export 'update-health-check))
(common-lisp:progn
 (common-lisp:defun update-hosted-zone-comment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id comment)
   (common-lisp:declare (common-lisp:ignorable id comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-hosted-zone-comment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/hostedzone/~a"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateHostedZoneComment")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateHostedZoneCommentResponse" common-lisp:nil)))
 (common-lisp:export 'update-hosted-zone-comment))
(common-lisp:progn
 (common-lisp:defun update-traffic-policy-comment
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id version comment)
   (common-lisp:declare (common-lisp:ignorable id version comment))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-traffic-policy-comment-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/trafficpolicy/~a/~a"
                                                   id version)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateTrafficPolicyComment")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateTrafficPolicyCommentResponse" common-lisp:nil)))
 (common-lisp:export 'update-traffic-policy-comment))
(common-lisp:progn
 (common-lisp:defun update-traffic-policy-instance
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id ttl traffic-policy-id
                     traffic-policy-version)
   (common-lisp:declare
    (common-lisp:ignorable id ttl traffic-policy-id traffic-policy-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-traffic-policy-instance-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "route53")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/2013-04-01/trafficpolicyinstance/~a"
                                                   id)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateTrafficPolicyInstance")
                                  ("Version" ,@"2013-04-01"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateTrafficPolicyInstanceResponse" common-lisp:nil)))
 (common-lisp:export 'update-traffic-policy-instance))