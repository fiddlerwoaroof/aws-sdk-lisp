;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iam
  (:use)
  (:nicknames #:aws/iam)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/iam)

(common-lisp:progn
 (common-lisp:defstruct (access-key (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (access-key-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":access-key-id is required"))
    :type (common-lisp:or |accessKeyIdType| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null))
   (secret-access-key
    (common-lisp:error
     #A((30) common-lisp:base-char . ":secret-access-key is required"))
    :type (common-lisp:or |accessKeySecretType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'access-key 'make-access-key))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape access-key))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "AccessKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'access-key-id)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "SecretAccessKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'secret-access-key)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date))))))
(common-lisp:progn
 (common-lisp:defstruct (access-key-last-used (:copier common-lisp:nil))
   (last-used-date
    (common-lisp:error
     #A((27) common-lisp:base-char . ":last-used-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null))
   (service-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":service-name is required"))
    :type (common-lisp:or |stringType| common-lisp:null))
   (region
    (common-lisp:error #A((19) common-lisp:base-char . ":region is required"))
    :type (common-lisp:or |stringType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-key-last-used 'make-access-key-last-used))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape access-key-last-used))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "LastUsedDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-used-date)))
    (aws-sdk/generator/shape::to-query-params "ServiceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-name)))
    (aws-sdk/generator/shape::to-query-params "Region"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'region))))))
(common-lisp:progn
 (common-lisp:defstruct (access-key-metadata (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (access-key-id common-lisp:nil :type
    (common-lisp:or |accessKeyIdType| common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or |statusType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-key-metadata 'make-access-key-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape access-key-metadata))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "AccessKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'access-key-id)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date))))))
(common-lisp:progn
 (common-lisp:deftype action-name-list-type ()
   '(trivial-types:proper-list action-name-type))
 (common-lisp:defun |make-action-name-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (add-client-idto-open-idconnect-provider-request
      (:copier common-lisp:nil))
   (open-idconnect-provider-arn
    (common-lisp:error
     #A((40) common-lisp:base-char
        . ":open-idconnect-provider-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (client-id
    (common-lisp:error
     #A((22) common-lisp:base-char . ":client-id is required"))
    :type (common-lisp:or |clientIDType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-client-idto-open-idconnect-provider-request
                    'make-add-client-idto-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          add-client-idto-open-idconnect-provider-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "OpenIDConnectProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'open-idconnect-provider-arn)))
    (aws-sdk/generator/shape::to-query-params "ClientID"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'client-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (add-role-to-instance-profile-request (:copier common-lisp:nil))
   (instance-profile-name
    (common-lisp:error
     #A((34) common-lisp:base-char . ":instance-profile-name is required"))
    :type (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-role-to-instance-profile-request
                    'make-add-role-to-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          add-role-to-instance-profile-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "InstanceProfileName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile-name)))
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name))))))
(common-lisp:progn
 (common-lisp:defstruct (add-user-to-group-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-user-to-group-request
                    'make-add-user-to-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          add-user-to-group-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name))))))
(common-lisp:progn
 (common-lisp:defstruct (attach-group-policy-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-group-policy-request
                    'make-attach-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          attach-group-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (attach-role-policy-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-role-policy-request
                    'make-attach-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          attach-role-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (attach-user-policy-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-user-policy-request
                    'make-attach-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          attach-user-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (attached-policy (:copier common-lisp:nil))
   (policy-name common-lisp:nil :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'attached-policy 'make-attached-policy))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape attached-policy))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:deftype bootstrap-datum ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct (change-password-request (:copier common-lisp:nil))
   (old-password
    (common-lisp:error
     #A((25) common-lisp:base-char . ":old-password is required"))
    :type (common-lisp:or |passwordType| common-lisp:null))
   (new-password
    (common-lisp:error
     #A((25) common-lisp:base-char . ":new-password is required"))
    :type (common-lisp:or |passwordType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'change-password-request 'make-change-password-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          change-password-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "OldPassword"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'old-password)))
    (aws-sdk/generator/shape::to-query-params "NewPassword"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-password))))))
(common-lisp:deftype column-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (context-entry (:copier common-lisp:nil))
   (context-key-name common-lisp:nil :type
    (common-lisp:or context-key-name-type common-lisp:null))
   (context-key-values common-lisp:nil :type
    (common-lisp:or context-key-value-list-type common-lisp:null))
   (context-key-type common-lisp:nil :type
    (common-lisp:or context-key-type-enum common-lisp:null)))
 (common-lisp:export (common-lisp:list 'context-entry 'make-context-entry))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape context-entry))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ContextKeyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'context-key-name)))
    (aws-sdk/generator/shape::to-query-params "ContextKeyValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'context-key-values)))
    (aws-sdk/generator/shape::to-query-params "ContextKeyType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'context-key-type))))))
(common-lisp:progn
 (common-lisp:deftype context-entry-list-type ()
   '(trivial-types:proper-list context-entry))
 (common-lisp:defun |make-context-entry-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-key-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype context-key-names-result-list-type ()
   '(trivial-types:proper-list context-key-name-type))
 (common-lisp:defun |make-context-key-names-result-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-key-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-key-type-enum () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype context-key-value-list-type ()
   '(trivial-types:proper-list context-key-value-type))
 (common-lisp:defun |make-context-key-value-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list context-key-value-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype context-key-value-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (create-access-key-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-key-request
                    'make-create-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-access-key-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name))))))
(common-lisp:progn
 (common-lisp:defstruct (create-access-key-response (:copier common-lisp:nil))
   (access-key
    (common-lisp:error
     #A((23) common-lisp:base-char . ":access-key is required"))
    :type (common-lisp:or access-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-access-key-response
                    'make-create-access-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-access-key-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AccessKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'access-key))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-account-alias-request (:copier common-lisp:nil))
   (account-alias
    (common-lisp:error
     #A((26) common-lisp:base-char . ":account-alias is required"))
    :type (common-lisp:or |accountAliasType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-account-alias-request
                    'make-create-account-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-account-alias-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AccountAlias"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'account-alias))))))
(common-lisp:progn
 (common-lisp:defstruct (create-group-request (:copier common-lisp:nil))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-request 'make-create-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-group-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name))))))
(common-lisp:progn
 (common-lisp:defstruct (create-group-response (:copier common-lisp:nil))
   (group
    (common-lisp:error #A((18) common-lisp:base-char . ":group is required"))
    :type (common-lisp:or group common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-group-response 'make-create-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-group-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Group"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-profile-request (:copier common-lisp:nil))
   (instance-profile-name
    (common-lisp:error
     #A((34) common-lisp:base-char . ":instance-profile-name is required"))
    :type (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-request
                    'make-create-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-instance-profile-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "InstanceProfileName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile-name)))
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-instance-profile-response (:copier common-lisp:nil))
   (instance-profile
    (common-lisp:error
     #A((29) common-lisp:base-char . ":instance-profile is required"))
    :type (common-lisp:or instance-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-instance-profile-response
                    'make-create-instance-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-instance-profile-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "InstanceProfile"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-login-profile-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (password
    (common-lisp:error
     #A((21) common-lisp:base-char . ":password is required"))
    :type (common-lisp:or |passwordType| common-lisp:null))
   (password-reset-required common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-login-profile-request
                    'make-create-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-login-profile-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Password"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'password)))
    (aws-sdk/generator/shape::to-query-params "PasswordResetRequired"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'password-reset-required))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-login-profile-response (:copier common-lisp:nil))
   (login-profile
    (common-lisp:error
     #A((26) common-lisp:base-char . ":login-profile is required"))
    :type (common-lisp:or login-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-login-profile-response
                    'make-create-login-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-login-profile-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "LoginProfile"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'login-profile))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-open-idconnect-provider-request (:copier common-lisp:nil))
   (url (common-lisp:error #A((16) common-lisp:base-char . ":url is required"))
    :type (common-lisp:or open-idconnect-provider-url-type common-lisp:null))
   (client-idlist common-lisp:nil :type
    (common-lisp:or |clientIDListType| common-lisp:null))
   (thumbprint-list
    (common-lisp:error
     #A((28) common-lisp:base-char . ":thumbprint-list is required"))
    :type (common-lisp:or |thumbprintListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-open-idconnect-provider-request
                    'make-create-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-open-idconnect-provider-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Url"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'url)))
    (aws-sdk/generator/shape::to-query-params "ClientIDList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'client-idlist)))
    (aws-sdk/generator/shape::to-query-params "ThumbprintList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thumbprint-list))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-open-idconnect-provider-response (:copier common-lisp:nil))
   (open-idconnect-provider-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-open-idconnect-provider-response
                    'make-create-open-idconnect-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-open-idconnect-provider-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "OpenIDConnectProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'open-idconnect-provider-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (create-policy-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |policyDescriptionType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-request 'make-create-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description))))))
(common-lisp:progn
 (common-lisp:defstruct (create-policy-response (:copier common-lisp:nil))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-response 'make-create-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Policy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-request (:copier common-lisp:nil))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null))
   (set-as-default common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-request
                    'make-create-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-policy-version-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document)))
    (aws-sdk/generator/shape::to-query-params "SetAsDefault"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'set-as-default))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-response (:copier common-lisp:nil))
   (policy-version common-lisp:nil :type
    (common-lisp:or policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-response
                    'make-create-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-policy-version-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-version))))))
(common-lisp:progn
 (common-lisp:defstruct (create-role-request (:copier common-lisp:nil))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (assume-role-policy-document
    (common-lisp:error
     #A((40) common-lisp:base-char
        . ":assume-role-policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |roleDescriptionType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-role-request 'make-create-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-role-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "AssumeRolePolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'assume-role-policy-document)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description))))))
(common-lisp:progn
 (common-lisp:defstruct (create-role-response (:copier common-lisp:nil))
   (role
    (common-lisp:error #A((17) common-lisp:base-char . ":role is required"))
    :type (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-role-response 'make-create-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-role-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role))))))
(common-lisp:progn
 (common-lisp:defstruct (create-samlprovider-request (:copier common-lisp:nil))
   (samlmetadata-document
    (common-lisp:error
     #A((34) common-lisp:base-char . ":samlmetadata-document is required"))
    :type (common-lisp:or samlmetadata-document-type common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or samlprovider-name-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-samlprovider-request
                    'make-create-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-samlprovider-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SAMLMetadataDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'samlmetadata-document)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-samlprovider-response (:copier common-lisp:nil))
   (samlprovider-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-samlprovider-response
                    'make-create-samlprovider-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-samlprovider-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SAMLProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'samlprovider-arn))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-linked-role-request (:copier common-lisp:nil))
   (awsservice-name
    (common-lisp:error
     #A((28) common-lisp:base-char . ":awsservice-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |roleDescriptionType| common-lisp:null))
   (custom-suffix common-lisp:nil :type
    (common-lisp:or |customSuffixType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-linked-role-request
                    'make-create-service-linked-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-service-linked-role-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AWSServiceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'awsservice-name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "CustomSuffix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'custom-suffix))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-linked-role-response (:copier common-lisp:nil))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-linked-role-response
                    'make-create-service-linked-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-service-linked-role-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-specific-credential-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (service-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":service-name is required"))
    :type (common-lisp:or |serviceName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-specific-credential-request
                    'make-create-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-service-specific-credential-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "ServiceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-service-specific-credential-response (:copier common-lisp:nil))
   (service-specific-credential common-lisp:nil :type
    (common-lisp:or service-specific-credential common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-service-specific-credential-response
                    'make-create-service-specific-credential-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-service-specific-credential-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServiceSpecificCredential"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-specific-credential))))))
(common-lisp:progn
 (common-lisp:defstruct (create-user-request (:copier common-lisp:nil))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-request 'make-create-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-user-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name))))))
(common-lisp:progn
 (common-lisp:defstruct (create-user-response (:copier common-lisp:nil))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-response 'make-create-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-user-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "User"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-mfadevice-request (:copier common-lisp:nil))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (virtual-mfadevice-name
    (common-lisp:error
     #A((35) common-lisp:base-char . ":virtual-mfadevice-name is required"))
    :type (common-lisp:or |virtualMFADeviceName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-mfadevice-request
                    'make-create-virtual-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-virtual-mfadevice-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "VirtualMFADeviceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-mfadevice-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-virtual-mfadevice-response (:copier common-lisp:nil))
   (virtual-mfadevice
    (common-lisp:error
     #A((30) common-lisp:base-char . ":virtual-mfadevice is required"))
    :type (common-lisp:or virtual-mfadevice common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-virtual-mfadevice-response
                    'make-create-virtual-mfadevice-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-virtual-mfadevice-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "VirtualMFADevice"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-mfadevice))))))
(common-lisp:progn
 (common-lisp:defstruct
     (credential-report-expired-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |credentialReportExpiredExceptionMessage|
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'credential-report-expired-exception
                    'make-credential-report-expired-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          credential-report-expired-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (credential-report-not-present-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |credentialReportNotPresentExceptionMessage|
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'credential-report-not-present-exception
                    'make-credential-report-not-present-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          credential-report-not-present-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (credential-report-not-ready-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |credentialReportNotReadyExceptionMessage|
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'credential-report-not-ready-exception
                    'make-credential-report-not-ready-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          credential-report-not-ready-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (deactivate-mfadevice-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (serial-number
    (common-lisp:error
     #A((26) common-lisp:base-char . ":serial-number is required"))
    :type (common-lisp:or |serialNumberType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deactivate-mfadevice-request
                    'make-deactivate-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          deactivate-mfadevice-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SerialNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'serial-number))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-access-key-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (access-key-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":access-key-id is required"))
    :type (common-lisp:or |accessKeyIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-access-key-request
                    'make-delete-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-access-key-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "AccessKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'access-key-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-account-alias-request (:copier common-lisp:nil))
   (account-alias
    (common-lisp:error
     #A((26) common-lisp:base-char . ":account-alias is required"))
    :type (common-lisp:or |accountAliasType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-account-alias-request
                    'make-delete-account-alias-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-account-alias-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AccountAlias"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'account-alias))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-conflict-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |deleteConflictMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-conflict-exception
                    'make-delete-conflict-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-conflict-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-group-policy-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-policy-request
                    'make-delete-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-group-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-group-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-group-request 'make-delete-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-group-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-instance-profile-request (:copier common-lisp:nil))
   (instance-profile-name
    (common-lisp:error
     #A((34) common-lisp:base-char . ":instance-profile-name is required"))
    :type (common-lisp:or |instanceProfileNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-instance-profile-request
                    'make-delete-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-instance-profile-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "InstanceProfileName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-login-profile-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-login-profile-request
                    'make-delete-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-login-profile-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-open-idconnect-provider-request (:copier common-lisp:nil))
   (open-idconnect-provider-arn
    (common-lisp:error
     #A((40) common-lisp:base-char
        . ":open-idconnect-provider-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-open-idconnect-provider-request
                    'make-delete-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-open-idconnect-provider-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "OpenIDConnectProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'open-idconnect-provider-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-policy-request (:copier common-lisp:nil))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-version-request (:copier common-lisp:nil))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (version-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":version-id is required"))
    :type (common-lisp:or |policyVersionIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-version-request
                    'make-delete-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-policy-version-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "VersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version-id))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-role-policy-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-role-policy-request
                    'make-delete-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-role-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-role-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-role-request 'make-delete-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-role-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-samlprovider-request (:copier common-lisp:nil))
   (samlprovider-arn
    (common-lisp:error
     #A((29) common-lisp:base-char . ":samlprovider-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-samlprovider-request
                    'make-delete-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-samlprovider-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SAMLProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'samlprovider-arn))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-sshpublic-key-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id
    (common-lisp:error
     #A((29) common-lisp:base-char . ":sshpublic-key-id is required"))
    :type (common-lisp:or |publicKeyIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-sshpublic-key-request
                    'make-delete-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-sshpublic-key-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SSHPublicKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-key-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-server-certificate-request (:copier common-lisp:nil))
   (server-certificate-name
    (common-lisp:error
     #A((36) common-lisp:base-char . ":server-certificate-name is required"))
    :type (common-lisp:or |serverCertificateNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-server-certificate-request
                    'make-delete-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-server-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServerCertificateName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-service-specific-credential-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error
     #A((43) common-lisp:base-char
        . ":service-specific-credential-id is required"))
    :type (common-lisp:or |serviceSpecificCredentialId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-service-specific-credential-request
                    'make-delete-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-service-specific-credential-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "ServiceSpecificCredentialId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-specific-credential-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-signing-certificate-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (certificate-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":certificate-id is required"))
    :type (common-lisp:or |certificateIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-signing-certificate-request
                    'make-delete-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-signing-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "CertificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-user-policy-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-policy-request
                    'make-delete-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-user-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-user-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-request 'make-delete-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-user-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-mfadevice-request (:copier common-lisp:nil))
   (serial-number
    (common-lisp:error
     #A((26) common-lisp:base-char . ":serial-number is required"))
    :type (common-lisp:or |serialNumberType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-mfadevice-request
                    'make-delete-virtual-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-virtual-mfadevice-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SerialNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'serial-number))))))
(common-lisp:progn
 (common-lisp:defstruct (detach-group-policy-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-group-policy-request
                    'make-detach-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detach-group-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (detach-role-policy-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-role-policy-request
                    'make-detach-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detach-role-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (detach-user-policy-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-user-policy-request
                    'make-detach-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detach-user-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:progn
 (common-lisp:defstruct
     (duplicate-certificate-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |duplicateCertificateMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'duplicate-certificate-exception
                    'make-duplicate-certificate-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          duplicate-certificate-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (duplicate-sshpublic-key-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |duplicateSSHPublicKeyMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'duplicate-sshpublic-key-exception
                    'make-duplicate-sshpublic-key-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          duplicate-sshpublic-key-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (enable-mfadevice-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (serial-number
    (common-lisp:error
     #A((26) common-lisp:base-char . ":serial-number is required"))
    :type (common-lisp:or |serialNumberType| common-lisp:null))
   (authentication-code1
    (common-lisp:error
     #A((33) common-lisp:base-char . ":authentication-code1 is required"))
    :type (common-lisp:or |authenticationCodeType| common-lisp:null))
   (authentication-code2
    (common-lisp:error
     #A((33) common-lisp:base-char . ":authentication-code2 is required"))
    :type (common-lisp:or |authenticationCodeType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-mfadevice-request 'make-enable-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          enable-mfadevice-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SerialNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'serial-number)))
    (aws-sdk/generator/shape::to-query-params "AuthenticationCode1"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'authentication-code1)))
    (aws-sdk/generator/shape::to-query-params "AuthenticationCode2"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'authentication-code2))))))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-already-exists-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |entityAlreadyExistsMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-already-exists-exception
                    'make-entity-already-exists-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          entity-already-exists-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (entity-temporarily-unmodifiable-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |entityTemporarilyUnmodifiableMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-temporarily-unmodifiable-exception
                    'make-entity-temporarily-unmodifiable-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          entity-temporarily-unmodifiable-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype entity-type () 'common-lisp:string)
(common-lisp:defstruct
    (eval-decision-details-type
     (:constructor |make-eval-decision-details-type|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:deftype eval-decision-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (evaluation-result (:copier common-lisp:nil))
   (eval-action-name
    (common-lisp:error
     #A((29) common-lisp:base-char . ":eval-action-name is required"))
    :type (common-lisp:or action-name-type common-lisp:null))
   (eval-resource-name common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (eval-decision
    (common-lisp:error
     #A((26) common-lisp:base-char . ":eval-decision is required"))
    :type (common-lisp:or policy-evaluation-decision-type common-lisp:null))
   (matched-statements common-lisp:nil :type
    (common-lisp:or statement-list-type common-lisp:null))
   (missing-context-values common-lisp:nil :type
    (common-lisp:or context-key-names-result-list-type common-lisp:null))
   (organizations-decision-detail common-lisp:nil :type
    (common-lisp:or organizations-decision-detail common-lisp:null))
   (eval-decision-details common-lisp:nil :type
    (common-lisp:or eval-decision-details-type common-lisp:null))
   (resource-specific-results common-lisp:nil :type
    (common-lisp:or resource-specific-result-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluation-result 'make-evaluation-result))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape evaluation-result))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EvalActionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'eval-action-name)))
    (aws-sdk/generator/shape::to-query-params "EvalResourceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'eval-resource-name)))
    (aws-sdk/generator/shape::to-query-params "EvalDecision"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'eval-decision)))
    (aws-sdk/generator/shape::to-query-params "MatchedStatements"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'matched-statements)))
    (aws-sdk/generator/shape::to-query-params "MissingContextValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'missing-context-values)))
    (aws-sdk/generator/shape::to-query-params "OrganizationsDecisionDetail"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'organizations-decision-detail)))
    (aws-sdk/generator/shape::to-query-params "EvalDecisionDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'eval-decision-details)))
    (aws-sdk/generator/shape::to-query-params "ResourceSpecificResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-specific-results))))))
(common-lisp:progn
 (common-lisp:deftype evaluation-results-list-type ()
   '(trivial-types:proper-list evaluation-result))
 (common-lisp:defun |make-evaluation-results-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list evaluation-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (generate-credential-report-response (:copier common-lisp:nil))
   (state common-lisp:nil :type
    (common-lisp:or report-state-type common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or report-state-description-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'generate-credential-report-response
                    'make-generate-credential-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          generate-credential-report-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "State"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'state)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-key-last-used-request (:copier common-lisp:nil))
   (access-key-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":access-key-id is required"))
    :type (common-lisp:or |accessKeyIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-key-last-used-request
                    'make-get-access-key-last-used-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-access-key-last-used-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AccessKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'access-key-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-access-key-last-used-response (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (access-key-last-used common-lisp:nil :type
    (common-lisp:or access-key-last-used common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-access-key-last-used-response
                    'make-get-access-key-last-used-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-access-key-last-used-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "AccessKeyLastUsed"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'access-key-last-used))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-authorization-details-request (:copier common-lisp:nil))
   (filter common-lisp:nil :type
    (common-lisp:or |entityListType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-authorization-details-request
                    'make-get-account-authorization-details-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-account-authorization-details-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Filter"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'filter)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-authorization-details-response (:copier common-lisp:nil))
   (user-detail-list common-lisp:nil :type
    (common-lisp:or |userDetailListType| common-lisp:null))
   (group-detail-list common-lisp:nil :type
    (common-lisp:or |groupDetailListType| common-lisp:null))
   (role-detail-list common-lisp:nil :type
    (common-lisp:or |roleDetailListType| common-lisp:null))
   (policies common-lisp:nil :type
    (common-lisp:or managed-policy-detail-list-type common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-authorization-details-response
                    'make-get-account-authorization-details-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-account-authorization-details-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserDetailList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-detail-list)))
    (aws-sdk/generator/shape::to-query-params "GroupDetailList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-detail-list)))
    (aws-sdk/generator/shape::to-query-params "RoleDetailList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-detail-list)))
    (aws-sdk/generator/shape::to-query-params "Policies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policies)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-password-policy-response (:copier common-lisp:nil))
   (password-policy
    (common-lisp:error
     #A((28) common-lisp:base-char . ":password-policy is required"))
    :type (common-lisp:or password-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-password-policy-response
                    'make-get-account-password-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-account-password-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PasswordPolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'password-policy))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-account-summary-response (:copier common-lisp:nil))
   (summary-map common-lisp:nil :type
    (common-lisp:or |summaryMapType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-account-summary-response
                    'make-get-account-summary-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-account-summary-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SummaryMap"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'summary-map))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-context-keys-for-custom-policy-request (:copier common-lisp:nil))
   (policy-input-list
    (common-lisp:error
     #A((30) common-lisp:base-char . ":policy-input-list is required"))
    :type (common-lisp:or simulation-policy-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-context-keys-for-custom-policy-request
                    'make-get-context-keys-for-custom-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-context-keys-for-custom-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyInputList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-input-list))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-context-keys-for-policy-response (:copier common-lisp:nil))
   (context-key-names common-lisp:nil :type
    (common-lisp:or context-key-names-result-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-context-keys-for-policy-response
                    'make-get-context-keys-for-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-context-keys-for-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ContextKeyNames"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'context-key-names))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-context-keys-for-principal-policy-request (:copier common-lisp:nil))
   (policy-source-arn
    (common-lisp:error
     #A((30) common-lisp:base-char . ":policy-source-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (policy-input-list common-lisp:nil :type
    (common-lisp:or simulation-policy-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-context-keys-for-principal-policy-request
                    'make-get-context-keys-for-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-context-keys-for-principal-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicySourceArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-source-arn)))
    (aws-sdk/generator/shape::to-query-params "PolicyInputList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-input-list))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-credential-report-response (:copier common-lisp:nil))
   (content common-lisp:nil :type
    (common-lisp:or report-content-type common-lisp:null))
   (report-format common-lisp:nil :type
    (common-lisp:or report-format-type common-lisp:null))
   (generated-time common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-credential-report-response
                    'make-get-credential-report-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-credential-report-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Content"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'content)))
    (aws-sdk/generator/shape::to-query-params "ReportFormat"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'report-format)))
    (aws-sdk/generator/shape::to-query-params "GeneratedTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'generated-time))))))
(common-lisp:progn
 (common-lisp:defstruct (get-group-policy-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-policy-request 'make-get-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-group-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-group-policy-response (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-policy-response
                    'make-get-group-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-group-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document))))))
(common-lisp:progn
 (common-lisp:defstruct (get-group-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-request 'make-get-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-group-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (get-group-response (:copier common-lisp:nil))
   (group
    (common-lisp:error #A((18) common-lisp:base-char . ":group is required"))
    :type (common-lisp:or group common-lisp:null))
   (users
    (common-lisp:error #A((18) common-lisp:base-char . ":users is required"))
    :type (common-lisp:or |userListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-group-response 'make-get-group-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-group-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Group"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group)))
    (aws-sdk/generator/shape::to-query-params "Users"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'users)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-profile-request (:copier common-lisp:nil))
   (instance-profile-name
    (common-lisp:error
     #A((34) common-lisp:base-char . ":instance-profile-name is required"))
    :type (common-lisp:or |instanceProfileNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-profile-request
                    'make-get-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-instance-profile-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "InstanceProfileName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-instance-profile-response (:copier common-lisp:nil))
   (instance-profile
    (common-lisp:error
     #A((29) common-lisp:base-char . ":instance-profile is required"))
    :type (common-lisp:or instance-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-instance-profile-response
                    'make-get-instance-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-instance-profile-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "InstanceProfile"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile))))))
(common-lisp:progn
 (common-lisp:defstruct (get-login-profile-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-login-profile-request
                    'make-get-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-login-profile-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-login-profile-response (:copier common-lisp:nil))
   (login-profile
    (common-lisp:error
     #A((26) common-lisp:base-char . ":login-profile is required"))
    :type (common-lisp:or login-profile common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-login-profile-response
                    'make-get-login-profile-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-login-profile-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "LoginProfile"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'login-profile))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-open-idconnect-provider-request (:copier common-lisp:nil))
   (open-idconnect-provider-arn
    (common-lisp:error
     #A((40) common-lisp:base-char
        . ":open-idconnect-provider-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-open-idconnect-provider-request
                    'make-get-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-open-idconnect-provider-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "OpenIDConnectProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'open-idconnect-provider-arn))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-open-idconnect-provider-response (:copier common-lisp:nil))
   (url common-lisp:nil :type
    (common-lisp:or open-idconnect-provider-url-type common-lisp:null))
   (client-idlist common-lisp:nil :type
    (common-lisp:or |clientIDListType| common-lisp:null))
   (thumbprint-list common-lisp:nil :type
    (common-lisp:or |thumbprintListType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-open-idconnect-provider-response
                    'make-get-open-idconnect-provider-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-open-idconnect-provider-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Url"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'url)))
    (aws-sdk/generator/shape::to-query-params "ClientIDList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'client-idlist)))
    (aws-sdk/generator/shape::to-query-params "ThumbprintList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thumbprint-list)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date))))))
(common-lisp:progn
 (common-lisp:defstruct (get-policy-request (:copier common-lisp:nil))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (get-policy-response (:copier common-lisp:nil))
   (policy common-lisp:nil :type (common-lisp:or policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Policy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy))))))
(common-lisp:progn
 (common-lisp:defstruct (get-policy-version-request (:copier common-lisp:nil))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (version-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":version-id is required"))
    :type (common-lisp:or |policyVersionIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-request
                    'make-get-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-policy-version-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "VersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version-id))))))
(common-lisp:progn
 (common-lisp:defstruct (get-policy-version-response (:copier common-lisp:nil))
   (policy-version common-lisp:nil :type
    (common-lisp:or policy-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-response
                    'make-get-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-policy-version-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-version))))))
(common-lisp:progn
 (common-lisp:defstruct (get-role-policy-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-role-policy-request 'make-get-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-role-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-role-policy-response (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-role-policy-response 'make-get-role-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-role-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document))))))
(common-lisp:progn
 (common-lisp:defstruct (get-role-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-role-request 'make-get-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-role-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-role-response (:copier common-lisp:nil))
   (role
    (common-lisp:error #A((17) common-lisp:base-char . ":role is required"))
    :type (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-role-response 'make-get-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-role-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role))))))
(common-lisp:progn
 (common-lisp:defstruct (get-samlprovider-request (:copier common-lisp:nil))
   (samlprovider-arn
    (common-lisp:error
     #A((29) common-lisp:base-char . ":samlprovider-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-samlprovider-request 'make-get-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-samlprovider-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SAMLProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'samlprovider-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (get-samlprovider-response (:copier common-lisp:nil))
   (samlmetadata-document common-lisp:nil :type
    (common-lisp:or samlmetadata-document-type common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (valid-until common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-samlprovider-response
                    'make-get-samlprovider-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-samlprovider-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SAMLMetadataDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'samlmetadata-document)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "ValidUntil"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'valid-until))))))
(common-lisp:progn
 (common-lisp:defstruct (get-sshpublic-key-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id
    (common-lisp:error
     #A((29) common-lisp:base-char . ":sshpublic-key-id is required"))
    :type (common-lisp:or |publicKeyIdType| common-lisp:null))
   (encoding
    (common-lisp:error
     #A((21) common-lisp:base-char . ":encoding is required"))
    :type (common-lisp:or |encodingType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sshpublic-key-request
                    'make-get-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-sshpublic-key-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SSHPublicKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-key-id)))
    (aws-sdk/generator/shape::to-query-params "Encoding"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encoding))))))
(common-lisp:progn
 (common-lisp:defstruct (get-sshpublic-key-response (:copier common-lisp:nil))
   (sshpublic-key common-lisp:nil :type
    (common-lisp:or sshpublic-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-sshpublic-key-response
                    'make-get-sshpublic-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-sshpublic-key-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SSHPublicKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-key))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-server-certificate-request (:copier common-lisp:nil))
   (server-certificate-name
    (common-lisp:error
     #A((36) common-lisp:base-char . ":server-certificate-name is required"))
    :type (common-lisp:or |serverCertificateNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-server-certificate-request
                    'make-get-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-server-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServerCertificateName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-server-certificate-response (:copier common-lisp:nil))
   (server-certificate
    (common-lisp:error
     #A((31) common-lisp:base-char . ":server-certificate is required"))
    :type (common-lisp:or server-certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-server-certificate-response
                    'make-get-server-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-server-certificate-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServerCertificate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate))))))
(common-lisp:progn
 (common-lisp:defstruct (get-user-policy-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-policy-request 'make-get-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-user-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-user-policy-response (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-policy-response 'make-get-user-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-user-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document))))))
(common-lisp:progn
 (common-lisp:defstruct (get-user-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-request 'make-get-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-user-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-user-response (:copier common-lisp:nil))
   (user
    (common-lisp:error #A((17) common-lisp:base-char . ":user is required"))
    :type (common-lisp:or user common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-response 'make-get-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-user-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "User"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user))))))
(common-lisp:progn
 (common-lisp:defstruct (group (:copier common-lisp:nil))
   (path
    (common-lisp:error #A((17) common-lisp:base-char . ":path is required"))
    :type (common-lisp:or |pathType| common-lisp:null))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (group-id
    (common-lisp:error
     #A((21) common-lisp:base-char . ":group-id is required"))
    :type (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error #A((16) common-lisp:base-char . ":arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (create-date
    (common-lisp:error
     #A((24) common-lisp:base-char . ":create-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group 'make-group))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape group))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "GroupId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date))))))
(common-lisp:progn
 (common-lisp:defstruct (group-detail (:copier common-lisp:nil))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (group-name common-lisp:nil :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (group-policy-list common-lisp:nil :type
    (common-lisp:or |policyDetailListType| common-lisp:null))
   (attached-managed-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'group-detail 'make-group-detail))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape group-detail))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "GroupId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "GroupPolicyList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-policy-list)))
    (aws-sdk/generator/shape::to-query-params "AttachedManagedPolicies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attached-managed-policies))))))
(common-lisp:progn
 (common-lisp:defstruct (instance-profile (:copier common-lisp:nil))
   (path
    (common-lisp:error #A((17) common-lisp:base-char . ":path is required"))
    :type (common-lisp:or |pathType| common-lisp:null))
   (instance-profile-name
    (common-lisp:error
     #A((34) common-lisp:base-char . ":instance-profile-name is required"))
    :type (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (instance-profile-id
    (common-lisp:error
     #A((32) common-lisp:base-char . ":instance-profile-id is required"))
    :type (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error #A((16) common-lisp:base-char . ":arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (create-date
    (common-lisp:error
     #A((24) common-lisp:base-char . ":create-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null))
   (roles
    (common-lisp:error #A((18) common-lisp:base-char . ":roles is required"))
    :type (common-lisp:or |roleListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-profile 'make-instance-profile))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape instance-profile))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "InstanceProfileName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile-name)))
    (aws-sdk/generator/shape::to-query-params "InstanceProfileId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "Roles"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'roles))))))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-authentication-code-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |invalidAuthenticationCodeMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-authentication-code-exception
                    'make-invalid-authentication-code-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-authentication-code-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-certificate-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |invalidCertificateMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-certificate-exception
                    'make-invalid-certificate-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-certificate-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-input-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |invalidInputMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'make-invalid-input-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-input-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-public-key-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |invalidPublicKeyMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-public-key-exception
                    'make-invalid-public-key-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-public-key-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-user-type-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |invalidUserTypeMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-user-type-exception
                    'make-invalid-user-type-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-user-type-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (key-pair-mismatch-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |keyPairMismatchMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'key-pair-mismatch-exception
                    'make-key-pair-mismatch-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          key-pair-mismatch-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (limit-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |limitExceededMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'make-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          limit-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype line-number () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (list-access-keys-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-keys-request 'make-list-access-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-access-keys-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-access-keys-response (:copier common-lisp:nil))
   (access-key-metadata
    (common-lisp:error
     #A((32) common-lisp:base-char . ":access-key-metadata is required"))
    :type (common-lisp:or |accessKeyMetadataListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-access-keys-response
                    'make-list-access-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-access-keys-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AccessKeyMetadata"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'access-key-metadata)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-account-aliases-request (:copier common-lisp:nil))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-account-aliases-request
                    'make-list-account-aliases-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-account-aliases-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-account-aliases-response (:copier common-lisp:nil))
   (account-aliases
    (common-lisp:error
     #A((28) common-lisp:base-char . ":account-aliases is required"))
    :type (common-lisp:or |accountAliasListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-account-aliases-response
                    'make-list-account-aliases-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-account-aliases-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AccountAliases"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'account-aliases)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-group-policies-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-group-policies-request
                    'make-list-attached-group-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-attached-group-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-group-policies-response (:copier common-lisp:nil))
   (attached-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-group-policies-response
                    'make-list-attached-group-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-attached-group-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AttachedPolicies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attached-policies)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-role-policies-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-role-policies-request
                    'make-list-attached-role-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-attached-role-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-role-policies-response (:copier common-lisp:nil))
   (attached-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-role-policies-response
                    'make-list-attached-role-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-attached-role-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AttachedPolicies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attached-policies)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-user-policies-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-user-policies-request
                    'make-list-attached-user-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-attached-user-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-attached-user-policies-response (:copier common-lisp:nil))
   (attached-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-attached-user-policies-response
                    'make-list-attached-user-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-attached-user-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AttachedPolicies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attached-policies)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-entities-for-policy-request (:copier common-lisp:nil))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (entity-filter common-lisp:nil :type
    (common-lisp:or entity-type common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-entities-for-policy-request
                    'make-list-entities-for-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-entities-for-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "EntityFilter"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'entity-filter)))
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-entities-for-policy-response (:copier common-lisp:nil))
   (policy-groups common-lisp:nil :type
    (common-lisp:or policy-group-list-type common-lisp:null))
   (policy-users common-lisp:nil :type
    (common-lisp:or policy-user-list-type common-lisp:null))
   (policy-roles common-lisp:nil :type
    (common-lisp:or policy-role-list-type common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-entities-for-policy-response
                    'make-list-entities-for-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-entities-for-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyGroups"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-groups)))
    (aws-sdk/generator/shape::to-query-params "PolicyUsers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-users)))
    (aws-sdk/generator/shape::to-query-params "PolicyRoles"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-roles)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-group-policies-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-policies-request
                    'make-list-group-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-group-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-group-policies-response (:copier common-lisp:nil))
   (policy-names
    (common-lisp:error
     #A((25) common-lisp:base-char . ":policy-names is required"))
    :type (common-lisp:or |policyNameListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-group-policies-response
                    'make-list-group-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-group-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyNames"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-names)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-for-user-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-for-user-request
                    'make-list-groups-for-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-groups-for-user-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-groups-for-user-response (:copier common-lisp:nil))
   (groups
    (common-lisp:error #A((19) common-lisp:base-char . ":groups is required"))
    :type (common-lisp:or |groupListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-for-user-response
                    'make-list-groups-for-user-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-groups-for-user-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Groups"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'groups)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-groups-request (:copier common-lisp:nil))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-request 'make-list-groups-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-groups-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-groups-response (:copier common-lisp:nil))
   (groups
    (common-lisp:error #A((19) common-lisp:base-char . ":groups is required"))
    :type (common-lisp:or |groupListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-groups-response 'make-list-groups-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-groups-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Groups"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'groups)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profiles-for-role-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-for-role-request
                    'make-list-instance-profiles-for-role-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-instance-profiles-for-role-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profiles-for-role-response (:copier common-lisp:nil))
   (instance-profiles
    (common-lisp:error
     #A((30) common-lisp:base-char . ":instance-profiles is required"))
    :type (common-lisp:or |instanceProfileListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-for-role-response
                    'make-list-instance-profiles-for-role-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-instance-profiles-for-role-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "InstanceProfiles"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profiles)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profiles-request (:copier common-lisp:nil))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-request
                    'make-list-instance-profiles-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-instance-profiles-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-instance-profiles-response (:copier common-lisp:nil))
   (instance-profiles
    (common-lisp:error
     #A((30) common-lisp:base-char . ":instance-profiles is required"))
    :type (common-lisp:or |instanceProfileListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-instance-profiles-response
                    'make-list-instance-profiles-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-instance-profiles-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "InstanceProfiles"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profiles)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-mfadevices-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mfadevices-request 'make-list-mfadevices-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-mfadevices-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-mfadevices-response (:copier common-lisp:nil))
   (mfadevices
    (common-lisp:error
     #A((23) common-lisp:base-char . ":mfadevices is required"))
    :type (common-lisp:or |mfaDeviceListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-mfadevices-response 'make-list-mfadevices-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-mfadevices-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "MFADevices"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'mfadevices)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-open-idconnect-providers-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-providers-request
                    'make-list-open-idconnect-providers-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-open-idconnect-providers-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (list-open-idconnect-providers-response (:copier common-lisp:nil))
   (open-idconnect-provider-list common-lisp:nil :type
    (common-lisp:or open-idconnect-provider-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-open-idconnect-providers-response
                    'make-list-open-idconnect-providers-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-open-idconnect-providers-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "OpenIDConnectProviderList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'open-idconnect-provider-list))))))
(common-lisp:progn
 (common-lisp:defstruct (list-policies-request (:copier common-lisp:nil))
   (scope common-lisp:nil :type
    (common-lisp:or |policyScopeType| common-lisp:null))
   (only-attached common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Scope"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'scope)))
    (aws-sdk/generator/shape::to-query-params "OnlyAttached"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'only-attached)))
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-policies-response (:copier common-lisp:nil))
   (policies common-lisp:nil :type
    (common-lisp:or |policyListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Policies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policies)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-request (:copier common-lisp:nil))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-request
                    'make-list-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policy-versions-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-response (:copier common-lisp:nil))
   (versions common-lisp:nil :type
    (common-lisp:or |policyDocumentVersionListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-response
                    'make-list-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policy-versions-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Versions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'versions)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-role-policies-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-role-policies-request
                    'make-list-role-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-role-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-role-policies-response (:copier common-lisp:nil))
   (policy-names
    (common-lisp:error
     #A((25) common-lisp:base-char . ":policy-names is required"))
    :type (common-lisp:or |policyNameListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-role-policies-response
                    'make-list-role-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-role-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyNames"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-names)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-roles-request (:copier common-lisp:nil))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-roles-request 'make-list-roles-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-roles-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-roles-response (:copier common-lisp:nil))
   (roles
    (common-lisp:error #A((18) common-lisp:base-char . ":roles is required"))
    :type (common-lisp:or |roleListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-roles-response 'make-list-roles-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-roles-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Roles"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'roles)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-samlproviders-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'list-samlproviders-request
                    'make-list-samlproviders-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-samlproviders-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (list-samlproviders-response (:copier common-lisp:nil))
   (samlprovider-list common-lisp:nil :type
    (common-lisp:or samlprovider-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-samlproviders-response
                    'make-list-samlproviders-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-samlproviders-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SAMLProviderList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'samlprovider-list))))))
(common-lisp:progn
 (common-lisp:defstruct (list-sshpublic-keys-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sshpublic-keys-request
                    'make-list-sshpublic-keys-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-sshpublic-keys-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-sshpublic-keys-response (:copier common-lisp:nil))
   (sshpublic-keys common-lisp:nil :type
    (common-lisp:or sshpublic-key-list-type common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-sshpublic-keys-response
                    'make-list-sshpublic-keys-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-sshpublic-keys-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SSHPublicKeys"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-keys)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-server-certificates-request (:copier common-lisp:nil))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-server-certificates-request
                    'make-list-server-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-server-certificates-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-server-certificates-response (:copier common-lisp:nil))
   (server-certificate-metadata-list
    (common-lisp:error
     #A((45) common-lisp:base-char
        . ":server-certificate-metadata-list is required"))
    :type
    (common-lisp:or |serverCertificateMetadataListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-server-certificates-response
                    'make-list-server-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-server-certificates-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServerCertificateMetadataList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate-metadata-list)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-specific-credentials-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (service-name common-lisp:nil :type
    (common-lisp:or |serviceName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-specific-credentials-request
                    'make-list-service-specific-credentials-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-service-specific-credentials-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "ServiceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-service-specific-credentials-response (:copier common-lisp:nil))
   (service-specific-credentials common-lisp:nil :type
    (common-lisp:or service-specific-credentials-list-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-service-specific-credentials-response
                    'make-list-service-specific-credentials-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-service-specific-credentials-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServiceSpecificCredentials"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-specific-credentials))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-signing-certificates-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-signing-certificates-request
                    'make-list-signing-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-signing-certificates-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-signing-certificates-response (:copier common-lisp:nil))
   (certificates
    (common-lisp:error
     #A((25) common-lisp:base-char . ":certificates is required"))
    :type (common-lisp:or |certificateListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-signing-certificates-response
                    'make-list-signing-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-signing-certificates-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Certificates"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificates)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-user-policies-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-policies-request
                    'make-list-user-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-user-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-user-policies-response (:copier common-lisp:nil))
   (policy-names
    (common-lisp:error
     #A((25) common-lisp:base-char . ":policy-names is required"))
    :type (common-lisp:or |policyNameListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-user-policies-response
                    'make-list-user-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-user-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyNames"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-names)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-users-request (:copier common-lisp:nil))
   (path-prefix common-lisp:nil :type
    (common-lisp:or |pathPrefixType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-request 'make-list-users-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-users-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PathPrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path-prefix)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct (list-users-response (:copier common-lisp:nil))
   (users
    (common-lisp:error #A((18) common-lisp:base-char . ":users is required"))
    :type (common-lisp:or |userListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-users-response 'make-list-users-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-users-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Users"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'users)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-mfadevices-request (:copier common-lisp:nil))
   (assignment-status common-lisp:nil :type
    (common-lisp:or |assignmentStatusType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-mfadevices-request
                    'make-list-virtual-mfadevices-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-virtual-mfadevices-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AssignmentStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'assignment-status)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-virtual-mfadevices-response (:copier common-lisp:nil))
   (virtual-mfadevices
    (common-lisp:error
     #A((31) common-lisp:base-char . ":virtual-mfadevices is required"))
    :type (common-lisp:or |virtualMFADeviceListType| common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-virtual-mfadevices-response
                    'make-list-virtual-mfadevices-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-virtual-mfadevices-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "VirtualMFADevices"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-mfadevices)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (login-profile (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (create-date
    (common-lisp:error
     #A((24) common-lisp:base-char . ":create-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null))
   (password-reset-required common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'login-profile 'make-login-profile))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape login-profile))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "PasswordResetRequired"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'password-reset-required))))))
(common-lisp:progn
 (common-lisp:defstruct (mfadevice (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (serial-number
    (common-lisp:error
     #A((26) common-lisp:base-char . ":serial-number is required"))
    :type (common-lisp:or |serialNumberType| common-lisp:null))
   (enable-date
    (common-lisp:error
     #A((24) common-lisp:base-char . ":enable-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mfadevice 'make-mfadevice))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape mfadevice))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SerialNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'serial-number)))
    (aws-sdk/generator/shape::to-query-params "EnableDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'enable-date))))))
(common-lisp:progn
 (common-lisp:defstruct
     (malformed-certificate-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |malformedCertificateMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'malformed-certificate-exception
                    'make-malformed-certificate-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          malformed-certificate-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (malformed-policy-document-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |malformedPolicyDocumentMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-document-exception
                    'make-malformed-policy-document-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          malformed-policy-document-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (managed-policy-detail (:copier common-lisp:nil))
   (policy-name common-lisp:nil :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or |policyVersionIdType| common-lisp:null))
   (attachment-count common-lisp:nil :type
    (common-lisp:or |attachmentCountType| common-lisp:null))
   (is-attachable common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |policyDescriptionType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (update-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (policy-version-list common-lisp:nil :type
    (common-lisp:or |policyDocumentVersionListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'managed-policy-detail 'make-managed-policy-detail))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          managed-policy-detail))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "DefaultVersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'default-version-id)))
    (aws-sdk/generator/shape::to-query-params "AttachmentCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attachment-count)))
    (aws-sdk/generator/shape::to-query-params "IsAttachable"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-attachable)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "UpdateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'update-date)))
    (aws-sdk/generator/shape::to-query-params "PolicyVersionList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-version-list))))))
(common-lisp:progn
 (common-lisp:deftype managed-policy-detail-list-type ()
   '(trivial-types:proper-list managed-policy-detail))
 (common-lisp:defun |make-managed-policy-detail-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list managed-policy-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (no-such-entity-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |noSuchEntityMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-such-entity-exception 'make-no-such-entity-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          no-such-entity-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (open-idconnect-provider-list-entry (:copier common-lisp:nil))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'open-idconnect-provider-list-entry
                    'make-open-idconnect-provider-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          open-idconnect-provider-list-entry))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn))))))
(common-lisp:progn
 (common-lisp:deftype open-idconnect-provider-list-type ()
   '(trivial-types:proper-list open-idconnect-provider-list-entry))
 (common-lisp:defun |make-open-idconnect-provider-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            open-idconnect-provider-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype open-idconnect-provider-url-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (organizations-decision-detail (:copier common-lisp:nil))
   (allowed-by-organizations common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'organizations-decision-detail
                    'make-organizations-decision-detail))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          organizations-decision-detail))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AllowedByOrganizations"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allowed-by-organizations))))))
(common-lisp:progn
 (common-lisp:defstruct (password-policy (:copier common-lisp:nil))
   (minimum-password-length common-lisp:nil :type
    (common-lisp:or |minimumPasswordLengthType| common-lisp:null))
   (require-symbols common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-numbers common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-uppercase-characters common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-lowercase-characters common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (allow-users-to-change-password common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (expire-passwords common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (max-password-age common-lisp:nil :type
    (common-lisp:or |maxPasswordAgeType| common-lisp:null))
   (password-reuse-prevention common-lisp:nil :type
    (common-lisp:or |passwordReusePreventionType| common-lisp:null))
   (hard-expiry common-lisp:nil :type
    (common-lisp:or |booleanObjectType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'password-policy 'make-password-policy))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape password-policy))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "MinimumPasswordLength"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'minimum-password-length)))
    (aws-sdk/generator/shape::to-query-params "RequireSymbols"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'require-symbols)))
    (aws-sdk/generator/shape::to-query-params "RequireNumbers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'require-numbers)))
    (aws-sdk/generator/shape::to-query-params "RequireUppercaseCharacters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'require-uppercase-characters)))
    (aws-sdk/generator/shape::to-query-params "RequireLowercaseCharacters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'require-lowercase-characters)))
    (aws-sdk/generator/shape::to-query-params "AllowUsersToChangePassword"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allow-users-to-change-password)))
    (aws-sdk/generator/shape::to-query-params "ExpirePasswords"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'expire-passwords)))
    (aws-sdk/generator/shape::to-query-params "MaxPasswordAge"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-password-age)))
    (aws-sdk/generator/shape::to-query-params "PasswordReusePrevention"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'password-reuse-prevention)))
    (aws-sdk/generator/shape::to-query-params "HardExpiry"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hard-expiry))))))
(common-lisp:progn
 (common-lisp:defstruct
     (password-policy-violation-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |passwordPolicyViolationMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'password-policy-violation-exception
                    'make-password-policy-violation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          password-policy-violation-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (policy (:copier common-lisp:nil))
   (policy-name common-lisp:nil :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (path common-lisp:nil :type
    (common-lisp:or |policyPathType| common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or |policyVersionIdType| common-lisp:null))
   (attachment-count common-lisp:nil :type
    (common-lisp:or |attachmentCountType| common-lisp:null))
   (is-attachable common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |policyDescriptionType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (update-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape policy))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "DefaultVersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'default-version-id)))
    (aws-sdk/generator/shape::to-query-params "AttachmentCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attachment-count)))
    (aws-sdk/generator/shape::to-query-params "IsAttachable"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-attachable)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "UpdateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'update-date))))))
(common-lisp:progn
 (common-lisp:defstruct (policy-detail (:copier common-lisp:nil))
   (policy-name common-lisp:nil :type
    (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-detail 'make-policy-detail))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape policy-detail))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document))))))
(common-lisp:deftype policy-evaluation-decision-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (policy-evaluation-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |policyEvaluationErrorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'policy-evaluation-exception
                    'make-policy-evaluation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          policy-evaluation-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (policy-group (:copier common-lisp:nil))
   (group-name common-lisp:nil :type
    (common-lisp:or |groupNameType| common-lisp:null))
   (group-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-group 'make-policy-group))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape policy-group))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "GroupId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-id))))))
(common-lisp:progn
 (common-lisp:deftype policy-group-list-type ()
   '(trivial-types:proper-list policy-group))
 (common-lisp:defun |make-policy-group-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-group))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-identifier-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (policy-role (:copier common-lisp:nil))
   (role-name common-lisp:nil :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (role-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-role 'make-policy-role))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape policy-role))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "RoleId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-id))))))
(common-lisp:progn
 (common-lisp:deftype policy-role-list-type ()
   '(trivial-types:proper-list policy-role))
 (common-lisp:defun |make-policy-role-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype policy-source-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (policy-user (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-user 'make-policy-user))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape policy-user))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "UserId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-id))))))
(common-lisp:progn
 (common-lisp:deftype policy-user-list-type ()
   '(trivial-types:proper-list policy-user))
 (common-lisp:defun |make-policy-user-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-user))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (policy-version (:copier common-lisp:nil))
   (document common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or |policyVersionIdType| common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-version 'make-policy-version))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape policy-version))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Document"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'document)))
    (aws-sdk/generator/shape::to-query-params "VersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version-id)))
    (aws-sdk/generator/shape::to-query-params "IsDefaultVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-default-version)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date))))))
(common-lisp:progn
 (common-lisp:defstruct (position (:copier common-lisp:nil))
   (line common-lisp:nil :type (common-lisp:or line-number common-lisp:null))
   (column common-lisp:nil :type
    (common-lisp:or column-number common-lisp:null)))
 (common-lisp:export (common-lisp:list 'position 'make-position))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape position))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Line"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'line)))
    (aws-sdk/generator/shape::to-query-params "Column"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'column))))))
(common-lisp:progn
 (common-lisp:defstruct (put-group-policy-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-group-policy-request 'make-put-group-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-group-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document))))))
(common-lisp:progn
 (common-lisp:defstruct (put-role-policy-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-role-policy-request 'make-put-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-role-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document))))))
(common-lisp:progn
 (common-lisp:defstruct (put-user-policy-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (policy-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":policy-name is required"))
    :type (common-lisp:or |policyNameType| common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-user-policy-request 'make-put-user-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-user-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document))))))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-client-idfrom-open-idconnect-provider-request
      (:copier common-lisp:nil))
   (open-idconnect-provider-arn
    (common-lisp:error
     #A((40) common-lisp:base-char
        . ":open-idconnect-provider-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (client-id
    (common-lisp:error
     #A((22) common-lisp:base-char . ":client-id is required"))
    :type (common-lisp:or |clientIDType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-client-idfrom-open-idconnect-provider-request
                    'make-remove-client-idfrom-open-idconnect-provider-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          remove-client-idfrom-open-idconnect-provider-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "OpenIDConnectProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'open-idconnect-provider-arn)))
    (aws-sdk/generator/shape::to-query-params "ClientID"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'client-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-role-from-instance-profile-request (:copier common-lisp:nil))
   (instance-profile-name
    (common-lisp:error
     #A((34) common-lisp:base-char . ":instance-profile-name is required"))
    :type (common-lisp:or |instanceProfileNameType| common-lisp:null))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-role-from-instance-profile-request
                    'make-remove-role-from-instance-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          remove-role-from-instance-profile-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "InstanceProfileName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile-name)))
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-user-from-group-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-user-from-group-request
                    'make-remove-user-from-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          remove-user-from-group-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name))))))
(common-lisp:deftype report-content-type ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype report-format-type () 'common-lisp:string)
(common-lisp:deftype report-state-description-type () 'common-lisp:string)
(common-lisp:deftype report-state-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (reset-service-specific-credential-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error
     #A((43) common-lisp:base-char
        . ":service-specific-credential-id is required"))
    :type (common-lisp:or |serviceSpecificCredentialId| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-service-specific-credential-request
                    'make-reset-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          reset-service-specific-credential-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "ServiceSpecificCredentialId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-specific-credential-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (reset-service-specific-credential-response (:copier common-lisp:nil))
   (service-specific-credential common-lisp:nil :type
    (common-lisp:or service-specific-credential common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-service-specific-credential-response
                    'make-reset-service-specific-credential-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          reset-service-specific-credential-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServiceSpecificCredential"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-specific-credential))))))
(common-lisp:deftype resource-handling-option-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-name-list-type ()
   '(trivial-types:proper-list resource-name-type))
 (common-lisp:defun |make-resource-name-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-name-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype resource-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (resource-specific-result (:copier common-lisp:nil))
   (eval-resource-name
    (common-lisp:error
     #A((31) common-lisp:base-char . ":eval-resource-name is required"))
    :type (common-lisp:or resource-name-type common-lisp:null))
   (eval-resource-decision
    (common-lisp:error
     #A((35) common-lisp:base-char . ":eval-resource-decision is required"))
    :type (common-lisp:or policy-evaluation-decision-type common-lisp:null))
   (matched-statements common-lisp:nil :type
    (common-lisp:or statement-list-type common-lisp:null))
   (missing-context-values common-lisp:nil :type
    (common-lisp:or context-key-names-result-list-type common-lisp:null))
   (eval-decision-details common-lisp:nil :type
    (common-lisp:or eval-decision-details-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-specific-result 'make-resource-specific-result))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          resource-specific-result))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EvalResourceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'eval-resource-name)))
    (aws-sdk/generator/shape::to-query-params "EvalResourceDecision"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'eval-resource-decision)))
    (aws-sdk/generator/shape::to-query-params "MatchedStatements"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'matched-statements)))
    (aws-sdk/generator/shape::to-query-params "MissingContextValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'missing-context-values)))
    (aws-sdk/generator/shape::to-query-params "EvalDecisionDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'eval-decision-details))))))
(common-lisp:progn
 (common-lisp:deftype resource-specific-result-list-type ()
   '(trivial-types:proper-list resource-specific-result))
 (common-lisp:defun |make-resource-specific-result-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            resource-specific-result))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (resync-mfadevice-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (serial-number
    (common-lisp:error
     #A((26) common-lisp:base-char . ":serial-number is required"))
    :type (common-lisp:or |serialNumberType| common-lisp:null))
   (authentication-code1
    (common-lisp:error
     #A((33) common-lisp:base-char . ":authentication-code1 is required"))
    :type (common-lisp:or |authenticationCodeType| common-lisp:null))
   (authentication-code2
    (common-lisp:error
     #A((33) common-lisp:base-char . ":authentication-code2 is required"))
    :type (common-lisp:or |authenticationCodeType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resync-mfadevice-request 'make-resync-mfadevice-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          resync-mfadevice-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SerialNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'serial-number)))
    (aws-sdk/generator/shape::to-query-params "AuthenticationCode1"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'authentication-code1)))
    (aws-sdk/generator/shape::to-query-params "AuthenticationCode2"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'authentication-code2))))))
(common-lisp:progn
 (common-lisp:defstruct (role (:copier common-lisp:nil))
   (path
    (common-lisp:error #A((17) common-lisp:base-char . ":path is required"))
    :type (common-lisp:or |pathType| common-lisp:null))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (role-id
    (common-lisp:error #A((20) common-lisp:base-char . ":role-id is required"))
    :type (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error #A((16) common-lisp:base-char . ":arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (create-date
    (common-lisp:error
     #A((24) common-lisp:base-char . ":create-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null))
   (assume-role-policy-document common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or |roleDescriptionType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'role 'make-role))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape role))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "RoleId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "AssumeRolePolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'assume-role-policy-document)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description))))))
(common-lisp:progn
 (common-lisp:defstruct (role-detail (:copier common-lisp:nil))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (role-name common-lisp:nil :type
    (common-lisp:or |roleNameType| common-lisp:null))
   (role-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (assume-role-policy-document common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (instance-profile-list common-lisp:nil :type
    (common-lisp:or |instanceProfileListType| common-lisp:null))
   (role-policy-list common-lisp:nil :type
    (common-lisp:or |policyDetailListType| common-lisp:null))
   (attached-managed-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'role-detail 'make-role-detail))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape role-detail))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "RoleId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "AssumeRolePolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'assume-role-policy-document)))
    (aws-sdk/generator/shape::to-query-params "InstanceProfileList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-profile-list)))
    (aws-sdk/generator/shape::to-query-params "RolePolicyList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-policy-list)))
    (aws-sdk/generator/shape::to-query-params "AttachedManagedPolicies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attached-managed-policies))))))
(common-lisp:deftype samlmetadata-document-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (samlprovider-list-entry (:copier common-lisp:nil))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (valid-until common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'samlprovider-list-entry 'make-samlprovider-list-entry))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          samlprovider-list-entry))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "ValidUntil"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'valid-until)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date))))))
(common-lisp:progn
 (common-lisp:deftype samlprovider-list-type ()
   '(trivial-types:proper-list samlprovider-list-entry))
 (common-lisp:defun |make-samlprovider-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list samlprovider-list-entry))
   aws-sdk/generator/shape::members))
(common-lisp:deftype samlprovider-name-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (sshpublic-key (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id
    (common-lisp:error
     #A((29) common-lisp:base-char . ":sshpublic-key-id is required"))
    :type (common-lisp:or |publicKeyIdType| common-lisp:null))
   (fingerprint
    (common-lisp:error
     #A((24) common-lisp:base-char . ":fingerprint is required"))
    :type (common-lisp:or |publicKeyFingerprintType| common-lisp:null))
   (sshpublic-key-body
    (common-lisp:error
     #A((31) common-lisp:base-char . ":sshpublic-key-body is required"))
    :type (common-lisp:or |publicKeyMaterialType| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null))
   (upload-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sshpublic-key 'make-sshpublic-key))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape sshpublic-key))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SSHPublicKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-key-id)))
    (aws-sdk/generator/shape::to-query-params "Fingerprint"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'fingerprint)))
    (aws-sdk/generator/shape::to-query-params "SSHPublicKeyBody"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-key-body)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "UploadDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'upload-date))))))
(common-lisp:progn
 (common-lisp:deftype sshpublic-key-list-type ()
   '(trivial-types:proper-list sshpublic-key-metadata))
 (common-lisp:defun |make-sshpublic-key-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list sshpublic-key-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (sshpublic-key-metadata (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id
    (common-lisp:error
     #A((29) common-lisp:base-char . ":sshpublic-key-id is required"))
    :type (common-lisp:or |publicKeyIdType| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null))
   (upload-date
    (common-lisp:error
     #A((24) common-lisp:base-char . ":upload-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sshpublic-key-metadata 'make-sshpublic-key-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          sshpublic-key-metadata))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SSHPublicKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-key-id)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "UploadDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'upload-date))))))
(common-lisp:progn
 (common-lisp:defstruct (server-certificate (:copier common-lisp:nil))
   (server-certificate-metadata
    (common-lisp:error
     #A((40) common-lisp:base-char
        . ":server-certificate-metadata is required"))
    :type (common-lisp:or server-certificate-metadata common-lisp:null))
   (certificate-body
    (common-lisp:error
     #A((29) common-lisp:base-char . ":certificate-body is required"))
    :type (common-lisp:or |certificateBodyType| common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or |certificateChainType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-certificate 'make-server-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape server-certificate))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServerCertificateMetadata"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate-metadata)))
    (aws-sdk/generator/shape::to-query-params "CertificateBody"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-body)))
    (aws-sdk/generator/shape::to-query-params "CertificateChain"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-chain))))))
(common-lisp:progn
 (common-lisp:defstruct (server-certificate-metadata (:copier common-lisp:nil))
   (path
    (common-lisp:error #A((17) common-lisp:base-char . ":path is required"))
    :type (common-lisp:or |pathType| common-lisp:null))
   (server-certificate-name
    (common-lisp:error
     #A((36) common-lisp:base-char . ":server-certificate-name is required"))
    :type (common-lisp:or |serverCertificateNameType| common-lisp:null))
   (server-certificate-id
    (common-lisp:error
     #A((34) common-lisp:base-char . ":server-certificate-id is required"))
    :type (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error #A((16) common-lisp:base-char . ":arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (upload-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (expiration common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'server-certificate-metadata
                    'make-server-certificate-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          server-certificate-metadata))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "ServerCertificateName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate-name)))
    (aws-sdk/generator/shape::to-query-params "ServerCertificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "UploadDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'upload-date)))
    (aws-sdk/generator/shape::to-query-params "Expiration"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'expiration))))))
(common-lisp:progn
 (common-lisp:defstruct (service-failure-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |serviceFailureExceptionMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception
                    'make-service-failure-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          service-failure-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (service-not-supported-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |serviceNotSupportedMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-not-supported-exception
                    'make-service-not-supported-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          service-not-supported-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (service-specific-credential (:copier common-lisp:nil))
   (create-date
    (common-lisp:error
     #A((24) common-lisp:base-char . ":create-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null))
   (service-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":service-name is required"))
    :type (common-lisp:or |serviceName| common-lisp:null))
   (service-user-name
    (common-lisp:error
     #A((30) common-lisp:base-char . ":service-user-name is required"))
    :type (common-lisp:or |serviceUserName| common-lisp:null))
   (service-password
    (common-lisp:error
     #A((29) common-lisp:base-char . ":service-password is required"))
    :type (common-lisp:or |servicePassword| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error
     #A((43) common-lisp:base-char
        . ":service-specific-credential-id is required"))
    :type (common-lisp:or |serviceSpecificCredentialId| common-lisp:null))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-specific-credential
                    'make-service-specific-credential))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          service-specific-credential))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "ServiceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-name)))
    (aws-sdk/generator/shape::to-query-params "ServiceUserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-user-name)))
    (aws-sdk/generator/shape::to-query-params "ServicePassword"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-password)))
    (aws-sdk/generator/shape::to-query-params "ServiceSpecificCredentialId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-specific-credential-id)))
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:progn
 (common-lisp:defstruct
     (service-specific-credential-metadata (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null))
   (service-user-name
    (common-lisp:error
     #A((30) common-lisp:base-char . ":service-user-name is required"))
    :type (common-lisp:or |serviceUserName| common-lisp:null))
   (create-date
    (common-lisp:error
     #A((24) common-lisp:base-char . ":create-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error
     #A((43) common-lisp:base-char
        . ":service-specific-credential-id is required"))
    :type (common-lisp:or |serviceSpecificCredentialId| common-lisp:null))
   (service-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":service-name is required"))
    :type (common-lisp:or |serviceName| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-specific-credential-metadata
                    'make-service-specific-credential-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          service-specific-credential-metadata))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "ServiceUserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-user-name)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "ServiceSpecificCredentialId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-specific-credential-id)))
    (aws-sdk/generator/shape::to-query-params "ServiceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-name))))))
(common-lisp:progn
 (common-lisp:deftype service-specific-credentials-list-type ()
   '(trivial-types:proper-list service-specific-credential-metadata))
 (common-lisp:defun |make-service-specific-credentials-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            service-specific-credential-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-policy-version-request (:copier common-lisp:nil))
   (policy-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policy-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (version-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":version-id is required"))
    :type (common-lisp:or |policyVersionIdType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-policy-version-request
                    'make-set-default-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          set-default-policy-version-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "VersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version-id))))))
(common-lisp:progn
 (common-lisp:defstruct (signing-certificate (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (certificate-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":certificate-id is required"))
    :type (common-lisp:or |certificateIdType| common-lisp:null))
   (certificate-body
    (common-lisp:error
     #A((29) common-lisp:base-char . ":certificate-body is required"))
    :type (common-lisp:or |certificateBodyType| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null))
   (upload-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'signing-certificate 'make-signing-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape signing-certificate))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "CertificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "CertificateBody"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-body)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "UploadDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'upload-date))))))
(common-lisp:progn
 (common-lisp:defstruct
     (simulate-custom-policy-request (:copier common-lisp:nil))
   (policy-input-list
    (common-lisp:error
     #A((30) common-lisp:base-char . ":policy-input-list is required"))
    :type (common-lisp:or simulation-policy-list-type common-lisp:null))
   (action-names
    (common-lisp:error
     #A((25) common-lisp:base-char . ":action-names is required"))
    :type (common-lisp:or action-name-list-type common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-name-list-type common-lisp:null))
   (resource-policy common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (resource-owner common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (caller-arn common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (context-entries common-lisp:nil :type
    (common-lisp:or context-entry-list-type common-lisp:null))
   (resource-handling-option common-lisp:nil :type
    (common-lisp:or resource-handling-option-type common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simulate-custom-policy-request
                    'make-simulate-custom-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          simulate-custom-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicyInputList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-input-list)))
    (aws-sdk/generator/shape::to-query-params "ActionNames"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-names)))
    (aws-sdk/generator/shape::to-query-params "ResourceArns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-arns)))
    (aws-sdk/generator/shape::to-query-params "ResourcePolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-policy)))
    (aws-sdk/generator/shape::to-query-params "ResourceOwner"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-owner)))
    (aws-sdk/generator/shape::to-query-params "CallerArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'caller-arn)))
    (aws-sdk/generator/shape::to-query-params "ContextEntries"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'context-entries)))
    (aws-sdk/generator/shape::to-query-params "ResourceHandlingOption"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-handling-option)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (simulate-policy-response (:copier common-lisp:nil))
   (evaluation-results common-lisp:nil :type
    (common-lisp:or evaluation-results-list-type common-lisp:null))
   (is-truncated common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simulate-policy-response 'make-simulate-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          simulate-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EvaluationResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'evaluation-results)))
    (aws-sdk/generator/shape::to-query-params "IsTruncated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-truncated)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (simulate-principal-policy-request (:copier common-lisp:nil))
   (policy-source-arn
    (common-lisp:error
     #A((30) common-lisp:base-char . ":policy-source-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (policy-input-list common-lisp:nil :type
    (common-lisp:or simulation-policy-list-type common-lisp:null))
   (action-names
    (common-lisp:error
     #A((25) common-lisp:base-char . ":action-names is required"))
    :type (common-lisp:or action-name-list-type common-lisp:null))
   (resource-arns common-lisp:nil :type
    (common-lisp:or resource-name-list-type common-lisp:null))
   (resource-policy common-lisp:nil :type
    (common-lisp:or |policyDocumentType| common-lisp:null))
   (resource-owner common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (caller-arn common-lisp:nil :type
    (common-lisp:or resource-name-type common-lisp:null))
   (context-entries common-lisp:nil :type
    (common-lisp:or context-entry-list-type common-lisp:null))
   (resource-handling-option common-lisp:nil :type
    (common-lisp:or resource-handling-option-type common-lisp:null))
   (max-items common-lisp:nil :type
    (common-lisp:or |maxItemsType| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or |markerType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'simulate-principal-policy-request
                    'make-simulate-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          simulate-principal-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PolicySourceArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-source-arn)))
    (aws-sdk/generator/shape::to-query-params "PolicyInputList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-input-list)))
    (aws-sdk/generator/shape::to-query-params "ActionNames"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-names)))
    (aws-sdk/generator/shape::to-query-params "ResourceArns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-arns)))
    (aws-sdk/generator/shape::to-query-params "ResourcePolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-policy)))
    (aws-sdk/generator/shape::to-query-params "ResourceOwner"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-owner)))
    (aws-sdk/generator/shape::to-query-params "CallerArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'caller-arn)))
    (aws-sdk/generator/shape::to-query-params "ContextEntries"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'context-entries)))
    (aws-sdk/generator/shape::to-query-params "ResourceHandlingOption"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-handling-option)))
    (aws-sdk/generator/shape::to-query-params "MaxItems"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-items)))
    (aws-sdk/generator/shape::to-query-params "Marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:deftype simulation-policy-list-type ()
   '(trivial-types:proper-list |policyDocumentType|))
 (common-lisp:defun |make-simulation-policy-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |policyDocumentType|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (statement (:copier common-lisp:nil))
   (source-policy-id common-lisp:nil :type
    (common-lisp:or policy-identifier-type common-lisp:null))
   (source-policy-type common-lisp:nil :type
    (common-lisp:or policy-source-type common-lisp:null))
   (start-position common-lisp:nil :type
    (common-lisp:or position common-lisp:null))
   (end-position common-lisp:nil :type
    (common-lisp:or position common-lisp:null)))
 (common-lisp:export (common-lisp:list 'statement 'make-statement))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape statement))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SourcePolicyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source-policy-id)))
    (aws-sdk/generator/shape::to-query-params "SourcePolicyType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source-policy-type)))
    (aws-sdk/generator/shape::to-query-params "StartPosition"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-position)))
    (aws-sdk/generator/shape::to-query-params "EndPosition"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'end-position))))))
(common-lisp:progn
 (common-lisp:deftype statement-list-type ()
   '(trivial-types:proper-list statement))
 (common-lisp:defun |make-statement-list-type|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list statement))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (unmodifiable-entity-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |unmodifiableEntityMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unmodifiable-entity-exception
                    'make-unmodifiable-entity-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          unmodifiable-entity-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (unrecognized-public-key-encoding-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |unrecognizedPublicKeyEncodingMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unrecognized-public-key-encoding-exception
                    'make-unrecognized-public-key-encoding-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          unrecognized-public-key-encoding-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (update-access-key-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (access-key-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":access-key-id is required"))
    :type (common-lisp:or |accessKeyIdType| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-access-key-request
                    'make-update-access-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-access-key-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "AccessKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'access-key-id)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-account-password-policy-request (:copier common-lisp:nil))
   (minimum-password-length common-lisp:nil :type
    (common-lisp:or |minimumPasswordLengthType| common-lisp:null))
   (require-symbols common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-numbers common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-uppercase-characters common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (require-lowercase-characters common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (allow-users-to-change-password common-lisp:nil :type
    (common-lisp:or |booleanType| common-lisp:null))
   (max-password-age common-lisp:nil :type
    (common-lisp:or |maxPasswordAgeType| common-lisp:null))
   (password-reuse-prevention common-lisp:nil :type
    (common-lisp:or |passwordReusePreventionType| common-lisp:null))
   (hard-expiry common-lisp:nil :type
    (common-lisp:or |booleanObjectType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-account-password-policy-request
                    'make-update-account-password-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-account-password-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "MinimumPasswordLength"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'minimum-password-length)))
    (aws-sdk/generator/shape::to-query-params "RequireSymbols"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'require-symbols)))
    (aws-sdk/generator/shape::to-query-params "RequireNumbers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'require-numbers)))
    (aws-sdk/generator/shape::to-query-params "RequireUppercaseCharacters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'require-uppercase-characters)))
    (aws-sdk/generator/shape::to-query-params "RequireLowercaseCharacters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'require-lowercase-characters)))
    (aws-sdk/generator/shape::to-query-params "AllowUsersToChangePassword"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allow-users-to-change-password)))
    (aws-sdk/generator/shape::to-query-params "MaxPasswordAge"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-password-age)))
    (aws-sdk/generator/shape::to-query-params "PasswordReusePrevention"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'password-reuse-prevention)))
    (aws-sdk/generator/shape::to-query-params "HardExpiry"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hard-expiry))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-assume-role-policy-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policy-document is required"))
    :type (common-lisp:or |policyDocumentType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-assume-role-policy-request
                    'make-update-assume-role-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-assume-role-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "PolicyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document))))))
(common-lisp:progn
 (common-lisp:defstruct (update-group-request (:copier common-lisp:nil))
   (group-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":group-name is required"))
    :type (common-lisp:or |groupNameType| common-lisp:null))
   (new-path common-lisp:nil :type
    (common-lisp:or |pathType| common-lisp:null))
   (new-group-name common-lisp:nil :type
    (common-lisp:or |groupNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-group-request 'make-update-group-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape update-group-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-name)))
    (aws-sdk/generator/shape::to-query-params "NewPath"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-path)))
    (aws-sdk/generator/shape::to-query-params "NewGroupName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-group-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-login-profile-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (password common-lisp:nil :type
    (common-lisp:or |passwordType| common-lisp:null))
   (password-reset-required common-lisp:nil :type
    (common-lisp:or |booleanObjectType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-login-profile-request
                    'make-update-login-profile-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-login-profile-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "Password"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'password)))
    (aws-sdk/generator/shape::to-query-params "PasswordResetRequired"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'password-reset-required))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-open-idconnect-provider-thumbprint-request
      (:copier common-lisp:nil))
   (open-idconnect-provider-arn
    (common-lisp:error
     #A((40) common-lisp:base-char
        . ":open-idconnect-provider-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (thumbprint-list
    (common-lisp:error
     #A((28) common-lisp:base-char . ":thumbprint-list is required"))
    :type (common-lisp:or |thumbprintListType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-open-idconnect-provider-thumbprint-request
                    'make-update-open-idconnect-provider-thumbprint-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-open-idconnect-provider-thumbprint-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "OpenIDConnectProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'open-idconnect-provider-arn)))
    (aws-sdk/generator/shape::to-query-params "ThumbprintList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thumbprint-list))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-role-description-request (:copier common-lisp:nil))
   (role-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":role-name is required"))
    :type (common-lisp:or |roleNameType| common-lisp:null))
   (description
    (common-lisp:error
     #A((24) common-lisp:base-char . ":description is required"))
    :type (common-lisp:or |roleDescriptionType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-role-description-request
                    'make-update-role-description-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-role-description-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "RoleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-role-description-response (:copier common-lisp:nil))
   (role common-lisp:nil :type (common-lisp:or role common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-role-description-response
                    'make-update-role-description-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-role-description-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role))))))
(common-lisp:progn
 (common-lisp:defstruct (update-samlprovider-request (:copier common-lisp:nil))
   (samlmetadata-document
    (common-lisp:error
     #A((34) common-lisp:base-char . ":samlmetadata-document is required"))
    :type (common-lisp:or samlmetadata-document-type common-lisp:null))
   (samlprovider-arn
    (common-lisp:error
     #A((29) common-lisp:base-char . ":samlprovider-arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-samlprovider-request
                    'make-update-samlprovider-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-samlprovider-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SAMLMetadataDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'samlmetadata-document)))
    (aws-sdk/generator/shape::to-query-params "SAMLProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'samlprovider-arn))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-samlprovider-response (:copier common-lisp:nil))
   (samlprovider-arn common-lisp:nil :type
    (common-lisp:or |arnType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-samlprovider-response
                    'make-update-samlprovider-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-samlprovider-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SAMLProviderArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'samlprovider-arn))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-sshpublic-key-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-id
    (common-lisp:error
     #A((29) common-lisp:base-char . ":sshpublic-key-id is required"))
    :type (common-lisp:or |publicKeyIdType| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-sshpublic-key-request
                    'make-update-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-sshpublic-key-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SSHPublicKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-key-id)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-server-certificate-request (:copier common-lisp:nil))
   (server-certificate-name
    (common-lisp:error
     #A((36) common-lisp:base-char . ":server-certificate-name is required"))
    :type (common-lisp:or |serverCertificateNameType| common-lisp:null))
   (new-path common-lisp:nil :type
    (common-lisp:or |pathType| common-lisp:null))
   (new-server-certificate-name common-lisp:nil :type
    (common-lisp:or |serverCertificateNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-server-certificate-request
                    'make-update-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-server-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServerCertificateName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate-name)))
    (aws-sdk/generator/shape::to-query-params "NewPath"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-path)))
    (aws-sdk/generator/shape::to-query-params "NewServerCertificateName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-server-certificate-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-service-specific-credential-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (service-specific-credential-id
    (common-lisp:error
     #A((43) common-lisp:base-char
        . ":service-specific-credential-id is required"))
    :type (common-lisp:or |serviceSpecificCredentialId| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-service-specific-credential-request
                    'make-update-service-specific-credential-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-service-specific-credential-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "ServiceSpecificCredentialId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'service-specific-credential-id)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-signing-certificate-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (certificate-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":certificate-id is required"))
    :type (common-lisp:or |certificateIdType| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or |statusType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-signing-certificate-request
                    'make-update-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-signing-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "CertificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:progn
 (common-lisp:defstruct (update-user-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |existingUserNameType| common-lisp:null))
   (new-path common-lisp:nil :type
    (common-lisp:or |pathType| common-lisp:null))
   (new-user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-request 'make-update-user-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape update-user-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "NewPath"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-path)))
    (aws-sdk/generator/shape::to-query-params "NewUserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-user-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-sshpublic-key-request (:copier common-lisp:nil))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (sshpublic-key-body
    (common-lisp:error
     #A((31) common-lisp:base-char . ":sshpublic-key-body is required"))
    :type (common-lisp:or |publicKeyMaterialType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-sshpublic-key-request
                    'make-upload-sshpublic-key-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          upload-sshpublic-key-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "SSHPublicKeyBody"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-key-body))))))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-sshpublic-key-response (:copier common-lisp:nil))
   (sshpublic-key common-lisp:nil :type
    (common-lisp:or sshpublic-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-sshpublic-key-response
                    'make-upload-sshpublic-key-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          upload-sshpublic-key-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SSHPublicKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sshpublic-key))))))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-server-certificate-request (:copier common-lisp:nil))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (server-certificate-name
    (common-lisp:error
     #A((36) common-lisp:base-char . ":server-certificate-name is required"))
    :type (common-lisp:or |serverCertificateNameType| common-lisp:null))
   (certificate-body
    (common-lisp:error
     #A((29) common-lisp:base-char . ":certificate-body is required"))
    :type (common-lisp:or |certificateBodyType| common-lisp:null))
   (private-key
    (common-lisp:error
     #A((24) common-lisp:base-char . ":private-key is required"))
    :type (common-lisp:or |privateKeyType| common-lisp:null))
   (certificate-chain common-lisp:nil :type
    (common-lisp:or |certificateChainType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-server-certificate-request
                    'make-upload-server-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          upload-server-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "ServerCertificateName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate-name)))
    (aws-sdk/generator/shape::to-query-params "CertificateBody"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-body)))
    (aws-sdk/generator/shape::to-query-params "PrivateKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'private-key)))
    (aws-sdk/generator/shape::to-query-params "CertificateChain"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-chain))))))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-server-certificate-response (:copier common-lisp:nil))
   (server-certificate-metadata common-lisp:nil :type
    (common-lisp:or server-certificate-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-server-certificate-response
                    'make-upload-server-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          upload-server-certificate-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ServerCertificateMetadata"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'server-certificate-metadata))))))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-signing-certificate-request (:copier common-lisp:nil))
   (user-name common-lisp:nil :type
    (common-lisp:or |existingUserNameType| common-lisp:null))
   (certificate-body
    (common-lisp:error
     #A((29) common-lisp:base-char . ":certificate-body is required"))
    :type (common-lisp:or |certificateBodyType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-signing-certificate-request
                    'make-upload-signing-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          upload-signing-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "CertificateBody"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-body))))))
(common-lisp:progn
 (common-lisp:defstruct
     (upload-signing-certificate-response (:copier common-lisp:nil))
   (certificate
    (common-lisp:error
     #A((24) common-lisp:base-char . ":certificate is required"))
    :type (common-lisp:or signing-certificate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'upload-signing-certificate-response
                    'make-upload-signing-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          upload-signing-certificate-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Certificate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate))))))
(common-lisp:progn
 (common-lisp:defstruct (user (:copier common-lisp:nil))
   (path
    (common-lisp:error #A((17) common-lisp:base-char . ":path is required"))
    :type (common-lisp:or |pathType| common-lisp:null))
   (user-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":user-name is required"))
    :type (common-lisp:or |userNameType| common-lisp:null))
   (user-id
    (common-lisp:error #A((20) common-lisp:base-char . ":user-id is required"))
    :type (common-lisp:or |idType| common-lisp:null))
   (arn (common-lisp:error #A((16) common-lisp:base-char . ":arn is required"))
    :type (common-lisp:or |arnType| common-lisp:null))
   (create-date
    (common-lisp:error
     #A((24) common-lisp:base-char . ":create-date is required"))
    :type (common-lisp:or |dateType| common-lisp:null))
   (password-last-used common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user 'make-user))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape user))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "UserId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "PasswordLastUsed"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'password-last-used))))))
(common-lisp:progn
 (common-lisp:defstruct (user-detail (:copier common-lisp:nil))
   (path common-lisp:nil :type (common-lisp:or |pathType| common-lisp:null))
   (user-name common-lisp:nil :type
    (common-lisp:or |userNameType| common-lisp:null))
   (user-id common-lisp:nil :type (common-lisp:or |idType| common-lisp:null))
   (arn common-lisp:nil :type (common-lisp:or |arnType| common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null))
   (user-policy-list common-lisp:nil :type
    (common-lisp:or |policyDetailListType| common-lisp:null))
   (group-list common-lisp:nil :type
    (common-lisp:or |groupNameListType| common-lisp:null))
   (attached-managed-policies common-lisp:nil :type
    (common-lisp:or |attachedPoliciesListType| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'user-detail 'make-user-detail))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape user-detail))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "UserName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-name)))
    (aws-sdk/generator/shape::to-query-params "UserId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-id)))
    (aws-sdk/generator/shape::to-query-params "Arn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arn)))
    (aws-sdk/generator/shape::to-query-params "CreateDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date)))
    (aws-sdk/generator/shape::to-query-params "UserPolicyList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-policy-list)))
    (aws-sdk/generator/shape::to-query-params "GroupList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'group-list)))
    (aws-sdk/generator/shape::to-query-params "AttachedManagedPolicies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attached-managed-policies))))))
(common-lisp:progn
 (common-lisp:defstruct (virtual-mfadevice (:copier common-lisp:nil))
   (serial-number
    (common-lisp:error
     #A((26) common-lisp:base-char . ":serial-number is required"))
    :type (common-lisp:or |serialNumberType| common-lisp:null))
   (base32string-seed common-lisp:nil :type
    (common-lisp:or bootstrap-datum common-lisp:null))
   (qrcode-png common-lisp:nil :type
    (common-lisp:or bootstrap-datum common-lisp:null))
   (user common-lisp:nil :type (common-lisp:or user common-lisp:null))
   (enable-date common-lisp:nil :type
    (common-lisp:or |dateType| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-mfadevice 'make-virtual-mfadevice))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape virtual-mfadevice))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SerialNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'serial-number)))
    (aws-sdk/generator/shape::to-query-params "Base32StringSeed"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'base32string-seed)))
    (aws-sdk/generator/shape::to-query-params "QRCodePNG"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'qrcode-png)))
    (aws-sdk/generator/shape::to-query-params "User"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user)))
    (aws-sdk/generator/shape::to-query-params "EnableDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'enable-date))))))
(common-lisp:deftype |accessKeyIdType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |accessKeyMetadataListType| ()
   '(trivial-types:proper-list access-key-metadata))
 (common-lisp:defun |make-accesskeymetadatalisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list access-key-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |accessKeySecretType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |accountAliasListType| ()
   '(trivial-types:proper-list |accountAliasType|))
 (common-lisp:defun |make-accountaliaslisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |accountAliasType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |accountAliasType| () 'common-lisp:string)
(common-lisp:deftype |arnType| () 'common-lisp:string)
(common-lisp:deftype |assignmentStatusType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |attachedPoliciesListType| ()
   '(trivial-types:proper-list attached-policy))
 (common-lisp:defun |make-attachedpolicieslisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attached-policy))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |attachmentCountType| () 'common-lisp:integer)
(common-lisp:deftype |authenticationCodeType| () 'common-lisp:string)
(common-lisp:deftype |booleanObjectType| () 'common-lisp:boolean)
(common-lisp:deftype |booleanType| () 'common-lisp:boolean)
(common-lisp:deftype |certificateBodyType| () 'common-lisp:string)
(common-lisp:deftype |certificateChainType| () 'common-lisp:string)
(common-lisp:deftype |certificateIdType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |certificateListType| ()
   '(trivial-types:proper-list signing-certificate))
 (common-lisp:defun |make-certificatelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list signing-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |clientIDListType| ()
   '(trivial-types:proper-list |clientIDType|))
 (common-lisp:defun |make-clientidlisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |clientIDType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |clientIDType| () 'common-lisp:string)
(common-lisp:deftype |credentialReportExpiredExceptionMessage| ()
  'common-lisp:string)
(common-lisp:deftype |credentialReportNotPresentExceptionMessage| ()
  'common-lisp:string)
(common-lisp:deftype |credentialReportNotReadyExceptionMessage| ()
  'common-lisp:string)
(common-lisp:deftype |customSuffixType| () 'common-lisp:string)
(common-lisp:deftype |dateType| () 'common-lisp:string)
(common-lisp:deftype |deleteConflictMessage| () 'common-lisp:string)
(common-lisp:deftype |duplicateCertificateMessage| () 'common-lisp:string)
(common-lisp:deftype |duplicateSSHPublicKeyMessage| () 'common-lisp:string)
(common-lisp:deftype |encodingType| () 'common-lisp:string)
(common-lisp:deftype |entityAlreadyExistsMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |entityListType| ()
   '(trivial-types:proper-list entity-type))
 (common-lisp:defun |make-entitylisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list entity-type))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |entityTemporarilyUnmodifiableMessage| ()
  'common-lisp:string)
(common-lisp:deftype |existingUserNameType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |groupDetailListType| ()
   '(trivial-types:proper-list group-detail))
 (common-lisp:defun |make-groupdetaillisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |groupListType| () '(trivial-types:proper-list group))
 (common-lisp:defun |make-grouplisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list group))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |groupNameListType| ()
   '(trivial-types:proper-list |groupNameType|))
 (common-lisp:defun |make-groupnamelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |groupNameType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |groupNameType| () 'common-lisp:string)
(common-lisp:deftype |idType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |instanceProfileListType| ()
   '(trivial-types:proper-list instance-profile))
 (common-lisp:defun |make-instanceprofilelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list instance-profile))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |instanceProfileNameType| () 'common-lisp:string)
(common-lisp:deftype |invalidAuthenticationCodeMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidCertificateMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidInputMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidPublicKeyMessage| () 'common-lisp:string)
(common-lisp:deftype |invalidUserTypeMessage| () 'common-lisp:string)
(common-lisp:deftype |keyPairMismatchMessage| () 'common-lisp:string)
(common-lisp:deftype |limitExceededMessage| () 'common-lisp:string)
(common-lisp:deftype |malformedCertificateMessage| () 'common-lisp:string)
(common-lisp:deftype |malformedPolicyDocumentMessage| () 'common-lisp:string)
(common-lisp:deftype |markerType| () 'common-lisp:string)
(common-lisp:deftype |maxItemsType| () 'common-lisp:integer)
(common-lisp:deftype |maxPasswordAgeType| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |mfaDeviceListType| ()
   '(trivial-types:proper-list mfadevice))
 (common-lisp:defun |make-mfadevicelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mfadevice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |minimumPasswordLengthType| () 'common-lisp:integer)
(common-lisp:deftype |noSuchEntityMessage| () 'common-lisp:string)
(common-lisp:deftype |passwordPolicyViolationMessage| () 'common-lisp:string)
(common-lisp:deftype |passwordReusePreventionType| () 'common-lisp:integer)
(common-lisp:deftype |passwordType| () 'common-lisp:string)
(common-lisp:deftype |pathPrefixType| () 'common-lisp:string)
(common-lisp:deftype |pathType| () 'common-lisp:string)
(common-lisp:deftype |policyDescriptionType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyDetailListType| ()
   '(trivial-types:proper-list policy-detail))
 (common-lisp:defun |make-policydetaillisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |policyDocumentType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyDocumentVersionListType| ()
   '(trivial-types:proper-list policy-version))
 (common-lisp:defun |make-policydocumentversionlisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |policyEvaluationErrorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |policyListType| () '(trivial-types:proper-list policy))
 (common-lisp:defun |make-policylisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |policyNameListType| ()
   '(trivial-types:proper-list |policyNameType|))
 (common-lisp:defun |make-policynamelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |policyNameType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |policyNameType| () 'common-lisp:string)
(common-lisp:deftype |policyPathType| () 'common-lisp:string)
(common-lisp:deftype |policyScopeType| () 'common-lisp:string)
(common-lisp:deftype |policyVersionIdType| () 'common-lisp:string)
(common-lisp:deftype |privateKeyType| () 'common-lisp:string)
(common-lisp:deftype |publicKeyFingerprintType| () 'common-lisp:string)
(common-lisp:deftype |publicKeyIdType| () 'common-lisp:string)
(common-lisp:deftype |publicKeyMaterialType| () 'common-lisp:string)
(common-lisp:deftype |roleDescriptionType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |roleDetailListType| ()
   '(trivial-types:proper-list role-detail))
 (common-lisp:defun |make-roledetaillisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |roleListType| () '(trivial-types:proper-list role))
 (common-lisp:defun |make-rolelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list role))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |roleNameType| () 'common-lisp:string)
(common-lisp:deftype |serialNumberType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |serverCertificateMetadataListType| ()
   '(trivial-types:proper-list server-certificate-metadata))
 (common-lisp:defun |make-servercertificatemetadatalisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            server-certificate-metadata))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |serverCertificateNameType| () 'common-lisp:string)
(common-lisp:deftype |serviceFailureExceptionMessage| () 'common-lisp:string)
(common-lisp:deftype |serviceName| () 'common-lisp:string)
(common-lisp:deftype |serviceNotSupportedMessage| () 'common-lisp:string)
(common-lisp:deftype |servicePassword| () 'common-lisp:string)
(common-lisp:deftype |serviceSpecificCredentialId| () 'common-lisp:string)
(common-lisp:deftype |serviceUserName| () 'common-lisp:string)
(common-lisp:deftype |statusType| () 'common-lisp:string)
(common-lisp:deftype |stringType| () 'common-lisp:string)
(common-lisp:deftype |summaryKeyType| () 'common-lisp:string)
(common-lisp:defstruct
    (|summaryMapType|
     (:constructor |make-summarymaptype|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:deftype |summaryValueType| () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:deftype |thumbprintListType| ()
   '(trivial-types:proper-list |thumbprintType|))
 (common-lisp:defun |make-thumbprintlisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |thumbprintType|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |thumbprintType| () 'common-lisp:string)
(common-lisp:deftype |unmodifiableEntityMessage| () 'common-lisp:string)
(common-lisp:deftype |unrecognizedPublicKeyEncodingMessage| ()
  'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |userDetailListType| ()
   '(trivial-types:proper-list user-detail))
 (common-lisp:defun |make-userdetaillisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-detail))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype |userListType| () '(trivial-types:proper-list user))
 (common-lisp:defun |make-userlisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |userNameType| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |virtualMFADeviceListType| ()
   '(trivial-types:proper-list virtual-mfadevice))
 (common-lisp:defun |make-virtualmfadevicelisttype|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-mfadevice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |virtualMFADeviceName| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun add-client-idto-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn client-id)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-client-idto-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"AddClientIDToOpenIDConnectProvider")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-client-idto-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun add-role-to-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name role-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-add-role-to-instance-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AddRoleToInstanceProfile")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-role-to-instance-profile))
(common-lisp:progn
 (common-lisp:defun add-user-to-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-name)
   (common-lisp:declare (common-lisp:ignorable group-name user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-user-to-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AddUserToGroup")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-user-to-group))
(common-lisp:progn
 (common-lisp:defun attach-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable group-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AttachGroupPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-group-policy))
(common-lisp:progn
 (common-lisp:defun attach-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable role-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AttachRolePolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-role-policy))
(common-lisp:progn
 (common-lisp:defun attach-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable user-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AttachUserPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-user-policy))
(common-lisp:progn
 (common-lisp:defun change-password
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key old-password new-password)
   (common-lisp:declare (common-lisp:ignorable old-password new-password))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-change-password-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ChangePassword")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'change-password))
(common-lisp:progn
 (common-lisp:defun create-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateAccessKey")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateAccessKeyResponse" "CreateAccessKeyResult")))
 (common-lisp:export 'create-access-key))
(common-lisp:progn
 (common-lisp:defun create-account-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-alias)
   (common-lisp:declare (common-lisp:ignorable account-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-account-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateAccountAlias")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-account-alias))
(common-lisp:progn
 (common-lisp:defun create-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path group-name)
   (common-lisp:declare (common-lisp:ignorable path group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateGroup")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateGroupResponse" "CreateGroupResult")))
 (common-lisp:export 'create-group))
(common-lisp:progn
 (common-lisp:defun create-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name path)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateInstanceProfile")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateInstanceProfileResponse" "CreateInstanceProfileResult")))
 (common-lisp:export 'create-instance-profile))
(common-lisp:progn
 (common-lisp:defun create-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name password
                     password-reset-required)
   (common-lisp:declare
    (common-lisp:ignorable user-name password password-reset-required))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateLoginProfile")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateLoginProfileResponse" "CreateLoginProfileResult")))
 (common-lisp:export 'create-login-profile))
(common-lisp:progn
 (common-lisp:defun create-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key url client-idlist thumbprint-list)
   (common-lisp:declare
    (common-lisp:ignorable url client-idlist thumbprint-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateOpenIDConnectProvider")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateOpenIDConnectProviderResponse"
      "CreateOpenIDConnectProviderResult")))
 (common-lisp:export 'create-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun create-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name path policy-document
                     description)
   (common-lisp:declare
    (common-lisp:ignorable policy-name path policy-document description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreatePolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreatePolicyResponse" "CreatePolicyResult")))
 (common-lisp:export 'create-policy))
(common-lisp:progn
 (common-lisp:defun create-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn policy-document
                     set-as-default)
   (common-lisp:declare
    (common-lisp:ignorable policy-arn policy-document set-as-default))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreatePolicyVersion")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreatePolicyVersionResponse" "CreatePolicyVersionResult")))
 (common-lisp:export 'create-policy-version))
(common-lisp:progn
 (common-lisp:defun create-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path role-name
                     assume-role-policy-document description)
   (common-lisp:declare
    (common-lisp:ignorable path role-name assume-role-policy-document
     description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateRole")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateRoleResponse" "CreateRoleResult")))
 (common-lisp:export 'create-role))
(common-lisp:progn
 (common-lisp:defun create-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlmetadata-document name)
   (common-lisp:declare (common-lisp:ignorable samlmetadata-document name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateSAMLProvider")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateSAMLProviderResponse" "CreateSAMLProviderResult")))
 (common-lisp:export 'create-samlprovider))
(common-lisp:progn
 (common-lisp:defun create-service-linked-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key awsservice-name description
                     custom-suffix)
   (common-lisp:declare
    (common-lisp:ignorable awsservice-name description custom-suffix))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-linked-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateServiceLinkedRole")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateServiceLinkedRoleResponse" "CreateServiceLinkedRoleResult")))
 (common-lisp:export 'create-service-linked-role))
(common-lisp:progn
 (common-lisp:defun create-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-name)
   (common-lisp:declare (common-lisp:ignorable user-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"CreateServiceSpecificCredential")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateServiceSpecificCredentialResponse"
      "CreateServiceSpecificCredentialResult")))
 (common-lisp:export 'create-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun create-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path user-name)
   (common-lisp:declare (common-lisp:ignorable path user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateUser")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateUserResponse" "CreateUserResult")))
 (common-lisp:export 'create-user))
(common-lisp:progn
 (common-lisp:defun create-virtual-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path virtual-mfadevice-name)
   (common-lisp:declare (common-lisp:ignorable path virtual-mfadevice-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-virtual-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateVirtualMFADevice")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateVirtualMFADeviceResponse" "CreateVirtualMFADeviceResult")))
 (common-lisp:export 'create-virtual-mfadevice))
(common-lisp:progn
 (common-lisp:defun deactivate-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name serial-number)
   (common-lisp:declare (common-lisp:ignorable user-name serial-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deactivate-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeactivateMFADevice")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'deactivate-mfadevice))
(common-lisp:progn
 (common-lisp:defun delete-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name access-key-id)
   (common-lisp:declare (common-lisp:ignorable user-name access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteAccessKey")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-access-key))
(common-lisp:progn
 (common-lisp:defun delete-account-alias
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key account-alias)
   (common-lisp:declare (common-lisp:ignorable account-alias))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-account-alias-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteAccountAlias")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-account-alias))
(common-lisp:progn
 (common-lisp:defun delete-account-password-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                             :method :post :params
                             (common-lisp:cons "Action"
                                               "DeleteAccountPasswordPolicy"))
    common-lisp:nil common-lisp:nil))
 (common-lisp:export 'delete-account-password-policy))
(common-lisp:progn
 (common-lisp:defun delete-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name)
   (common-lisp:declare (common-lisp:ignorable group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteGroup")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-group))
(common-lisp:progn
 (common-lisp:defun delete-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-name)
   (common-lisp:declare (common-lisp:ignorable group-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteGroupPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-group-policy))
(common-lisp:progn
 (common-lisp:defun delete-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteInstanceProfile")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-instance-profile))
(common-lisp:progn
 (common-lisp:defun delete-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteLoginProfile")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-login-profile))
(common-lisp:progn
 (common-lisp:defun delete-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn)
   (common-lisp:declare (common-lisp:ignorable open-idconnect-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteOpenIDConnectProvider")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn)
   (common-lisp:declare (common-lisp:ignorable policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeletePolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn version-id)
   (common-lisp:declare (common-lisp:ignorable policy-arn version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeletePolicyVersion")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-policy-version))
(common-lisp:progn
 (common-lisp:defun delete-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteRole")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-role))
(common-lisp:progn
 (common-lisp:defun delete-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-name)
   (common-lisp:declare (common-lisp:ignorable role-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteRolePolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-role-policy))
(common-lisp:progn
 (common-lisp:defun delete-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteSAMLProvider")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-samlprovider))
(common-lisp:progn
 (common-lisp:defun delete-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-id)
   (common-lisp:declare (common-lisp:ignorable user-name sshpublic-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteSSHPublicKey")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun delete-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name)
   (common-lisp:declare (common-lisp:ignorable server-certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-server-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteServerCertificate")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-server-certificate))
(common-lisp:progn
 (common-lisp:defun delete-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-specific-credential-id)
   (common-lisp:declare
    (common-lisp:ignorable user-name service-specific-credential-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"DeleteServiceSpecificCredential")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun delete-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name certificate-id)
   (common-lisp:declare (common-lisp:ignorable user-name certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-signing-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteSigningCertificate")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-signing-certificate))
(common-lisp:progn
 (common-lisp:defun delete-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteUser")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-user))
(common-lisp:progn
 (common-lisp:defun delete-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-name)
   (common-lisp:declare (common-lisp:ignorable user-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteUserPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-user-policy))
(common-lisp:progn
 (common-lisp:defun delete-virtual-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key serial-number)
   (common-lisp:declare (common-lisp:ignorable serial-number))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteVirtualMFADevice")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-virtual-mfadevice))
(common-lisp:progn
 (common-lisp:defun detach-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable group-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DetachGroupPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-group-policy))
(common-lisp:progn
 (common-lisp:defun detach-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable role-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DetachRolePolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-role-policy))
(common-lisp:progn
 (common-lisp:defun detach-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-arn)
   (common-lisp:declare (common-lisp:ignorable user-name policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DetachUserPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-user-policy))
(common-lisp:progn
 (common-lisp:defun enable-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name serial-number
                     authentication-code1 authentication-code2)
   (common-lisp:declare
    (common-lisp:ignorable user-name serial-number authentication-code1
     authentication-code2))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"EnableMFADevice")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-mfadevice))
(common-lisp:progn
 (common-lisp:defun generate-credential-report ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                             :method :post :params
                             (common-lisp:cons "Action"
                                               "GenerateCredentialReport"))
    "GenerateCredentialReportResponse" "GenerateCredentialReportResult"))
 (common-lisp:export 'generate-credential-report))
(common-lisp:progn
 (common-lisp:defun get-access-key-last-used
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key access-key-id)
   (common-lisp:declare (common-lisp:ignorable access-key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-access-key-last-used-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetAccessKeyLastUsed")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetAccessKeyLastUsedResponse" "GetAccessKeyLastUsedResult")))
 (common-lisp:export 'get-access-key-last-used))
(common-lisp:progn
 (common-lisp:defun get-account-authorization-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key filter max-items marker)
   (common-lisp:declare (common-lisp:ignorable filter max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-account-authorization-details-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetAccountAuthorizationDetails")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetAccountAuthorizationDetailsResponse"
      "GetAccountAuthorizationDetailsResult")))
 (common-lisp:export 'get-account-authorization-details))
(common-lisp:progn
 (common-lisp:defun get-account-password-policy ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                             :method :post :params
                             (common-lisp:cons "Action"
                                               "GetAccountPasswordPolicy"))
    "GetAccountPasswordPolicyResponse" "GetAccountPasswordPolicyResult"))
 (common-lisp:export 'get-account-password-policy))
(common-lisp:progn
 (common-lisp:defun get-account-summary ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                             :method :post :params
                             (common-lisp:cons "Action" "GetAccountSummary"))
    "GetAccountSummaryResponse" "GetAccountSummaryResult"))
 (common-lisp:export 'get-account-summary))
(common-lisp:progn
 (common-lisp:defun get-context-keys-for-custom-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-input-list)
   (common-lisp:declare (common-lisp:ignorable policy-input-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-context-keys-for-custom-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetContextKeysForCustomPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetContextKeysForPolicyResponse"
      "GetContextKeysForCustomPolicyResult")))
 (common-lisp:export 'get-context-keys-for-custom-policy))
(common-lisp:progn
 (common-lisp:defun get-context-keys-for-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-source-arn policy-input-list)
   (common-lisp:declare
    (common-lisp:ignorable policy-source-arn policy-input-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-context-keys-for-principal-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"GetContextKeysForPrincipalPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetContextKeysForPolicyResponse"
      "GetContextKeysForPrincipalPolicyResult")))
 (common-lisp:export 'get-context-keys-for-principal-policy))
(common-lisp:progn
 (common-lisp:defun get-credential-report ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                             :method :post :params
                             (common-lisp:cons "Action" "GetCredentialReport"))
    "GetCredentialReportResponse" "GetCredentialReportResult"))
 (common-lisp:export 'get-credential-report))
(common-lisp:progn
 (common-lisp:defun get-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable group-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetGroup")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetGroupResponse" "GetGroupResult")))
 (common-lisp:export 'get-group))
(common-lisp:progn
 (common-lisp:defun get-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-name)
   (common-lisp:declare (common-lisp:ignorable group-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetGroupPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetGroupPolicyResponse" "GetGroupPolicyResult")))
 (common-lisp:export 'get-group-policy))
(common-lisp:progn
 (common-lisp:defun get-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name)
   (common-lisp:declare (common-lisp:ignorable instance-profile-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-instance-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetInstanceProfile")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetInstanceProfileResponse" "GetInstanceProfileResult")))
 (common-lisp:export 'get-instance-profile))
(common-lisp:progn
 (common-lisp:defun get-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetLoginProfile")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetLoginProfileResponse" "GetLoginProfileResult")))
 (common-lisp:export 'get-login-profile))
(common-lisp:progn
 (common-lisp:defun get-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn)
   (common-lisp:declare (common-lisp:ignorable open-idconnect-provider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetOpenIDConnectProvider")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetOpenIDConnectProviderResponse" "GetOpenIDConnectProviderResult")))
 (common-lisp:export 'get-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn)
   (common-lisp:declare (common-lisp:ignorable policy-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPolicyResponse" "GetPolicyResult")))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn version-id)
   (common-lisp:declare (common-lisp:ignorable policy-arn version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetPolicyVersion")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPolicyVersionResponse" "GetPolicyVersionResult")))
 (common-lisp:export 'get-policy-version))
(common-lisp:progn
 (common-lisp:defun get-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name)
   (common-lisp:declare (common-lisp:ignorable role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-role-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetRole")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetRoleResponse" "GetRoleResult")))
 (common-lisp:export 'get-role))
(common-lisp:progn
 (common-lisp:defun get-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-name)
   (common-lisp:declare (common-lisp:ignorable role-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetRolePolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetRolePolicyResponse" "GetRolePolicyResult")))
 (common-lisp:export 'get-role-policy))
(common-lisp:progn
 (common-lisp:defun get-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlprovider-arn)
   (common-lisp:declare (common-lisp:ignorable samlprovider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetSAMLProvider")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetSAMLProviderResponse" "GetSAMLProviderResult")))
 (common-lisp:export 'get-samlprovider))
(common-lisp:progn
 (common-lisp:defun get-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-id encoding)
   (common-lisp:declare
    (common-lisp:ignorable user-name sshpublic-key-id encoding))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetSSHPublicKey")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetSSHPublicKeyResponse" "GetSSHPublicKeyResult")))
 (common-lisp:export 'get-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun get-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name)
   (common-lisp:declare (common-lisp:ignorable server-certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-server-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetServerCertificate")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetServerCertificateResponse" "GetServerCertificateResult")))
 (common-lisp:export 'get-server-certificate))
(common-lisp:progn
 (common-lisp:defun get-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name)
   (common-lisp:declare (common-lisp:ignorable user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetUser")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetUserResponse" "GetUserResult")))
 (common-lisp:export 'get-user))
(common-lisp:progn
 (common-lisp:defun get-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-name)
   (common-lisp:declare (common-lisp:ignorable user-name policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetUserPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetUserPolicyResponse" "GetUserPolicyResult")))
 (common-lisp:export 'get-user-policy))
(common-lisp:progn
 (common-lisp:defun list-access-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-access-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListAccessKeys")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListAccessKeysResponse" "ListAccessKeysResult")))
 (common-lisp:export 'list-access-keys))
(common-lisp:progn
 (common-lisp:defun list-account-aliases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker max-items)
   (common-lisp:declare (common-lisp:ignorable marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-account-aliases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListAccountAliases")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListAccountAliasesResponse" "ListAccountAliasesResult")))
 (common-lisp:export 'list-account-aliases))
(common-lisp:progn
 (common-lisp:defun list-attached-group-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name path-prefix marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable group-name path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-attached-group-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListAttachedGroupPolicies")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListAttachedGroupPoliciesResponse" "ListAttachedGroupPoliciesResult")))
 (common-lisp:export 'list-attached-group-policies))
(common-lisp:progn
 (common-lisp:defun list-attached-role-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name path-prefix marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable role-name path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-attached-role-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListAttachedRolePolicies")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListAttachedRolePoliciesResponse" "ListAttachedRolePoliciesResult")))
 (common-lisp:export 'list-attached-role-policies))
(common-lisp:progn
 (common-lisp:defun list-attached-user-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name path-prefix marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable user-name path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-attached-user-policies-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListAttachedUserPolicies")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListAttachedUserPoliciesResponse" "ListAttachedUserPoliciesResult")))
 (common-lisp:export 'list-attached-user-policies))
(common-lisp:progn
 (common-lisp:defun list-entities-for-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn entity-filter path-prefix
                     marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable policy-arn entity-filter path-prefix marker
     max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-entities-for-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListEntitiesForPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListEntitiesForPolicyResponse" "ListEntitiesForPolicyResult")))
 (common-lisp:export 'list-entities-for-policy))
(common-lisp:progn
 (common-lisp:defun list-group-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable group-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-group-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListGroupPolicies")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListGroupPoliciesResponse" "ListGroupPoliciesResult")))
 (common-lisp:export 'list-group-policies))
(common-lisp:progn
 (common-lisp:defun list-groups
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListGroups")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListGroupsResponse" "ListGroupsResult")))
 (common-lisp:export 'list-groups))
(common-lisp:progn
 (common-lisp:defun list-groups-for-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-groups-for-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListGroupsForUser")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListGroupsForUserResponse" "ListGroupsForUserResult")))
 (common-lisp:export 'list-groups-for-user))
(common-lisp:progn
 (common-lisp:defun list-instance-profiles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-instance-profiles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListInstanceProfiles")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListInstanceProfilesResponse" "ListInstanceProfilesResult")))
 (common-lisp:export 'list-instance-profiles))
(common-lisp:progn
 (common-lisp:defun list-instance-profiles-for-role
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable role-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-instance-profiles-for-role-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListInstanceProfilesForRole")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListInstanceProfilesForRoleResponse"
      "ListInstanceProfilesForRoleResult")))
 (common-lisp:export 'list-instance-profiles-for-role))
(common-lisp:progn
 (common-lisp:defun list-mfadevices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-mfadevices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListMFADevices")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListMFADevicesResponse" "ListMFADevicesResult")))
 (common-lisp:export 'list-mfadevices))
(common-lisp:progn
 (common-lisp:defun list-open-idconnect-providers ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                             :method :post :params
                             (common-lisp:cons "Action"
                                               "ListOpenIDConnectProviders"))
    "ListOpenIDConnectProvidersResponse" "ListOpenIDConnectProvidersResult"))
 (common-lisp:export 'list-open-idconnect-providers))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key scope only-attached path-prefix marker
                     max-items)
   (common-lisp:declare
    (common-lisp:ignorable scope only-attached path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListPolicies")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPoliciesResponse" "ListPoliciesResult")))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn marker max-items)
   (common-lisp:declare (common-lisp:ignorable policy-arn marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListPolicyVersions")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPolicyVersionsResponse" "ListPolicyVersionsResult")))
 (common-lisp:export 'list-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-role-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable role-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-role-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListRolePolicies")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListRolePoliciesResponse" "ListRolePoliciesResult")))
 (common-lisp:export 'list-role-policies))
(common-lisp:progn
 (common-lisp:defun list-roles
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-roles-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListRoles")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListRolesResponse" "ListRolesResult")))
 (common-lisp:export 'list-roles))
(common-lisp:progn
 (common-lisp:defun list-samlproviders ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                             :method :post :params
                             (common-lisp:cons "Action" "ListSAMLProviders"))
    "ListSAMLProvidersResponse" "ListSAMLProvidersResult"))
 (common-lisp:export 'list-samlproviders))
(common-lisp:progn
 (common-lisp:defun list-sshpublic-keys
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-sshpublic-keys-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListSSHPublicKeys")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListSSHPublicKeysResponse" "ListSSHPublicKeysResult")))
 (common-lisp:export 'list-sshpublic-keys))
(common-lisp:progn
 (common-lisp:defun list-server-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-server-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListServerCertificates")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListServerCertificatesResponse" "ListServerCertificatesResult")))
 (common-lisp:export 'list-server-certificates))
(common-lisp:progn
 (common-lisp:defun list-service-specific-credentials
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-name)
   (common-lisp:declare (common-lisp:ignorable user-name service-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-service-specific-credentials-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListServiceSpecificCredentials")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListServiceSpecificCredentialsResponse"
      "ListServiceSpecificCredentialsResult")))
 (common-lisp:export 'list-service-specific-credentials))
(common-lisp:progn
 (common-lisp:defun list-signing-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-signing-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListSigningCertificates")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListSigningCertificatesResponse" "ListSigningCertificatesResult")))
 (common-lisp:export 'list-signing-certificates))
(common-lisp:progn
 (common-lisp:defun list-user-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name marker max-items)
   (common-lisp:declare (common-lisp:ignorable user-name marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-user-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListUserPolicies")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListUserPoliciesResponse" "ListUserPoliciesResult")))
 (common-lisp:export 'list-user-policies))
(common-lisp:progn
 (common-lisp:defun list-users
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path-prefix marker max-items)
   (common-lisp:declare (common-lisp:ignorable path-prefix marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-users-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListUsers")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListUsersResponse" "ListUsersResult")))
 (common-lisp:export 'list-users))
(common-lisp:progn
 (common-lisp:defun list-virtual-mfadevices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key assignment-status marker max-items)
   (common-lisp:declare
    (common-lisp:ignorable assignment-status marker max-items))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-virtual-mfadevices-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListVirtualMFADevices")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListVirtualMFADevicesResponse" "ListVirtualMFADevicesResult")))
 (common-lisp:export 'list-virtual-mfadevices))
(common-lisp:progn
 (common-lisp:defun put-group-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name policy-name policy-document)
   (common-lisp:declare
    (common-lisp:ignorable group-name policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-group-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutGroupPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'put-group-policy))
(common-lisp:progn
 (common-lisp:defun put-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-name policy-document)
   (common-lisp:declare
    (common-lisp:ignorable role-name policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-role-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutRolePolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'put-role-policy))
(common-lisp:progn
 (common-lisp:defun put-user-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name policy-name policy-document)
   (common-lisp:declare
    (common-lisp:ignorable user-name policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-user-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutUserPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'put-user-policy))
(common-lisp:progn
 (common-lisp:defun remove-client-idfrom-open-idconnect-provider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn client-id)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn client-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-client-idfrom-open-idconnect-provider-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"RemoveClientIDFromOpenIDConnectProvider")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'remove-client-idfrom-open-idconnect-provider))
(common-lisp:progn
 (common-lisp:defun remove-role-from-instance-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key instance-profile-name role-name)
   (common-lisp:declare
    (common-lisp:ignorable instance-profile-name role-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-remove-role-from-instance-profile-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"RemoveRoleFromInstanceProfile")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'remove-role-from-instance-profile))
(common-lisp:progn
 (common-lisp:defun remove-user-from-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name user-name)
   (common-lisp:declare (common-lisp:ignorable group-name user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-user-from-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"RemoveUserFromGroup")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'remove-user-from-group))
(common-lisp:progn
 (common-lisp:defun reset-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-specific-credential-id)
   (common-lisp:declare
    (common-lisp:ignorable user-name service-specific-credential-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reset-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ResetServiceSpecificCredential")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ResetServiceSpecificCredentialResponse"
      "ResetServiceSpecificCredentialResult")))
 (common-lisp:export 'reset-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun resync-mfadevice
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name serial-number
                     authentication-code1 authentication-code2)
   (common-lisp:declare
    (common-lisp:ignorable user-name serial-number authentication-code1
     authentication-code2))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-resync-mfadevice-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ResyncMFADevice")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'resync-mfadevice))
(common-lisp:progn
 (common-lisp:defun set-default-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-arn version-id)
   (common-lisp:declare (common-lisp:ignorable policy-arn version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-default-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SetDefaultPolicyVersion")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'set-default-policy-version))
(common-lisp:progn
 (common-lisp:defun simulate-custom-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-input-list action-names
                     resource-arns resource-policy resource-owner caller-arn
                     context-entries resource-handling-option max-items marker)
   (common-lisp:declare
    (common-lisp:ignorable policy-input-list action-names resource-arns
     resource-policy resource-owner caller-arn context-entries
     resource-handling-option max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-simulate-custom-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SimulateCustomPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "SimulatePolicyResponse" "SimulateCustomPolicyResult")))
 (common-lisp:export 'simulate-custom-policy))
(common-lisp:progn
 (common-lisp:defun simulate-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-source-arn policy-input-list
                     action-names resource-arns resource-policy resource-owner
                     caller-arn context-entries resource-handling-option
                     max-items marker)
   (common-lisp:declare
    (common-lisp:ignorable policy-source-arn policy-input-list action-names
     resource-arns resource-policy resource-owner caller-arn context-entries
     resource-handling-option max-items marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-simulate-principal-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SimulatePrincipalPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "SimulatePolicyResponse" "SimulatePrincipalPolicyResult")))
 (common-lisp:export 'simulate-principal-policy))
(common-lisp:progn
 (common-lisp:defun update-access-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name access-key-id status)
   (common-lisp:declare (common-lisp:ignorable user-name access-key-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-access-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateAccessKey")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-access-key))
(common-lisp:progn
 (common-lisp:defun update-account-password-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key minimum-password-length require-symbols
                     require-numbers require-uppercase-characters
                     require-lowercase-characters
                     allow-users-to-change-password max-password-age
                     password-reuse-prevention hard-expiry)
   (common-lisp:declare
    (common-lisp:ignorable minimum-password-length require-symbols
     require-numbers require-uppercase-characters require-lowercase-characters
     allow-users-to-change-password max-password-age password-reuse-prevention
     hard-expiry))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-account-password-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateAccountPasswordPolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-account-password-policy))
(common-lisp:progn
 (common-lisp:defun update-assume-role-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name policy-document)
   (common-lisp:declare (common-lisp:ignorable role-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-assume-role-policy-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateAssumeRolePolicy")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-assume-role-policy))
(common-lisp:progn
 (common-lisp:defun update-group
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key group-name new-path new-group-name)
   (common-lisp:declare
    (common-lisp:ignorable group-name new-path new-group-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-group-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateGroup")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-group))
(common-lisp:progn
 (common-lisp:defun update-login-profile
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name password
                     password-reset-required)
   (common-lisp:declare
    (common-lisp:ignorable user-name password password-reset-required))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-login-profile-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateLoginProfile")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-login-profile))
(common-lisp:progn
 (common-lisp:defun update-open-idconnect-provider-thumbprint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key open-idconnect-provider-arn
                     thumbprint-list)
   (common-lisp:declare
    (common-lisp:ignorable open-idconnect-provider-arn thumbprint-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-open-idconnect-provider-thumbprint-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"UpdateOpenIDConnectProviderThumbprint")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-open-idconnect-provider-thumbprint))
(common-lisp:progn
 (common-lisp:defun update-role-description
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key role-name description)
   (common-lisp:declare (common-lisp:ignorable role-name description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-role-description-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateRoleDescription")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateRoleDescriptionResponse" "UpdateRoleDescriptionResult")))
 (common-lisp:export 'update-role-description))
(common-lisp:progn
 (common-lisp:defun update-samlprovider
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key samlmetadata-document samlprovider-arn)
   (common-lisp:declare
    (common-lisp:ignorable samlmetadata-document samlprovider-arn))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-samlprovider-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateSAMLProvider")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateSAMLProviderResponse" "UpdateSAMLProviderResult")))
 (common-lisp:export 'update-samlprovider))
(common-lisp:progn
 (common-lisp:defun update-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-id status)
   (common-lisp:declare
    (common-lisp:ignorable user-name sshpublic-key-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateSSHPublicKey")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun update-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key server-certificate-name new-path
                     new-server-certificate-name)
   (common-lisp:declare
    (common-lisp:ignorable server-certificate-name new-path
     new-server-certificate-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-server-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateServerCertificate")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-server-certificate))
(common-lisp:progn
 (common-lisp:defun update-service-specific-credential
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name service-specific-credential-id
                     status)
   (common-lisp:declare
    (common-lisp:ignorable user-name service-specific-credential-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-service-specific-credential-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"UpdateServiceSpecificCredential")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-service-specific-credential))
(common-lisp:progn
 (common-lisp:defun update-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name certificate-id status)
   (common-lisp:declare
    (common-lisp:ignorable user-name certificate-id status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-signing-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateSigningCertificate")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-signing-certificate))
(common-lisp:progn
 (common-lisp:defun update-user
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name new-path new-user-name)
   (common-lisp:declare
    (common-lisp:ignorable user-name new-path new-user-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-user-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateUser")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-user))
(common-lisp:progn
 (common-lisp:defun upload-sshpublic-key
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name sshpublic-key-body)
   (common-lisp:declare (common-lisp:ignorable user-name sshpublic-key-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-upload-sshpublic-key-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UploadSSHPublicKey")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UploadSSHPublicKeyResponse" "UploadSSHPublicKeyResult")))
 (common-lisp:export 'upload-sshpublic-key))
(common-lisp:progn
 (common-lisp:defun upload-server-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key path server-certificate-name
                     certificate-body private-key certificate-chain)
   (common-lisp:declare
    (common-lisp:ignorable path server-certificate-name certificate-body
     private-key certificate-chain))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-upload-server-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UploadServerCertificate")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UploadServerCertificateResponse" "UploadServerCertificateResult")))
 (common-lisp:export 'upload-server-certificate))
(common-lisp:progn
 (common-lisp:defun upload-signing-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key user-name certificate-body)
   (common-lisp:declare (common-lisp:ignorable user-name certificate-body))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-upload-signing-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iam")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UploadSigningCertificate")
                                  ("Version" ,@"2010-05-08"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UploadSigningCertificateResponse" "UploadSigningCertificateResult")))
 (common-lisp:export 'upload-signing-certificate))