;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/directconnect
  (:use)
  (:nicknames #:aws/directconnect)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/directconnect)

(common-lisp:deftype asn () 'common-lisp:integer)
(common-lisp:deftype address-family () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-connection-on-interconnect-request (:copier common-lisp:nil))
   (bandwidth
    (common-lisp:error
     #A((22) common-lisp:base-char . ":bandwidth is required"))
    :type (common-lisp:or bandwidth common-lisp:null))
   (connection-name
    (common-lisp:error
     #A((27) common-lisp:base-char . ":connectionname is required"))
    :type (common-lisp:or connection-name common-lisp:null))
   (owner-account
    (common-lisp:error
     #A((25) common-lisp:base-char . ":owneraccount is required"))
    :type (common-lisp:or owner-account common-lisp:null))
   (interconnect-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":interconnectid is required"))
    :type (common-lisp:or interconnect-id common-lisp:null))
   (vlan
    (common-lisp:error #A((17) common-lisp:base-char . ":vlan is required"))
    :type (common-lisp:or vlan common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-connection-on-interconnect-request
                    'make-allocate-connection-on-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          allocate-connection-on-interconnect-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "bandwidth"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bandwidth)))
    (aws-sdk/generator/shape::to-query-params "connectionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-name)))
    (aws-sdk/generator/shape::to-query-params "ownerAccount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-account)))
    (aws-sdk/generator/shape::to-query-params "interconnectId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-id)))
    (aws-sdk/generator/shape::to-query-params "vlan"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vlan))))))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-hosted-connection-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (owner-account
    (common-lisp:error
     #A((25) common-lisp:base-char . ":owneraccount is required"))
    :type (common-lisp:or owner-account common-lisp:null))
   (bandwidth
    (common-lisp:error
     #A((22) common-lisp:base-char . ":bandwidth is required"))
    :type (common-lisp:or bandwidth common-lisp:null))
   (connection-name
    (common-lisp:error
     #A((27) common-lisp:base-char . ":connectionname is required"))
    :type (common-lisp:or connection-name common-lisp:null))
   (vlan
    (common-lisp:error #A((17) common-lisp:base-char . ":vlan is required"))
    :type (common-lisp:or vlan common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-hosted-connection-request
                    'make-allocate-hosted-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          allocate-hosted-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "ownerAccount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-account)))
    (aws-sdk/generator/shape::to-query-params "bandwidth"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bandwidth)))
    (aws-sdk/generator/shape::to-query-params "connectionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-name)))
    (aws-sdk/generator/shape::to-query-params "vlan"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vlan))))))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-private-virtual-interface-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (owner-account
    (common-lisp:error
     #A((25) common-lisp:base-char . ":owneraccount is required"))
    :type (common-lisp:or owner-account common-lisp:null))
   (new-private-virtual-interface-allocation
    (common-lisp:error
     #A((49) common-lisp:base-char
        . ":newprivatevirtualinterfaceallocation is required"))
    :type
    (common-lisp:or new-private-virtual-interface-allocation
                    common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-private-virtual-interface-request
                    'make-allocate-private-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          allocate-private-virtual-interface-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "ownerAccount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-account)))
    (aws-sdk/generator/shape::to-query-params
     "newPrivateVirtualInterfaceAllocation"
     (aws-sdk/generator/shape:shape-to-params
      (common-lisp:slot-value aws-sdk/generator/shape::shape
                              'new-private-virtual-interface-allocation))))))
(common-lisp:progn
 (common-lisp:defstruct
     (allocate-public-virtual-interface-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (owner-account
    (common-lisp:error
     #A((25) common-lisp:base-char . ":owneraccount is required"))
    :type (common-lisp:or owner-account common-lisp:null))
   (new-public-virtual-interface-allocation
    (common-lisp:error
     #A((48) common-lisp:base-char
        . ":newpublicvirtualinterfaceallocation is required"))
    :type
    (common-lisp:or new-public-virtual-interface-allocation common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'allocate-public-virtual-interface-request
                    'make-allocate-public-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          allocate-public-virtual-interface-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "ownerAccount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-account)))
    (aws-sdk/generator/shape::to-query-params
     "newPublicVirtualInterfaceAllocation"
     (aws-sdk/generator/shape:shape-to-params
      (common-lisp:slot-value aws-sdk/generator/shape::shape
                              'new-public-virtual-interface-allocation))))))
(common-lisp:deftype amazon-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (associate-connection-with-lag-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (lag-id
    (common-lisp:error #A((18) common-lisp:base-char . ":lagid is required"))
    :type (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-connection-with-lag-request
                    'make-associate-connection-with-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          associate-connection-with-lag-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-hosted-connection-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (parent-connection-id
    (common-lisp:error
     #A((31) common-lisp:base-char . ":parentconnectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-hosted-connection-request
                    'make-associate-hosted-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          associate-hosted-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "parentConnectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parent-connection-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (associate-virtual-interface-request (:copier common-lisp:nil))
   (virtual-interface-id
    (common-lisp:error
     #A((31) common-lisp:base-char . ":virtualinterfaceid is required"))
    :type (common-lisp:or virtual-interface-id common-lisp:null))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'associate-virtual-interface-request
                    'make-associate-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          associate-virtual-interface-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-id)))
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id))))))
(common-lisp:deftype aws-device () 'common-lisp:string)
(common-lisp:deftype bgpauth-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (bgppeer (:copier common-lisp:nil))
   (asn common-lisp:nil :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (bgp-peer-state common-lisp:nil :type
    (common-lisp:or bgppeer-state common-lisp:null))
   (bgp-status common-lisp:nil :type
    (common-lisp:or bgpstatus common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bgppeer 'make-bgppeer))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape bgppeer))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "asn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'asn)))
    (aws-sdk/generator/shape::to-query-params "authKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'auth-key)))
    (aws-sdk/generator/shape::to-query-params "addressFamily"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'address-family)))
    (aws-sdk/generator/shape::to-query-params "amazonAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'amazon-address)))
    (aws-sdk/generator/shape::to-query-params "customerAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'customer-address)))
    (aws-sdk/generator/shape::to-query-params "bgpPeerState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bgp-peer-state)))
    (aws-sdk/generator/shape::to-query-params "bgpStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bgp-status))))))
(common-lisp:progn
 (common-lisp:deftype bgppeer-list () '(trivial-types:proper-list bgppeer))
 (common-lisp:defun |make-bgppeer-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list bgppeer))
   aws-sdk/generator/shape::members))
(common-lisp:deftype bgppeer-state () 'common-lisp:string)
(common-lisp:deftype bgpstatus () 'common-lisp:string)
(common-lisp:deftype bandwidth () 'common-lisp:string)
(common-lisp:deftype boolean-flag () 'common-lisp:boolean)
(common-lisp:deftype cidr () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (confirm-connection-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-connection-request
                    'make-confirm-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          confirm-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id))))))
(common-lisp:progn
 (common-lisp:defstruct (confirm-connection-response (:copier common-lisp:nil))
   (connection-state common-lisp:nil :type
    (common-lisp:or connection-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-connection-response
                    'make-confirm-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          confirm-connection-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-state))))))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-private-virtual-interface-request (:copier common-lisp:nil))
   (virtual-interface-id
    (common-lisp:error
     #A((31) common-lisp:base-char . ":virtualinterfaceid is required"))
    :type (common-lisp:or virtual-interface-id common-lisp:null))
   (virtual-gateway-id
    (common-lisp:error
     #A((29) common-lisp:base-char . ":virtualgatewayid is required"))
    :type (common-lisp:or virtual-gateway-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-private-virtual-interface-request
                    'make-confirm-private-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          confirm-private-virtual-interface-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-id)))
    (aws-sdk/generator/shape::to-query-params "virtualGatewayId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-gateway-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-private-virtual-interface-response (:copier common-lisp:nil))
   (virtual-interface-state common-lisp:nil :type
    (common-lisp:or virtual-interface-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-private-virtual-interface-response
                    'make-confirm-private-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          confirm-private-virtual-interface-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-state))))))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-public-virtual-interface-request (:copier common-lisp:nil))
   (virtual-interface-id
    (common-lisp:error
     #A((31) common-lisp:base-char . ":virtualinterfaceid is required"))
    :type (common-lisp:or virtual-interface-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-public-virtual-interface-request
                    'make-confirm-public-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          confirm-public-virtual-interface-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (confirm-public-virtual-interface-response (:copier common-lisp:nil))
   (virtual-interface-state common-lisp:nil :type
    (common-lisp:or virtual-interface-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'confirm-public-virtual-interface-response
                    'make-confirm-public-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          confirm-public-virtual-interface-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-state))))))
(common-lisp:progn
 (common-lisp:defstruct (connection (:copier common-lisp:nil))
   (owner-account common-lisp:nil :type
    (common-lisp:or owner-account common-lisp:null))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (connection-state common-lisp:nil :type
    (common-lisp:or connection-state common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (bandwidth common-lisp:nil :type
    (common-lisp:or bandwidth common-lisp:null))
   (vlan common-lisp:nil :type (common-lisp:or vlan common-lisp:null))
   (partner-name common-lisp:nil :type
    (common-lisp:or partner-name common-lisp:null))
   (loa-issue-time common-lisp:nil :type
    (common-lisp:or loa-issue-time common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null))
   (aws-device common-lisp:nil :type
    (common-lisp:or aws-device common-lisp:null)))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape connection))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ownerAccount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-account)))
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "connectionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-name)))
    (aws-sdk/generator/shape::to-query-params "connectionState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-state)))
    (aws-sdk/generator/shape::to-query-params "region"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'region)))
    (aws-sdk/generator/shape::to-query-params "location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location)))
    (aws-sdk/generator/shape::to-query-params "bandwidth"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bandwidth)))
    (aws-sdk/generator/shape::to-query-params "vlan"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vlan)))
    (aws-sdk/generator/shape::to-query-params "partnerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partner-name)))
    (aws-sdk/generator/shape::to-query-params "loaIssueTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'loa-issue-time)))
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id)))
    (aws-sdk/generator/shape::to-query-params "awsDevice"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'aws-device))))))
(common-lisp:deftype connection-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun |make-connection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:deftype connection-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (connections (:copier common-lisp:nil))
   (connections common-lisp:nil :type
    (common-lisp:or connection-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'connections 'make-connections))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape connections))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connections"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connections))))))
(common-lisp:deftype count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (create-bgppeer-request (:copier common-lisp:nil))
   (virtual-interface-id common-lisp:nil :type
    (common-lisp:or virtual-interface-id common-lisp:null))
   (new-bgppeer common-lisp:nil :type
    (common-lisp:or new-bgppeer common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bgppeer-request 'make-create-bgppeer-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-bgppeer-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-id)))
    (aws-sdk/generator/shape::to-query-params "newBGPPeer"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-bgppeer))))))
(common-lisp:progn
 (common-lisp:defstruct (create-bgppeer-response (:copier common-lisp:nil))
   (virtual-interface common-lisp:nil :type
    (common-lisp:or virtual-interface common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-bgppeer-response 'make-create-bgppeer-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-bgppeer-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterface"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface))))))
(common-lisp:progn
 (common-lisp:defstruct (create-connection-request (:copier common-lisp:nil))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or location-code common-lisp:null))
   (bandwidth
    (common-lisp:error
     #A((22) common-lisp:base-char . ":bandwidth is required"))
    :type (common-lisp:or bandwidth common-lisp:null))
   (connection-name
    (common-lisp:error
     #A((27) common-lisp:base-char . ":connectionname is required"))
    :type (common-lisp:or connection-name common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location)))
    (aws-sdk/generator/shape::to-query-params "bandwidth"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bandwidth)))
    (aws-sdk/generator/shape::to-query-params "connectionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-name)))
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id))))))
(common-lisp:progn
 (common-lisp:defstruct (create-interconnect-request (:copier common-lisp:nil))
   (interconnect-name
    (common-lisp:error
     #A((29) common-lisp:base-char . ":interconnectname is required"))
    :type (common-lisp:or interconnect-name common-lisp:null))
   (bandwidth
    (common-lisp:error
     #A((22) common-lisp:base-char . ":bandwidth is required"))
    :type (common-lisp:or bandwidth common-lisp:null))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or location-code common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-interconnect-request
                    'make-create-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-interconnect-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "interconnectName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-name)))
    (aws-sdk/generator/shape::to-query-params "bandwidth"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bandwidth)))
    (aws-sdk/generator/shape::to-query-params "location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location)))
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id))))))
(common-lisp:progn
 (common-lisp:defstruct (create-lag-request (:copier common-lisp:nil))
   (number-of-connections
    (common-lisp:error
     #A((32) common-lisp:base-char . ":numberofconnections is required"))
    :type (common-lisp:or count common-lisp:null))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or location-code common-lisp:null))
   (connections-bandwidth
    (common-lisp:error
     #A((33) common-lisp:base-char . ":connectionsbandwidth is required"))
    :type (common-lisp:or bandwidth common-lisp:null))
   (lag-name
    (common-lisp:error #A((20) common-lisp:base-char . ":lagname is required"))
    :type (common-lisp:or lag-name common-lisp:null))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-lag-request 'make-create-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-lag-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "numberOfConnections"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'number-of-connections)))
    (aws-sdk/generator/shape::to-query-params "location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location)))
    (aws-sdk/generator/shape::to-query-params "connectionsBandwidth"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connections-bandwidth)))
    (aws-sdk/generator/shape::to-query-params "lagName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-name)))
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-private-virtual-interface-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (new-private-virtual-interface
    (common-lisp:error
     #A((39) common-lisp:base-char
        . ":newprivatevirtualinterface is required"))
    :type (common-lisp:or new-private-virtual-interface common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-private-virtual-interface-request
                    'make-create-private-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-private-virtual-interface-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "newPrivateVirtualInterface"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-private-virtual-interface))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-public-virtual-interface-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (new-public-virtual-interface
    (common-lisp:error
     #A((38) common-lisp:base-char . ":newpublicvirtualinterface is required"))
    :type (common-lisp:or new-public-virtual-interface common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-public-virtual-interface-request
                    'make-create-public-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-public-virtual-interface-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "newPublicVirtualInterface"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-public-virtual-interface))))))
(common-lisp:deftype customer-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (delete-bgppeer-request (:copier common-lisp:nil))
   (virtual-interface-id common-lisp:nil :type
    (common-lisp:or virtual-interface-id common-lisp:null))
   (asn common-lisp:nil :type (common-lisp:or asn common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bgppeer-request 'make-delete-bgppeer-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-bgppeer-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-id)))
    (aws-sdk/generator/shape::to-query-params "asn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'asn)))
    (aws-sdk/generator/shape::to-query-params "customerAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'customer-address))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-bgppeer-response (:copier common-lisp:nil))
   (virtual-interface common-lisp:nil :type
    (common-lisp:or virtual-interface common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-bgppeer-response 'make-delete-bgppeer-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-bgppeer-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterface"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-connection-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-interconnect-request (:copier common-lisp:nil))
   (interconnect-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":interconnectid is required"))
    :type (common-lisp:or interconnect-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-interconnect-request
                    'make-delete-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-interconnect-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "interconnectId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-interconnect-response (:copier common-lisp:nil))
   (interconnect-state common-lisp:nil :type
    (common-lisp:or interconnect-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-interconnect-response
                    'make-delete-interconnect-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-interconnect-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "interconnectState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-state))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-lag-request (:copier common-lisp:nil))
   (lag-id
    (common-lisp:error #A((18) common-lisp:base-char . ":lagid is required"))
    :type (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lag-request 'make-delete-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-lag-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-interface-request (:copier common-lisp:nil))
   (virtual-interface-id
    (common-lisp:error
     #A((31) common-lisp:base-char . ":virtualinterfaceid is required"))
    :type (common-lisp:or virtual-interface-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-interface-request
                    'make-delete-virtual-interface-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-virtual-interface-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-virtual-interface-response (:copier common-lisp:nil))
   (virtual-interface-state common-lisp:nil :type
    (common-lisp:or virtual-interface-state common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-virtual-interface-response
                    'make-delete-virtual-interface-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-virtual-interface-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-state))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connection-loa-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (provider-name common-lisp:nil :type
    (common-lisp:or provider-name common-lisp:null))
   (loa-content-type common-lisp:nil :type
    (common-lisp:or loa-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connection-loa-request
                    'make-describe-connection-loa-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-connection-loa-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "providerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'provider-name)))
    (aws-sdk/generator/shape::to-query-params "loaContentType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'loa-content-type))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connection-loa-response (:copier common-lisp:nil))
   (loa common-lisp:nil :type (common-lisp:or loa common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connection-loa-response
                    'make-describe-connection-loa-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-connection-loa-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "loa"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'loa))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connections-on-interconnect-request (:copier common-lisp:nil))
   (interconnect-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":interconnectid is required"))
    :type (common-lisp:or interconnect-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connections-on-interconnect-request
                    'make-describe-connections-on-interconnect-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-connections-on-interconnect-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "interconnectId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-connections-request (:copier common-lisp:nil))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-connections-request
                    'make-describe-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-connections-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-hosted-connections-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-hosted-connections-request
                    'make-describe-hosted-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-hosted-connections-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-interconnect-loa-request (:copier common-lisp:nil))
   (interconnect-id
    (common-lisp:error
     #A((27) common-lisp:base-char . ":interconnectid is required"))
    :type (common-lisp:or interconnect-id common-lisp:null))
   (provider-name common-lisp:nil :type
    (common-lisp:or provider-name common-lisp:null))
   (loa-content-type common-lisp:nil :type
    (common-lisp:or loa-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-interconnect-loa-request
                    'make-describe-interconnect-loa-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-interconnect-loa-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "interconnectId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-id)))
    (aws-sdk/generator/shape::to-query-params "providerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'provider-name)))
    (aws-sdk/generator/shape::to-query-params "loaContentType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'loa-content-type))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-interconnect-loa-response (:copier common-lisp:nil))
   (loa common-lisp:nil :type (common-lisp:or loa common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-interconnect-loa-response
                    'make-describe-interconnect-loa-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-interconnect-loa-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "loa"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'loa))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-interconnects-request (:copier common-lisp:nil))
   (interconnect-id common-lisp:nil :type
    (common-lisp:or interconnect-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-interconnects-request
                    'make-describe-interconnects-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-interconnects-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "interconnectId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-id))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-lags-request (:copier common-lisp:nil))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-lags-request 'make-describe-lags-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-lags-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-loa-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (provider-name common-lisp:nil :type
    (common-lisp:or provider-name common-lisp:null))
   (loa-content-type common-lisp:nil :type
    (common-lisp:or loa-content-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-loa-request 'make-describe-loa-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape describe-loa-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "providerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'provider-name)))
    (aws-sdk/generator/shape::to-query-params "loaContentType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'loa-content-type))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-tags-request (:copier common-lisp:nil))
   (resource-arns
    (common-lisp:error
     #A((25) common-lisp:base-char . ":resourcearns is required"))
    :type (common-lisp:or resource-arn-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-request 'make-describe-tags-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-tags-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "resourceArns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-arns))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-tags-response (:copier common-lisp:nil))
   (resource-tags common-lisp:nil :type
    (common-lisp:or resource-tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-tags-response 'make-describe-tags-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-tags-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "resourceTags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-tags))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-virtual-interfaces-request (:copier common-lisp:nil))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null))
   (virtual-interface-id common-lisp:nil :type
    (common-lisp:or virtual-interface-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-virtual-interfaces-request
                    'make-describe-virtual-interfaces-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-virtual-interfaces-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (direct-connect-client-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'direct-connect-client-exception
                    'make-direct-connect-client-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          direct-connect-client-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (direct-connect-server-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'direct-connect-server-exception
                    'make-direct-connect-server-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          direct-connect-server-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (disassociate-connection-from-lag-request (:copier common-lisp:nil))
   (connection-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":connectionid is required"))
    :type (common-lisp:or connection-id common-lisp:null))
   (lag-id
    (common-lisp:error #A((18) common-lisp:base-char . ":lagid is required"))
    :type (common-lisp:or lag-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disassociate-connection-from-lag-request
                    'make-disassociate-connection-from-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          disassociate-connection-from-lag-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (duplicate-tag-keys-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'duplicate-tag-keys-exception
                    'make-duplicate-tag-keys-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          duplicate-tag-keys-exception))
   (common-lisp:append)))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (interconnect (:copier common-lisp:nil))
   (interconnect-id common-lisp:nil :type
    (common-lisp:or interconnect-id common-lisp:null))
   (interconnect-name common-lisp:nil :type
    (common-lisp:or interconnect-name common-lisp:null))
   (interconnect-state common-lisp:nil :type
    (common-lisp:or interconnect-state common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (bandwidth common-lisp:nil :type
    (common-lisp:or bandwidth common-lisp:null))
   (loa-issue-time common-lisp:nil :type
    (common-lisp:or loa-issue-time common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null))
   (aws-device common-lisp:nil :type
    (common-lisp:or aws-device common-lisp:null)))
 (common-lisp:export (common-lisp:list 'interconnect 'make-interconnect))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape interconnect))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "interconnectId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-id)))
    (aws-sdk/generator/shape::to-query-params "interconnectName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-name)))
    (aws-sdk/generator/shape::to-query-params "interconnectState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnect-state)))
    (aws-sdk/generator/shape::to-query-params "region"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'region)))
    (aws-sdk/generator/shape::to-query-params "location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location)))
    (aws-sdk/generator/shape::to-query-params "bandwidth"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bandwidth)))
    (aws-sdk/generator/shape::to-query-params "loaIssueTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'loa-issue-time)))
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id)))
    (aws-sdk/generator/shape::to-query-params "awsDevice"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'aws-device))))))
(common-lisp:deftype interconnect-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype interconnect-list ()
   '(trivial-types:proper-list interconnect))
 (common-lisp:defun |make-interconnect-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list interconnect))
   aws-sdk/generator/shape::members))
(common-lisp:deftype interconnect-name () 'common-lisp:string)
(common-lisp:deftype interconnect-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (interconnects (:copier common-lisp:nil))
   (interconnects common-lisp:nil :type
    (common-lisp:or interconnect-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'interconnects 'make-interconnects))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape interconnects))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "interconnects"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'interconnects))))))
(common-lisp:progn
 (common-lisp:defstruct (lag (:copier common-lisp:nil))
   (connections-bandwidth common-lisp:nil :type
    (common-lisp:or bandwidth common-lisp:null))
   (number-of-connections common-lisp:nil :type
    (common-lisp:or count common-lisp:null))
   (lag-id common-lisp:nil :type (common-lisp:or lag-id common-lisp:null))
   (owner-account common-lisp:nil :type
    (common-lisp:or owner-account common-lisp:null))
   (lag-name common-lisp:nil :type (common-lisp:or lag-name common-lisp:null))
   (lag-state common-lisp:nil :type
    (common-lisp:or lag-state common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (region common-lisp:nil :type (common-lisp:or region common-lisp:null))
   (minimum-links common-lisp:nil :type
    (common-lisp:or count common-lisp:null))
   (aws-device common-lisp:nil :type
    (common-lisp:or aws-device common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connection-list common-lisp:null))
   (allows-hosted-connections common-lisp:nil :type
    (common-lisp:or boolean-flag common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lag 'make-lag))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape lag))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "connectionsBandwidth"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connections-bandwidth)))
    (aws-sdk/generator/shape::to-query-params "numberOfConnections"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'number-of-connections)))
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id)))
    (aws-sdk/generator/shape::to-query-params "ownerAccount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-account)))
    (aws-sdk/generator/shape::to-query-params "lagName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-name)))
    (aws-sdk/generator/shape::to-query-params "lagState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-state)))
    (aws-sdk/generator/shape::to-query-params "location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location)))
    (aws-sdk/generator/shape::to-query-params "region"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'region)))
    (aws-sdk/generator/shape::to-query-params "minimumLinks"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'minimum-links)))
    (aws-sdk/generator/shape::to-query-params "awsDevice"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'aws-device)))
    (aws-sdk/generator/shape::to-query-params "connections"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connections)))
    (aws-sdk/generator/shape::to-query-params "allowsHostedConnections"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allows-hosted-connections))))))
(common-lisp:deftype lag-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lag-list () '(trivial-types:proper-list lag))
 (common-lisp:defun |make-lag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lag-name () 'common-lisp:string)
(common-lisp:deftype lag-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (lags (:copier common-lisp:nil))
   (lags common-lisp:nil :type (common-lisp:or lag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lags 'make-lags))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape lags))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "lags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lags))))))
(common-lisp:progn
 (common-lisp:defstruct (loa (:copier common-lisp:nil))
   (loa-content common-lisp:nil :type
    (common-lisp:or loa-content common-lisp:null))
   (loa-content-type common-lisp:nil :type
    (common-lisp:or loa-content-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'loa 'make-loa))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape loa))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "loaContent"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'loa-content)))
    (aws-sdk/generator/shape::to-query-params "loaContentType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'loa-content-type))))))
(common-lisp:deftype loa-content ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype loa-content-type () 'common-lisp:string)
(common-lisp:deftype loa-issue-time () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (location (:copier common-lisp:nil))
   (location-code common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (location-name common-lisp:nil :type
    (common-lisp:or location-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape location))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "locationCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location-code)))
    (aws-sdk/generator/shape::to-query-params "locationName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location-name))))))
(common-lisp:deftype location-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype location-list () '(trivial-types:proper-list location))
 (common-lisp:defun |make-location-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list location))
   aws-sdk/generator/shape::members))
(common-lisp:deftype location-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (locations (:copier common-lisp:nil))
   (locations common-lisp:nil :type
    (common-lisp:or location-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'locations 'make-locations))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape locations))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "locations"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'locations))))))
(common-lisp:progn
 (common-lisp:defstruct (new-bgppeer (:copier common-lisp:nil))
   (asn common-lisp:nil :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null)))
 (common-lisp:export (common-lisp:list 'new-bgppeer 'make-new-bgppeer))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape new-bgppeer))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "asn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'asn)))
    (aws-sdk/generator/shape::to-query-params "authKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'auth-key)))
    (aws-sdk/generator/shape::to-query-params "addressFamily"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'address-family)))
    (aws-sdk/generator/shape::to-query-params "amazonAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'amazon-address)))
    (aws-sdk/generator/shape::to-query-params "customerAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'customer-address))))))
(common-lisp:progn
 (common-lisp:defstruct
     (new-private-virtual-interface (:copier common-lisp:nil))
   (virtual-interface-name
    (common-lisp:error
     #A((33) common-lisp:base-char . ":virtualinterfacename is required"))
    :type (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan
    (common-lisp:error #A((17) common-lisp:base-char . ":vlan is required"))
    :type (common-lisp:or vlan common-lisp:null))
   (asn (common-lisp:error #A((16) common-lisp:base-char . ":asn is required"))
    :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (virtual-gateway-id
    (common-lisp:error
     #A((29) common-lisp:base-char . ":virtualgatewayid is required"))
    :type (common-lisp:or virtual-gateway-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-private-virtual-interface
                    'make-new-private-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          new-private-virtual-interface))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-name)))
    (aws-sdk/generator/shape::to-query-params "vlan"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vlan)))
    (aws-sdk/generator/shape::to-query-params "asn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'asn)))
    (aws-sdk/generator/shape::to-query-params "authKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'auth-key)))
    (aws-sdk/generator/shape::to-query-params "amazonAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'amazon-address)))
    (aws-sdk/generator/shape::to-query-params "customerAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'customer-address)))
    (aws-sdk/generator/shape::to-query-params "addressFamily"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'address-family)))
    (aws-sdk/generator/shape::to-query-params "virtualGatewayId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-gateway-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (new-private-virtual-interface-allocation (:copier common-lisp:nil))
   (virtual-interface-name
    (common-lisp:error
     #A((33) common-lisp:base-char . ":virtualinterfacename is required"))
    :type (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan
    (common-lisp:error #A((17) common-lisp:base-char . ":vlan is required"))
    :type (common-lisp:or vlan common-lisp:null))
   (asn (common-lisp:error #A((16) common-lisp:base-char . ":asn is required"))
    :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-private-virtual-interface-allocation
                    'make-new-private-virtual-interface-allocation))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          new-private-virtual-interface-allocation))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-name)))
    (aws-sdk/generator/shape::to-query-params "vlan"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vlan)))
    (aws-sdk/generator/shape::to-query-params "asn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'asn)))
    (aws-sdk/generator/shape::to-query-params "authKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'auth-key)))
    (aws-sdk/generator/shape::to-query-params "amazonAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'amazon-address)))
    (aws-sdk/generator/shape::to-query-params "addressFamily"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'address-family)))
    (aws-sdk/generator/shape::to-query-params "customerAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'customer-address))))))
(common-lisp:progn
 (common-lisp:defstruct
     (new-public-virtual-interface (:copier common-lisp:nil))
   (virtual-interface-name
    (common-lisp:error
     #A((33) common-lisp:base-char . ":virtualinterfacename is required"))
    :type (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan
    (common-lisp:error #A((17) common-lisp:base-char . ":vlan is required"))
    :type (common-lisp:or vlan common-lisp:null))
   (asn (common-lisp:error #A((16) common-lisp:base-char . ":asn is required"))
    :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (route-filter-prefixes common-lisp:nil :type
    (common-lisp:or route-filter-prefix-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-public-virtual-interface
                    'make-new-public-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          new-public-virtual-interface))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-name)))
    (aws-sdk/generator/shape::to-query-params "vlan"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vlan)))
    (aws-sdk/generator/shape::to-query-params "asn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'asn)))
    (aws-sdk/generator/shape::to-query-params "authKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'auth-key)))
    (aws-sdk/generator/shape::to-query-params "amazonAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'amazon-address)))
    (aws-sdk/generator/shape::to-query-params "customerAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'customer-address)))
    (aws-sdk/generator/shape::to-query-params "addressFamily"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'address-family)))
    (aws-sdk/generator/shape::to-query-params "routeFilterPrefixes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'route-filter-prefixes))))))
(common-lisp:progn
 (common-lisp:defstruct
     (new-public-virtual-interface-allocation (:copier common-lisp:nil))
   (virtual-interface-name
    (common-lisp:error
     #A((33) common-lisp:base-char . ":virtualinterfacename is required"))
    :type (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan
    (common-lisp:error #A((17) common-lisp:base-char . ":vlan is required"))
    :type (common-lisp:or vlan common-lisp:null))
   (asn (common-lisp:error #A((16) common-lisp:base-char . ":asn is required"))
    :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (route-filter-prefixes common-lisp:nil :type
    (common-lisp:or route-filter-prefix-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'new-public-virtual-interface-allocation
                    'make-new-public-virtual-interface-allocation))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          new-public-virtual-interface-allocation))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-name)))
    (aws-sdk/generator/shape::to-query-params "vlan"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vlan)))
    (aws-sdk/generator/shape::to-query-params "asn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'asn)))
    (aws-sdk/generator/shape::to-query-params "authKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'auth-key)))
    (aws-sdk/generator/shape::to-query-params "amazonAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'amazon-address)))
    (aws-sdk/generator/shape::to-query-params "customerAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'customer-address)))
    (aws-sdk/generator/shape::to-query-params "addressFamily"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'address-family)))
    (aws-sdk/generator/shape::to-query-params "routeFilterPrefixes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'route-filter-prefixes))))))
(common-lisp:deftype owner-account () 'common-lisp:string)
(common-lisp:deftype partner-name () 'common-lisp:string)
(common-lisp:deftype provider-name () 'common-lisp:string)
(common-lisp:deftype region () 'common-lisp:string)
(common-lisp:deftype resource-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype resource-arn-list ()
   '(trivial-types:proper-list resource-arn))
 (common-lisp:defun |make-resource-arn-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-arn))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (resource-tag (:copier common-lisp:nil))
   (resource-arn common-lisp:nil :type
    (common-lisp:or resource-arn common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-tag 'make-resource-tag))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape resource-tag))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "resourceArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-arn)))
    (aws-sdk/generator/shape::to-query-params "tags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tags))))))
(common-lisp:progn
 (common-lisp:deftype resource-tag-list ()
   '(trivial-types:proper-list resource-tag))
 (common-lisp:defun |make-resource-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (route-filter-prefix (:copier common-lisp:nil))
   (cidr common-lisp:nil :type (common-lisp:or cidr common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'route-filter-prefix 'make-route-filter-prefix))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape route-filter-prefix))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "cidr"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'cidr))))))
(common-lisp:progn
 (common-lisp:deftype route-filter-prefix-list ()
   '(trivial-types:proper-list route-filter-prefix))
 (common-lisp:defun |make-route-filter-prefix-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list route-filter-prefix))
   aws-sdk/generator/shape::members))
(common-lisp:deftype router-config () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (tag (:copier common-lisp:nil))
   (key (common-lisp:error #A((16) common-lisp:base-char . ":key is required"))
    :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape tag))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "key"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key)))
    (aws-sdk/generator/shape::to-query-params "value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value))))))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (tag-resource-request (:copier common-lisp:nil))
   (resource-arn
    (common-lisp:error
     #A((24) common-lisp:base-char . ":resourcearn is required"))
    :type (common-lisp:or resource-arn common-lisp:null))
   (tags
    (common-lisp:error #A((17) common-lisp:base-char . ":tags is required"))
    :type (common-lisp:or tag-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-request 'make-tag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape tag-resource-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "resourceArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-arn)))
    (aws-sdk/generator/shape::to-query-params "tags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tags))))))
(common-lisp:progn
 (common-lisp:defstruct (tag-resource-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'tag-resource-response 'make-tag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          tag-resource-response))
   (common-lisp:append)))
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (too-many-tags-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'too-many-tags-exception 'make-too-many-tags-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          too-many-tags-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (untag-resource-request (:copier common-lisp:nil))
   (resource-arn
    (common-lisp:error
     #A((24) common-lisp:base-char . ":resourcearn is required"))
    :type (common-lisp:or resource-arn common-lisp:null))
   (tag-keys
    (common-lisp:error #A((20) common-lisp:base-char . ":tagkeys is required"))
    :type (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-request 'make-untag-resource-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          untag-resource-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "resourceArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-arn)))
    (aws-sdk/generator/shape::to-query-params "tagKeys"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tag-keys))))))
(common-lisp:progn
 (common-lisp:defstruct (untag-resource-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'untag-resource-response 'make-untag-resource-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          untag-resource-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (update-lag-request (:copier common-lisp:nil))
   (lag-id
    (common-lisp:error #A((18) common-lisp:base-char . ":lagid is required"))
    :type (common-lisp:or lag-id common-lisp:null))
   (lag-name common-lisp:nil :type (common-lisp:or lag-name common-lisp:null))
   (minimum-links common-lisp:nil :type
    (common-lisp:or count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-lag-request 'make-update-lag-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape update-lag-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "lagId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-id)))
    (aws-sdk/generator/shape::to-query-params "lagName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lag-name)))
    (aws-sdk/generator/shape::to-query-params "minimumLinks"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'minimum-links))))))
(common-lisp:deftype vlan () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (virtual-gateway (:copier common-lisp:nil))
   (virtual-gateway-id common-lisp:nil :type
    (common-lisp:or virtual-gateway-id common-lisp:null))
   (virtual-gateway-state common-lisp:nil :type
    (common-lisp:or virtual-gateway-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'virtual-gateway 'make-virtual-gateway))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape virtual-gateway))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualGatewayId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-gateway-id)))
    (aws-sdk/generator/shape::to-query-params "virtualGatewayState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-gateway-state))))))
(common-lisp:deftype virtual-gateway-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype virtual-gateway-list ()
   '(trivial-types:proper-list virtual-gateway))
 (common-lisp:defun |make-virtual-gateway-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-gateway))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtual-gateway-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (virtual-gateways (:copier common-lisp:nil))
   (virtual-gateways common-lisp:nil :type
    (common-lisp:or virtual-gateway-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-gateways 'make-virtual-gateways))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape virtual-gateways))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualGateways"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-gateways))))))
(common-lisp:progn
 (common-lisp:defstruct (virtual-interface (:copier common-lisp:nil))
   (owner-account common-lisp:nil :type
    (common-lisp:or owner-account common-lisp:null))
   (virtual-interface-id common-lisp:nil :type
    (common-lisp:or virtual-interface-id common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-code common-lisp:null))
   (connection-id common-lisp:nil :type
    (common-lisp:or connection-id common-lisp:null))
   (virtual-interface-type common-lisp:nil :type
    (common-lisp:or virtual-interface-type common-lisp:null))
   (virtual-interface-name common-lisp:nil :type
    (common-lisp:or virtual-interface-name common-lisp:null))
   (vlan common-lisp:nil :type (common-lisp:or vlan common-lisp:null))
   (asn common-lisp:nil :type (common-lisp:or asn common-lisp:null))
   (auth-key common-lisp:nil :type
    (common-lisp:or bgpauth-key common-lisp:null))
   (amazon-address common-lisp:nil :type
    (common-lisp:or amazon-address common-lisp:null))
   (customer-address common-lisp:nil :type
    (common-lisp:or customer-address common-lisp:null))
   (address-family common-lisp:nil :type
    (common-lisp:or address-family common-lisp:null))
   (virtual-interface-state common-lisp:nil :type
    (common-lisp:or virtual-interface-state common-lisp:null))
   (customer-router-config common-lisp:nil :type
    (common-lisp:or router-config common-lisp:null))
   (virtual-gateway-id common-lisp:nil :type
    (common-lisp:or virtual-gateway-id common-lisp:null))
   (route-filter-prefixes common-lisp:nil :type
    (common-lisp:or route-filter-prefix-list common-lisp:null))
   (bgp-peers common-lisp:nil :type
    (common-lisp:or bgppeer-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-interface 'make-virtual-interface))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape virtual-interface))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ownerAccount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-account)))
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-id)))
    (aws-sdk/generator/shape::to-query-params "location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location)))
    (aws-sdk/generator/shape::to-query-params "connectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-id)))
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-type)))
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-name)))
    (aws-sdk/generator/shape::to-query-params "vlan"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vlan)))
    (aws-sdk/generator/shape::to-query-params "asn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'asn)))
    (aws-sdk/generator/shape::to-query-params "authKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'auth-key)))
    (aws-sdk/generator/shape::to-query-params "amazonAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'amazon-address)))
    (aws-sdk/generator/shape::to-query-params "customerAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'customer-address)))
    (aws-sdk/generator/shape::to-query-params "addressFamily"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'address-family)))
    (aws-sdk/generator/shape::to-query-params "virtualInterfaceState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interface-state)))
    (aws-sdk/generator/shape::to-query-params "customerRouterConfig"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'customer-router-config)))
    (aws-sdk/generator/shape::to-query-params "virtualGatewayId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-gateway-id)))
    (aws-sdk/generator/shape::to-query-params "routeFilterPrefixes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'route-filter-prefixes)))
    (aws-sdk/generator/shape::to-query-params "bgpPeers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bgp-peers))))))
(common-lisp:deftype virtual-interface-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype virtual-interface-list ()
   '(trivial-types:proper-list virtual-interface))
 (common-lisp:defun |make-virtual-interface-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list virtual-interface))
   aws-sdk/generator/shape::members))
(common-lisp:deftype virtual-interface-name () 'common-lisp:string)
(common-lisp:deftype virtual-interface-state () 'common-lisp:string)
(common-lisp:deftype virtual-interface-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (virtual-interfaces (:copier common-lisp:nil))
   (virtual-interfaces common-lisp:nil :type
    (common-lisp:or virtual-interface-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'virtual-interfaces 'make-virtual-interfaces))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape virtual-interfaces))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "virtualInterfaces"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'virtual-interfaces))))))
(common-lisp:progn
 (common-lisp:defun allocate-connection-on-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key bandwidth connection-name owner-account
                     interconnect-id vlan)
   (common-lisp:declare
    (common-lisp:ignorable bandwidth connection-name owner-account
     interconnect-id vlan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-connection-on-interconnect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"AllocateConnectionOnInterconnect")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connection" common-lisp:nil)))
 (common-lisp:export 'allocate-connection-on-interconnect))
(common-lisp:progn
 (common-lisp:defun allocate-hosted-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account bandwidth
                     connection-name vlan)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account bandwidth
     connection-name vlan))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-hosted-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AllocateHostedConnection")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connection" common-lisp:nil)))
 (common-lisp:export 'allocate-hosted-connection))
(common-lisp:progn
 (common-lisp:defun allocate-private-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account
                     new-private-virtual-interface-allocation)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account
     new-private-virtual-interface-allocation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-private-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"AllocatePrivateVirtualInterface")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "VirtualInterface" common-lisp:nil)))
 (common-lisp:export 'allocate-private-virtual-interface))
(common-lisp:progn
 (common-lisp:defun allocate-public-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id owner-account
                     new-public-virtual-interface-allocation)
   (common-lisp:declare
    (common-lisp:ignorable connection-id owner-account
     new-public-virtual-interface-allocation))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-allocate-public-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AllocatePublicVirtualInterface")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "VirtualInterface" common-lisp:nil)))
 (common-lisp:export 'allocate-public-virtual-interface))
(common-lisp:progn
 (common-lisp:defun associate-connection-with-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id lag-id)
   (common-lisp:declare (common-lisp:ignorable connection-id lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-connection-with-lag-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AssociateConnectionWithLag")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connection" common-lisp:nil)))
 (common-lisp:export 'associate-connection-with-lag))
(common-lisp:progn
 (common-lisp:defun associate-hosted-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id parent-connection-id)
   (common-lisp:declare
    (common-lisp:ignorable connection-id parent-connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-hosted-connection-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AssociateHostedConnection")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connection" common-lisp:nil)))
 (common-lisp:export 'associate-hosted-connection))
(common-lisp:progn
 (common-lisp:defun associate-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id connection-id)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-associate-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AssociateVirtualInterface")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "VirtualInterface" common-lisp:nil)))
 (common-lisp:export 'associate-virtual-interface))
(common-lisp:progn
 (common-lisp:defun confirm-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-confirm-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ConfirmConnection")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ConfirmConnectionResponse" common-lisp:nil)))
 (common-lisp:export 'confirm-connection))
(common-lisp:progn
 (common-lisp:defun confirm-private-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id virtual-gateway-id)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id virtual-gateway-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-private-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ConfirmPrivateVirtualInterface")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ConfirmPrivateVirtualInterfaceResponse" common-lisp:nil)))
 (common-lisp:export 'confirm-private-virtual-interface))
(common-lisp:progn
 (common-lisp:defun confirm-public-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id)
   (common-lisp:declare (common-lisp:ignorable virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-confirm-public-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ConfirmPublicVirtualInterface")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ConfirmPublicVirtualInterfaceResponse" common-lisp:nil)))
 (common-lisp:export 'confirm-public-virtual-interface))
(common-lisp:progn
 (common-lisp:defun create-bgppeer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id new-bgppeer)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id new-bgppeer))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-bgppeer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateBGPPeer")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateBGPPeerResponse" common-lisp:nil)))
 (common-lisp:export 'create-bgppeer))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key location bandwidth connection-name
                     lag-id)
   (common-lisp:declare
    (common-lisp:ignorable location bandwidth connection-name lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateConnection")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connection" common-lisp:nil)))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-name bandwidth location
                     lag-id)
   (common-lisp:declare
    (common-lisp:ignorable interconnect-name bandwidth location lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-interconnect-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateInterconnect")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Interconnect" common-lisp:nil)))
 (common-lisp:export 'create-interconnect))
(common-lisp:progn
 (common-lisp:defun create-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key number-of-connections location
                     connections-bandwidth lag-name connection-id)
   (common-lisp:declare
    (common-lisp:ignorable number-of-connections location connections-bandwidth
     lag-name connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-lag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateLag")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Lag" common-lisp:nil)))
 (common-lisp:export 'create-lag))
(common-lisp:progn
 (common-lisp:defun create-private-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id
                     new-private-virtual-interface)
   (common-lisp:declare
    (common-lisp:ignorable connection-id new-private-virtual-interface))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-private-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreatePrivateVirtualInterface")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "VirtualInterface" common-lisp:nil)))
 (common-lisp:export 'create-private-virtual-interface))
(common-lisp:progn
 (common-lisp:defun create-public-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id
                     new-public-virtual-interface)
   (common-lisp:declare
    (common-lisp:ignorable connection-id new-public-virtual-interface))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-public-virtual-interface-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreatePublicVirtualInterface")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "VirtualInterface" common-lisp:nil)))
 (common-lisp:export 'create-public-virtual-interface))
(common-lisp:progn
 (common-lisp:defun delete-bgppeer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id asn
                     customer-address)
   (common-lisp:declare
    (common-lisp:ignorable virtual-interface-id asn customer-address))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-bgppeer-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteBGPPeer")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteBGPPeerResponse" common-lisp:nil)))
 (common-lisp:export 'delete-bgppeer))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteConnection")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connection" common-lisp:nil)))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id)
   (common-lisp:declare (common-lisp:ignorable interconnect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-interconnect-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteInterconnect")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteInterconnectResponse" common-lisp:nil)))
 (common-lisp:export 'delete-interconnect))
(common-lisp:progn
 (common-lisp:defun delete-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lag-id)
   (common-lisp:declare (common-lisp:ignorable lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteLag")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Lag" common-lisp:nil)))
 (common-lisp:export 'delete-lag))
(common-lisp:progn
 (common-lisp:defun delete-virtual-interface
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key virtual-interface-id)
   (common-lisp:declare (common-lisp:ignorable virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-virtual-interface-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteVirtualInterface")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteVirtualInterfaceResponse" common-lisp:nil)))
 (common-lisp:export 'delete-virtual-interface))
(common-lisp:progn
 (common-lisp:defun describe-connection-loa
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id provider-name
                     loa-content-type)
   (common-lisp:declare
    (common-lisp:ignorable connection-id provider-name loa-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connection-loa-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeConnectionLoa")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeConnectionLoaResponse" common-lisp:nil)))
 (common-lisp:export 'describe-connection-loa))
(common-lisp:progn
 (common-lisp:defun describe-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeConnections")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connections" common-lisp:nil)))
 (common-lisp:export 'describe-connections))
(common-lisp:progn
 (common-lisp:defun describe-connections-on-interconnect
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id)
   (common-lisp:declare (common-lisp:ignorable interconnect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-connections-on-interconnect-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action"
                                   ,@"DescribeConnectionsOnInterconnect")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connections" common-lisp:nil)))
 (common-lisp:export 'describe-connections-on-interconnect))
(common-lisp:progn
 (common-lisp:defun describe-hosted-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id)
   (common-lisp:declare (common-lisp:ignorable connection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-hosted-connections-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeHostedConnections")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connections" common-lisp:nil)))
 (common-lisp:export 'describe-hosted-connections))
(common-lisp:progn
 (common-lisp:defun describe-interconnect-loa
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id provider-name
                     loa-content-type)
   (common-lisp:declare
    (common-lisp:ignorable interconnect-id provider-name loa-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-interconnect-loa-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeInterconnectLoa")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeInterconnectLoaResponse" common-lisp:nil)))
 (common-lisp:export 'describe-interconnect-loa))
(common-lisp:progn
 (common-lisp:defun describe-interconnects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key interconnect-id)
   (common-lisp:declare (common-lisp:ignorable interconnect-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-interconnects-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeInterconnects")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Interconnects" common-lisp:nil)))
 (common-lisp:export 'describe-interconnects))
(common-lisp:progn
 (common-lisp:defun describe-lags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lag-id)
   (common-lisp:declare (common-lisp:ignorable lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-lags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeLags")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Lags" common-lisp:nil)))
 (common-lisp:export 'describe-lags))
(common-lisp:progn
 (common-lisp:defun describe-loa
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id provider-name
                     loa-content-type)
   (common-lisp:declare
    (common-lisp:ignorable connection-id provider-name loa-content-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-loa-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeLoa")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Loa" common-lisp:nil)))
 (common-lisp:export 'describe-loa))
(common-lisp:progn
 (common-lisp:defun describe-locations ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service
                             #A((13) common-lisp:base-char . "directconnect")
                             :method :post :params
                             (common-lisp:cons "Action" "DescribeLocations"))
    "Locations" common-lisp:nil))
 (common-lisp:export 'describe-locations))
(common-lisp:progn
 (common-lisp:defun describe-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arns)
   (common-lisp:declare (common-lisp:ignorable resource-arns))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-tags-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeTags")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeTagsResponse" common-lisp:nil)))
 (common-lisp:export 'describe-tags))
(common-lisp:progn
 (common-lisp:defun describe-virtual-gateways ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service
                             #A((13) common-lisp:base-char . "directconnect")
                             :method :post :params
                             (common-lisp:cons "Action"
                                               "DescribeVirtualGateways"))
    "VirtualGateways" common-lisp:nil))
 (common-lisp:export 'describe-virtual-gateways))
(common-lisp:progn
 (common-lisp:defun describe-virtual-interfaces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id virtual-interface-id)
   (common-lisp:declare
    (common-lisp:ignorable connection-id virtual-interface-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-describe-virtual-interfaces-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeVirtualInterfaces")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "VirtualInterfaces" common-lisp:nil)))
 (common-lisp:export 'describe-virtual-interfaces))
(common-lisp:progn
 (common-lisp:defun disassociate-connection-from-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key connection-id lag-id)
   (common-lisp:declare (common-lisp:ignorable connection-id lag-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disassociate-connection-from-lag-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DisassociateConnectionFromLag")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Connection" common-lisp:nil)))
 (common-lisp:export 'disassociate-connection-from-lag))
(common-lisp:progn
 (common-lisp:defun tag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tags)
   (common-lisp:declare (common-lisp:ignorable resource-arn tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-tag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"TagResource")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "TagResourceResponse" common-lisp:nil)))
 (common-lisp:export 'tag-resource))
(common-lisp:progn
 (common-lisp:defun untag-resource
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key resource-arn tag-keys)
   (common-lisp:declare (common-lisp:ignorable resource-arn tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-untag-resource-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UntagResource")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UntagResourceResponse" common-lisp:nil)))
 (common-lisp:export 'untag-resource))
(common-lisp:progn
 (common-lisp:defun update-lag
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lag-id lag-name minimum-links)
   (common-lisp:declare (common-lisp:ignorable lag-id lag-name minimum-links))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-lag-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((13) common-lisp:base-char . "directconnect")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateLag")
                                  ("Version" ,@"2012-10-25"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "Lag" common-lisp:nil)))
 (common-lisp:export 'update-lag))