;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/iot
  (:use)
  (:nicknames #:aws/iot)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/iot)

(common-lisp:progn
 (common-lisp:defstruct
     (accept-certificate-transfer-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'accept-certificate-transfer-request
                    'make-accept-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          accept-certificate-transfer-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "setAsActive"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'set-as-active))))))
(common-lisp:progn
 (common-lisp:defstruct (action (:copier common-lisp:nil))
   (dynamo-db common-lisp:nil :type
    (common-lisp:or dynamo-dbaction common-lisp:null))
   (dynamo-dbv2 common-lisp:nil :type
    (common-lisp:or dynamo-dbv2action common-lisp:null))
   (lambda common-lisp:nil :type
    (common-lisp:or lambda-action common-lisp:null))
   (sns common-lisp:nil :type (common-lisp:or sns-action common-lisp:null))
   (sqs common-lisp:nil :type (common-lisp:or sqs-action common-lisp:null))
   (kinesis common-lisp:nil :type
    (common-lisp:or kinesis-action common-lisp:null))
   (republish common-lisp:nil :type
    (common-lisp:or republish-action common-lisp:null))
   (s3 common-lisp:nil :type (common-lisp:or s3action common-lisp:null))
   (firehose common-lisp:nil :type
    (common-lisp:or firehose-action common-lisp:null))
   (cloudwatch-metric common-lisp:nil :type
    (common-lisp:or cloudwatch-metric-action common-lisp:null))
   (cloudwatch-alarm common-lisp:nil :type
    (common-lisp:or cloudwatch-alarm-action common-lisp:null))
   (elasticsearch common-lisp:nil :type
    (common-lisp:or elasticsearch-action common-lisp:null))
   (salesforce common-lisp:nil :type
    (common-lisp:or salesforce-action common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "dynamoDB"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dynamo-db)))
    (aws-sdk/generator/shape::to-query-params "dynamoDBv2"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dynamo-dbv2)))
    (aws-sdk/generator/shape::to-query-params "lambda"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lambda)))
    (aws-sdk/generator/shape::to-query-params "sns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sns)))
    (aws-sdk/generator/shape::to-query-params "sqs"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sqs)))
    (aws-sdk/generator/shape::to-query-params "kinesis"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'kinesis)))
    (aws-sdk/generator/shape::to-query-params "republish"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'republish)))
    (aws-sdk/generator/shape::to-query-params "s3"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                's3)))
    (aws-sdk/generator/shape::to-query-params "firehose"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'firehose)))
    (aws-sdk/generator/shape::to-query-params "cloudwatchMetric"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'cloudwatch-metric)))
    (aws-sdk/generator/shape::to-query-params "cloudwatchAlarm"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'cloudwatch-alarm)))
    (aws-sdk/generator/shape::to-query-params "elasticsearch"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'elasticsearch)))
    (aws-sdk/generator/shape::to-query-params "salesforce"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'salesforce))))))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:deftype alarm-name () 'common-lisp:string)
(common-lisp:deftype allow-auto-registration () 'common-lisp:boolean)
(common-lisp:deftype ascending-order () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (attach-principal-policy-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null))
   (principal
    (common-lisp:error
     #A((22) common-lisp:base-char . ":principal is required"))
    :type (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-principal-policy-request
                    'make-attach-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          attach-principal-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "principal"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'principal))))))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-thing-principal-request (:copier common-lisp:nil))
   (thing-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":thingname is required"))
    :type (common-lisp:or thing-name common-lisp:null))
   (principal
    (common-lisp:error
     #A((22) common-lisp:base-char . ":principal is required"))
    :type (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attach-thing-principal-request
                    'make-attach-thing-principal-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          attach-thing-principal-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name)))
    (aws-sdk/generator/shape::to-query-params "principal"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'principal))))))
(common-lisp:progn
 (common-lisp:defstruct
     (attach-thing-principal-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'attach-thing-principal-response
                    'make-attach-thing-principal-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          attach-thing-principal-response))
   (common-lisp:append)))
(common-lisp:deftype attribute-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (attribute-payload (:copier common-lisp:nil))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (merge common-lisp:nil :type (common-lisp:or flag common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'attribute-payload 'make-attribute-payload))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape attribute-payload))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "attributes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attributes)))
    (aws-sdk/generator/shape::to-query-params "merge"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'merge))))))
(common-lisp:deftype attribute-value () 'common-lisp:string)
(common-lisp:defstruct
    (attributes
     (:constructor |make-attributes|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:deftype auto-registration-status () 'common-lisp:string)
(common-lisp:deftype aws-account-id () 'common-lisp:string)
(common-lisp:deftype aws-arn () 'common-lisp:string)
(common-lisp:deftype aws-iot-sql-version () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype bucket-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (cacertificate (:copier common-lisp:nil))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cacertificate-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'cacertificate 'make-cacertificate))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape cacertificate))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-arn)))
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "creationDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-date))))))
(common-lisp:progn
 (common-lisp:defstruct (cacertificate-description (:copier common-lisp:nil))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or cacertificate-status common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (owned-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (auto-registration-status common-lisp:nil :type
    (common-lisp:or auto-registration-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cacertificate-description
                    'make-cacertificate-description))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          cacertificate-description))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-arn)))
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "certificatePem"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-pem)))
    (aws-sdk/generator/shape::to-query-params "ownedBy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owned-by)))
    (aws-sdk/generator/shape::to-query-params "creationDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-date)))
    (aws-sdk/generator/shape::to-query-params "autoRegistrationStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'auto-registration-status))))))
(common-lisp:deftype cacertificate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype cacertificates ()
   '(trivial-types:proper-list cacertificate))
 (common-lisp:defun |make-cacertificates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list cacertificate))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (cancel-certificate-transfer-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cancel-certificate-transfer-request
                    'make-cancel-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          cancel-certificate-transfer-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id))))))
(common-lisp:deftype canned-access-control-list () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (certificate (:copier common-lisp:nil))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'certificate 'make-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape certificate))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-arn)))
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "creationDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-date))))))
(common-lisp:deftype certificate-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-conflict-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-conflict-exception
                    'make-certificate-conflict-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          certificate-conflict-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (certificate-description (:copier common-lisp:nil))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (ca-certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (owned-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (previous-owned-by common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (last-modified-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (transfer-data common-lisp:nil :type
    (common-lisp:or transfer-data common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-description 'make-certificate-description))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          certificate-description))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-arn)))
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "caCertificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ca-certificate-id)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "certificatePem"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-pem)))
    (aws-sdk/generator/shape::to-query-params "ownedBy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owned-by)))
    (aws-sdk/generator/shape::to-query-params "previousOwnedBy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'previous-owned-by)))
    (aws-sdk/generator/shape::to-query-params "creationDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-date)))
    (aws-sdk/generator/shape::to-query-params "lastModifiedDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-modified-date)))
    (aws-sdk/generator/shape::to-query-params "transferData"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transfer-data))))))
(common-lisp:deftype certificate-id () 'common-lisp:string)
(common-lisp:deftype certificate-pem () 'common-lisp:string)
(common-lisp:deftype certificate-signing-request () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (certificate-state-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-state-exception
                    'make-certificate-state-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          certificate-state-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype certificate-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (certificate-validation-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'certificate-validation-exception
                    'make-certificate-validation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          certificate-validation-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:deftype certificates () '(trivial-types:proper-list certificate))
 (common-lisp:defun |make-certificates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (cloudwatch-alarm-action (:copier common-lisp:nil))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (alarm-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":alarmname is required"))
    :type (common-lisp:or alarm-name common-lisp:null))
   (state-reason
    (common-lisp:error
     #A((24) common-lisp:base-char . ":statereason is required"))
    :type (common-lisp:or state-reason common-lisp:null))
   (state-value
    (common-lisp:error
     #A((23) common-lisp:base-char . ":statevalue is required"))
    :type (common-lisp:or state-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-alarm-action 'make-cloudwatch-alarm-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          cloudwatch-alarm-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "alarmName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'alarm-name)))
    (aws-sdk/generator/shape::to-query-params "stateReason"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'state-reason)))
    (aws-sdk/generator/shape::to-query-params "stateValue"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'state-value))))))
(common-lisp:progn
 (common-lisp:defstruct (cloudwatch-metric-action (:copier common-lisp:nil))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (metric-namespace
    (common-lisp:error
     #A((28) common-lisp:base-char . ":metricnamespace is required"))
    :type (common-lisp:or metric-namespace common-lisp:null))
   (metric-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":metricname is required"))
    :type (common-lisp:or metric-name common-lisp:null))
   (metric-value
    (common-lisp:error
     #A((24) common-lisp:base-char . ":metricvalue is required"))
    :type (common-lisp:or metric-value common-lisp:null))
   (metric-unit
    (common-lisp:error
     #A((23) common-lisp:base-char . ":metricunit is required"))
    :type (common-lisp:or metric-unit common-lisp:null))
   (metric-timestamp common-lisp:nil :type
    (common-lisp:or metric-timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'cloudwatch-metric-action 'make-cloudwatch-metric-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          cloudwatch-metric-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "metricNamespace"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'metric-namespace)))
    (aws-sdk/generator/shape::to-query-params "metricName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'metric-name)))
    (aws-sdk/generator/shape::to-query-params "metricValue"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'metric-value)))
    (aws-sdk/generator/shape::to-query-params "metricUnit"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'metric-unit)))
    (aws-sdk/generator/shape::to-query-params "metricTimestamp"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'metric-timestamp))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-from-csr-request (:copier common-lisp:nil))
   (certificate-signing-request
    (common-lisp:error
     #A((38) common-lisp:base-char . ":certificatesigningrequest is required"))
    :type (common-lisp:or certificate-signing-request common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-from-csr-request
                    'make-create-certificate-from-csr-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-certificate-from-csr-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateSigningRequest"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-signing-request)))
    (aws-sdk/generator/shape::to-query-params "setAsActive"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'set-as-active))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-certificate-from-csr-response (:copier common-lisp:nil))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-certificate-from-csr-response
                    'make-create-certificate-from-csr-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-certificate-from-csr-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-arn)))
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "certificatePem"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-pem))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-keys-and-certificate-request (:copier common-lisp:nil))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-keys-and-certificate-request
                    'make-create-keys-and-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-keys-and-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "setAsActive"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'set-as-active))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-keys-and-certificate-response (:copier common-lisp:nil))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (key-pair common-lisp:nil :type (common-lisp:or key-pair common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-keys-and-certificate-response
                    'make-create-keys-and-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-keys-and-certificate-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-arn)))
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "certificatePem"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-pem)))
    (aws-sdk/generator/shape::to-query-params "keyPair"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key-pair))))))
(common-lisp:progn
 (common-lisp:defstruct (create-policy-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((27) common-lisp:base-char . ":policydocument is required"))
    :type (common-lisp:or policy-document common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-request 'make-create-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "policyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document))))))
(common-lisp:progn
 (common-lisp:defstruct (create-policy-response (:copier common-lisp:nil))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-response 'make-create-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "policyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "policyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document)))
    (aws-sdk/generator/shape::to-query-params "policyVersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-version-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null))
   (policy-document
    (common-lisp:error
     #A((27) common-lisp:base-char . ":policydocument is required"))
    :type (common-lisp:or policy-document common-lisp:null))
   (set-as-default common-lisp:nil :type
    (common-lisp:or set-as-default common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-request
                    'make-create-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-policy-version-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "policyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document)))
    (aws-sdk/generator/shape::to-query-params "setAsDefault"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'set-as-default))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-policy-version-response (:copier common-lisp:nil))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-policy-version-response
                    'make-create-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-policy-version-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "policyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document)))
    (aws-sdk/generator/shape::to-query-params "policyVersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-version-id)))
    (aws-sdk/generator/shape::to-query-params "isDefaultVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-default-version))))))
(common-lisp:progn
 (common-lisp:defstruct (create-thing-request (:copier common-lisp:nil))
   (thing-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":thingname is required"))
    :type (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attribute-payload common-lisp:nil :type
    (common-lisp:or attribute-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-request 'make-create-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-thing-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name)))
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name)))
    (aws-sdk/generator/shape::to-query-params "attributePayload"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attribute-payload))))))
(common-lisp:progn
 (common-lisp:defstruct (create-thing-response (:copier common-lisp:nil))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-arn common-lisp:nil :type
    (common-lisp:or thing-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-response 'make-create-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-thing-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name)))
    (aws-sdk/generator/shape::to-query-params "thingArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (create-thing-type-request (:copier common-lisp:nil))
   (thing-type-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":thingtypename is required"))
    :type (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-properties common-lisp:nil :type
    (common-lisp:or thing-type-properties common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-type-request
                    'make-create-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-thing-type-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name)))
    (aws-sdk/generator/shape::to-query-params "thingTypeProperties"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-properties))))))
(common-lisp:progn
 (common-lisp:defstruct (create-thing-type-response (:copier common-lisp:nil))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-arn common-lisp:nil :type
    (common-lisp:or thing-type-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-thing-type-response
                    'make-create-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-thing-type-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name)))
    (aws-sdk/generator/shape::to-query-params "thingTypeArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (create-topic-rule-request (:copier common-lisp:nil))
   (rule-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":rulename is required"))
    :type (common-lisp:or rule-name common-lisp:null))
   (topic-rule-payload
    (common-lisp:error
     #A((29) common-lisp:base-char . ":topicrulepayload is required"))
    :type (common-lisp:or topic-rule-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-topic-rule-request
                    'make-create-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-topic-rule-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ruleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-name)))
    (aws-sdk/generator/shape::to-query-params "topicRulePayload"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'topic-rule-payload))))))
(common-lisp:deftype created-at-date () 'common-lisp:string)
(common-lisp:deftype creation-date () 'common-lisp:string)
(common-lisp:deftype date-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cacertificate-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-cacertificate-request
                    'make-delete-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-cacertificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-cacertificate-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-cacertificate-response
                    'make-delete-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-cacertificate-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-certificate-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-certificate-request
                    'make-delete-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-conflict-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-conflict-exception
                    'make-delete-conflict-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-conflict-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-policy-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-request 'make-delete-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-policy-version-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null))
   (policy-version-id
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policyversionid is required"))
    :type (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-policy-version-request
                    'make-delete-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-policy-version-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "policyVersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-version-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-code-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-registration-code-request
                    'make-delete-registration-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-registration-code-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-registration-code-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-registration-code-response
                    'make-delete-registration-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-registration-code-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-thing-request (:copier common-lisp:nil))
   (thing-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":thingname is required"))
    :type (common-lisp:or thing-name common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-thing-request 'make-delete-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-thing-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name)))
    (aws-sdk/generator/shape::to-query-params "expectedVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'expected-version))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-thing-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-thing-response 'make-delete-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-thing-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-thing-type-request (:copier common-lisp:nil))
   (thing-type-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":thingtypename is required"))
    :type (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-thing-type-request
                    'make-delete-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-thing-type-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-thing-type-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-thing-type-response
                    'make-delete-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-thing-type-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-topic-rule-request (:copier common-lisp:nil))
   (rule-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":rulename is required"))
    :type (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-topic-rule-request
                    'make-delete-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-topic-rule-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ruleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-name))))))
(common-lisp:deftype delivery-stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-thing-type-request (:copier common-lisp:nil))
   (thing-type-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":thingtypename is required"))
    :type (common-lisp:or thing-type-name common-lisp:null))
   (undo-deprecate common-lisp:nil :type
    (common-lisp:or undo-deprecate common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deprecate-thing-type-request
                    'make-deprecate-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          deprecate-thing-type-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name)))
    (aws-sdk/generator/shape::to-query-params "undoDeprecate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'undo-deprecate))))))
(common-lisp:progn
 (common-lisp:defstruct
     (deprecate-thing-type-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deprecate-thing-type-response
                    'make-deprecate-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          deprecate-thing-type-response))
   (common-lisp:append)))
(common-lisp:deftype deprecation-date () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cacertificate-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cacertificate-request
                    'make-describe-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-cacertificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-cacertificate-response (:copier common-lisp:nil))
   (certificate-description common-lisp:nil :type
    (common-lisp:or cacertificate-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-cacertificate-response
                    'make-describe-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-cacertificate-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateDescription"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-description))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-request
                    'make-describe-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-certificate-response (:copier common-lisp:nil))
   (certificate-description common-lisp:nil :type
    (common-lisp:or certificate-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-certificate-response
                    'make-describe-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-certificate-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateDescription"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-description))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-endpoint-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-request
                    'make-describe-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-endpoint-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (describe-endpoint-response (:copier common-lisp:nil))
   (endpoint-address common-lisp:nil :type
    (common-lisp:or endpoint-address common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-endpoint-response
                    'make-describe-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-endpoint-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "endpointAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'endpoint-address))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-thing-request (:copier common-lisp:nil))
   (thing-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":thingname is required"))
    :type (common-lisp:or thing-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-request 'make-describe-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-thing-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-thing-response (:copier common-lisp:nil))
   (default-client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-response 'make-describe-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-thing-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "defaultClientId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'default-client-id)))
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name)))
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name)))
    (aws-sdk/generator/shape::to-query-params "attributes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attributes)))
    (aws-sdk/generator/shape::to-query-params "version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-thing-type-request (:copier common-lisp:nil))
   (thing-type-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":thingtypename is required"))
    :type (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-type-request
                    'make-describe-thing-type-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-thing-type-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (describe-thing-type-response (:copier common-lisp:nil))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-properties common-lisp:nil :type
    (common-lisp:or thing-type-properties common-lisp:null))
   (thing-type-metadata common-lisp:nil :type
    (common-lisp:or thing-type-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-thing-type-response
                    'make-describe-thing-type-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-thing-type-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name)))
    (aws-sdk/generator/shape::to-query-params "thingTypeProperties"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-properties)))
    (aws-sdk/generator/shape::to-query-params "thingTypeMetadata"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-metadata))))))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (detach-principal-policy-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null))
   (principal
    (common-lisp:error
     #A((22) common-lisp:base-char . ":principal is required"))
    :type (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-principal-policy-request
                    'make-detach-principal-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detach-principal-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "principal"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'principal))))))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-thing-principal-request (:copier common-lisp:nil))
   (thing-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":thingname is required"))
    :type (common-lisp:or thing-name common-lisp:null))
   (principal
    (common-lisp:error
     #A((22) common-lisp:base-char . ":principal is required"))
    :type (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detach-thing-principal-request
                    'make-detach-thing-principal-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detach-thing-principal-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name)))
    (aws-sdk/generator/shape::to-query-params "principal"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'principal))))))
(common-lisp:progn
 (common-lisp:defstruct
     (detach-thing-principal-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'detach-thing-principal-response
                    'make-detach-thing-principal-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detach-thing-principal-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (disable-topic-rule-request (:copier common-lisp:nil))
   (rule-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":rulename is required"))
    :type (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-topic-rule-request
                    'make-disable-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          disable-topic-rule-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ruleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-name))))))
(common-lisp:progn
 (common-lisp:defstruct (dynamo-dbaction (:copier common-lisp:nil))
   (table-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":tablename is required"))
    :type (common-lisp:or table-name common-lisp:null))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (operation common-lisp:nil :type
    (common-lisp:or dynamo-operation common-lisp:null))
   (hash-key-field
    (common-lisp:error
     #A((25) common-lisp:base-char . ":hashkeyfield is required"))
    :type (common-lisp:or hash-key-field common-lisp:null))
   (hash-key-value
    (common-lisp:error
     #A((25) common-lisp:base-char . ":hashkeyvalue is required"))
    :type (common-lisp:or hash-key-value common-lisp:null))
   (hash-key-type common-lisp:nil :type
    (common-lisp:or dynamo-key-type common-lisp:null))
   (range-key-field common-lisp:nil :type
    (common-lisp:or range-key-field common-lisp:null))
   (range-key-value common-lisp:nil :type
    (common-lisp:or range-key-value common-lisp:null))
   (range-key-type common-lisp:nil :type
    (common-lisp:or dynamo-key-type common-lisp:null))
   (payload-field common-lisp:nil :type
    (common-lisp:or payload-field common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dynamo-dbaction 'make-dynamo-dbaction))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape dynamo-dbaction))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "tableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "operation"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'operation)))
    (aws-sdk/generator/shape::to-query-params "hashKeyField"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hash-key-field)))
    (aws-sdk/generator/shape::to-query-params "hashKeyValue"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hash-key-value)))
    (aws-sdk/generator/shape::to-query-params "hashKeyType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hash-key-type)))
    (aws-sdk/generator/shape::to-query-params "rangeKeyField"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'range-key-field)))
    (aws-sdk/generator/shape::to-query-params "rangeKeyValue"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'range-key-value)))
    (aws-sdk/generator/shape::to-query-params "rangeKeyType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'range-key-type)))
    (aws-sdk/generator/shape::to-query-params "payloadField"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'payload-field))))))
(common-lisp:progn
 (common-lisp:defstruct (dynamo-dbv2action (:copier common-lisp:nil))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null))
   (put-item common-lisp:nil :type
    (common-lisp:or put-item-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dynamo-dbv2action 'make-dynamo-dbv2action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape dynamo-dbv2action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "putItem"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'put-item))))))
(common-lisp:deftype dynamo-key-type () 'common-lisp:string)
(common-lisp:deftype dynamo-operation () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (elasticsearch-action (:copier common-lisp:nil))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (endpoint
    (common-lisp:error
     #A((21) common-lisp:base-char . ":endpoint is required"))
    :type (common-lisp:or elasticsearch-endpoint common-lisp:null))
   (index
    (common-lisp:error #A((18) common-lisp:base-char . ":index is required"))
    :type (common-lisp:or elasticsearch-index common-lisp:null))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or elasticsearch-type common-lisp:null))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or elasticsearch-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'elasticsearch-action 'make-elasticsearch-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape elasticsearch-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "endpoint"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'endpoint)))
    (aws-sdk/generator/shape::to-query-params "index"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'index)))
    (aws-sdk/generator/shape::to-query-params "type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id))))))
(common-lisp:deftype elasticsearch-endpoint () 'common-lisp:string)
(common-lisp:deftype elasticsearch-id () 'common-lisp:string)
(common-lisp:deftype elasticsearch-index () 'common-lisp:string)
(common-lisp:deftype elasticsearch-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (enable-topic-rule-request (:copier common-lisp:nil))
   (rule-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":rulename is required"))
    :type (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-topic-rule-request
                    'make-enable-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          enable-topic-rule-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ruleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-name))))))
(common-lisp:deftype endpoint-address () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (firehose-action (:copier common-lisp:nil))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (delivery-stream-name
    (common-lisp:error
     #A((31) common-lisp:base-char . ":deliverystreamname is required"))
    :type (common-lisp:or delivery-stream-name common-lisp:null))
   (separator common-lisp:nil :type
    (common-lisp:or firehose-separator common-lisp:null)))
 (common-lisp:export (common-lisp:list 'firehose-action 'make-firehose-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape firehose-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "deliveryStreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'delivery-stream-name)))
    (aws-sdk/generator/shape::to-query-params "separator"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'separator))))))
(common-lisp:deftype firehose-separator () 'common-lisp:string)
(common-lisp:deftype flag () 'common-lisp:boolean)
(common-lisp:deftype function-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-options-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-request
                    'make-get-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-logging-options-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-logging-options-response (:copier common-lisp:nil))
   (role-arn common-lisp:nil :type (common-lisp:or aws-arn common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-logging-options-response
                    'make-get-logging-options-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-logging-options-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "logLevel"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'log-level))))))
(common-lisp:progn
 (common-lisp:defstruct (get-policy-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-request 'make-get-policy-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-policy-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-policy-response (:copier common-lisp:nil))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (default-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-response 'make-get-policy-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-policy-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "policyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "policyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document)))
    (aws-sdk/generator/shape::to-query-params "defaultVersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'default-version-id))))))
(common-lisp:progn
 (common-lisp:defstruct (get-policy-version-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null))
   (policy-version-id
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policyversionid is required"))
    :type (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-request
                    'make-get-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-policy-version-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "policyVersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-version-id))))))
(common-lisp:progn
 (common-lisp:defstruct (get-policy-version-response (:copier common-lisp:nil))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-document common-lisp:nil :type
    (common-lisp:or policy-document common-lisp:null))
   (policy-version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-policy-version-response
                    'make-get-policy-version-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-policy-version-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn)))
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "policyDocument"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-document)))
    (aws-sdk/generator/shape::to-query-params "policyVersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-version-id)))
    (aws-sdk/generator/shape::to-query-params "isDefaultVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-default-version))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-registration-code-request (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'get-registration-code-request
                    'make-get-registration-code-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-registration-code-request))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (get-registration-code-response (:copier common-lisp:nil))
   (registration-code common-lisp:nil :type
    (common-lisp:or registration-code common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-registration-code-response
                    'make-get-registration-code-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-registration-code-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "registrationCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'registration-code))))))
(common-lisp:progn
 (common-lisp:defstruct (get-topic-rule-request (:copier common-lisp:nil))
   (rule-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":rulename is required"))
    :type (common-lisp:or rule-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-request 'make-get-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-topic-rule-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ruleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-topic-rule-response (:copier common-lisp:nil))
   (rule-arn common-lisp:nil :type (common-lisp:or rule-arn common-lisp:null))
   (rule common-lisp:nil :type (common-lisp:or topic-rule common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-topic-rule-response 'make-get-topic-rule-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-topic-rule-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ruleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-arn)))
    (aws-sdk/generator/shape::to-query-params "rule"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule))))))
(common-lisp:deftype hash-key-field () 'common-lisp:string)
(common-lisp:deftype hash-key-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (internal-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internal-exception 'make-internal-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape internal-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (internal-failure-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internal-failure-exception
                    'make-internal-failure-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          internal-failure-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-request-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'make-invalid-request-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-request-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype is-default-version () 'common-lisp:boolean)
(common-lisp:deftype is-disabled () 'common-lisp:boolean)
(common-lisp:deftype key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (key-pair (:copier common-lisp:nil))
   (public-key common-lisp:nil :type
    (common-lisp:or public-key common-lisp:null))
   (private-key common-lisp:nil :type
    (common-lisp:or private-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'key-pair 'make-key-pair))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape key-pair))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PublicKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'public-key)))
    (aws-sdk/generator/shape::to-query-params "PrivateKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'private-key))))))
(common-lisp:progn
 (common-lisp:defstruct (kinesis-action (:copier common-lisp:nil))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (stream-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":streamname is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (partition-key common-lisp:nil :type
    (common-lisp:or partition-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'kinesis-action 'make-kinesis-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape kinesis-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "streamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "partitionKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-key))))))
(common-lisp:progn
 (common-lisp:defstruct (lambda-action (:copier common-lisp:nil))
   (function-arn
    (common-lisp:error
     #A((24) common-lisp:base-char . ":functionarn is required"))
    :type (common-lisp:or function-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lambda-action 'make-lambda-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape lambda-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "functionArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'function-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (limit-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'make-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          limit-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (list-cacertificates-request (:copier common-lisp:nil))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cacertificates-request
                    'make-list-cacertificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-cacertificates-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pageSize"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'page-size)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "ascendingOrder"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ascending-order))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-cacertificates-response (:copier common-lisp:nil))
   (certificates common-lisp:nil :type
    (common-lisp:or cacertificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-cacertificates-response
                    'make-list-cacertificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-cacertificates-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificates"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificates)))
    (aws-sdk/generator/shape::to-query-params "nextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-by-carequest (:copier common-lisp:nil))
   (ca-certificate-id
    (common-lisp:error
     #A((28) common-lisp:base-char . ":cacertificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-by-carequest
                    'make-list-certificates-by-carequest))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-certificates-by-carequest))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "caCertificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ca-certificate-id)))
    (aws-sdk/generator/shape::to-query-params "pageSize"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'page-size)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "ascendingOrder"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ascending-order))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-certificates-by-caresponse (:copier common-lisp:nil))
   (certificates common-lisp:nil :type
    (common-lisp:or certificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-by-caresponse
                    'make-list-certificates-by-caresponse))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-certificates-by-caresponse))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificates"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificates)))
    (aws-sdk/generator/shape::to-query-params "nextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-certificates-request (:copier common-lisp:nil))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-request
                    'make-list-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-certificates-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pageSize"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'page-size)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "ascendingOrder"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ascending-order))))))
(common-lisp:progn
 (common-lisp:defstruct (list-certificates-response (:copier common-lisp:nil))
   (certificates common-lisp:nil :type
    (common-lisp:or certificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-certificates-response
                    'make-list-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-certificates-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificates"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificates)))
    (aws-sdk/generator/shape::to-query-params "nextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-outgoing-certificates-request (:copier common-lisp:nil))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-certificates-request
                    'make-list-outgoing-certificates-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-outgoing-certificates-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pageSize"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'page-size)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "ascendingOrder"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ascending-order))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-outgoing-certificates-response (:copier common-lisp:nil))
   (outgoing-certificates common-lisp:nil :type
    (common-lisp:or outgoing-certificates common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-outgoing-certificates-response
                    'make-list-outgoing-certificates-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-outgoing-certificates-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "outgoingCertificates"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'outgoing-certificates)))
    (aws-sdk/generator/shape::to-query-params "nextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-policies-request (:copier common-lisp:nil))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-request 'make-list-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "pageSize"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'page-size)))
    (aws-sdk/generator/shape::to-query-params "ascendingOrder"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ascending-order))))))
(common-lisp:progn
 (common-lisp:defstruct (list-policies-response (:copier common-lisp:nil))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policies-response 'make-list-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policies)))
    (aws-sdk/generator/shape::to-query-params "nextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-principals-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-principals-request
                    'make-list-policy-principals-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policy-principals-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "pageSize"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'page-size)))
    (aws-sdk/generator/shape::to-query-params "ascendingOrder"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ascending-order))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-principals-response (:copier common-lisp:nil))
   (principals common-lisp:nil :type
    (common-lisp:or principals common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-principals-response
                    'make-list-policy-principals-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policy-principals-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "principals"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'principals)))
    (aws-sdk/generator/shape::to-query-params "nextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-request
                    'make-list-policy-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policy-versions-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-policy-versions-response (:copier common-lisp:nil))
   (policy-versions common-lisp:nil :type
    (common-lisp:or policy-versions common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-policy-versions-response
                    'make-list-policy-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-policy-versions-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyVersions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-versions))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-policies-request (:copier common-lisp:nil))
   (principal
    (common-lisp:error
     #A((22) common-lisp:base-char . ":principal is required"))
    :type (common-lisp:or principal common-lisp:null))
   (marker common-lisp:nil :type (common-lisp:or marker common-lisp:null))
   (page-size common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (ascending-order common-lisp:nil :type
    (common-lisp:or ascending-order common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-policies-request
                    'make-list-principal-policies-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-principal-policies-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "principal"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'principal)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "pageSize"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'page-size)))
    (aws-sdk/generator/shape::to-query-params "ascendingOrder"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ascending-order))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-policies-response (:copier common-lisp:nil))
   (policies common-lisp:nil :type (common-lisp:or policies common-lisp:null))
   (next-marker common-lisp:nil :type
    (common-lisp:or marker common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-policies-response
                    'make-list-principal-policies-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-principal-policies-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policies"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policies)))
    (aws-sdk/generator/shape::to-query-params "nextMarker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-marker))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-things-request (:copier common-lisp:nil))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (principal
    (common-lisp:error
     #A((22) common-lisp:base-char . ":principal is required"))
    :type (common-lisp:or principal common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-things-request
                    'make-list-principal-things-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-principal-things-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "maxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results)))
    (aws-sdk/generator/shape::to-query-params "principal"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'principal))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-principal-things-response (:copier common-lisp:nil))
   (things common-lisp:nil :type
    (common-lisp:or thing-name-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-principal-things-response
                    'make-list-principal-things-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-principal-things-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "things"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'things)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-principals-request (:copier common-lisp:nil))
   (thing-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":thingname is required"))
    :type (common-lisp:or thing-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-principals-request
                    'make-list-thing-principals-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-thing-principals-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-thing-principals-response (:copier common-lisp:nil))
   (principals common-lisp:nil :type
    (common-lisp:or principals common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-principals-response
                    'make-list-thing-principals-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-thing-principals-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "principals"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'principals))))))
(common-lisp:progn
 (common-lisp:defstruct (list-thing-types-request (:copier common-lisp:nil))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-types-request 'make-list-thing-types-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-thing-types-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "maxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results)))
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name))))))
(common-lisp:progn
 (common-lisp:defstruct (list-thing-types-response (:copier common-lisp:nil))
   (thing-types common-lisp:nil :type
    (common-lisp:or thing-type-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-thing-types-response
                    'make-list-thing-types-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-thing-types-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingTypes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-types)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (list-things-request (:copier common-lisp:nil))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or registry-max-results common-lisp:null))
   (attribute-name common-lisp:nil :type
    (common-lisp:or attribute-name common-lisp:null))
   (attribute-value common-lisp:nil :type
    (common-lisp:or attribute-value common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-request 'make-list-things-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-things-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "maxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results)))
    (aws-sdk/generator/shape::to-query-params "attributeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attribute-name)))
    (aws-sdk/generator/shape::to-query-params "attributeValue"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attribute-value)))
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name))))))
(common-lisp:progn
 (common-lisp:defstruct (list-things-response (:copier common-lisp:nil))
   (things common-lisp:nil :type
    (common-lisp:or thing-attribute-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-things-response 'make-list-things-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-things-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "things"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'things)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (list-topic-rules-request (:copier common-lisp:nil))
   (topic common-lisp:nil :type (common-lisp:or topic common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-topic-rules-request 'make-list-topic-rules-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-topic-rules-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "topic"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'topic)))
    (aws-sdk/generator/shape::to-query-params "maxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "ruleDisabled"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-disabled))))))
(common-lisp:progn
 (common-lisp:defstruct (list-topic-rules-response (:copier common-lisp:nil))
   (rules common-lisp:nil :type
    (common-lisp:or topic-rule-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-topic-rules-response
                    'make-list-topic-rules-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-topic-rules-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "rules"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rules)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:deftype log-level () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (logging-options-payload (:copier common-lisp:nil))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (log-level common-lisp:nil :type
    (common-lisp:or log-level common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'logging-options-payload 'make-logging-options-payload))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          logging-options-payload))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "logLevel"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'log-level))))))
(common-lisp:progn
 (common-lisp:defstruct (malformed-policy-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'malformed-policy-exception
                    'make-malformed-policy-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          malformed-policy-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype marker () 'common-lisp:string)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype message-format () 'common-lisp:string)
(common-lisp:deftype metric-name () 'common-lisp:string)
(common-lisp:deftype metric-namespace () 'common-lisp:string)
(common-lisp:deftype metric-timestamp () 'common-lisp:string)
(common-lisp:deftype metric-unit () 'common-lisp:string)
(common-lisp:deftype metric-value () 'common-lisp:string)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype optional-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (outgoing-certificate (:copier common-lisp:nil))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null))
   (transferred-to common-lisp:nil :type
    (common-lisp:or aws-account-id common-lisp:null))
   (transfer-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (transfer-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'outgoing-certificate 'make-outgoing-certificate))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape outgoing-certificate))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-arn)))
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "transferredTo"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transferred-to)))
    (aws-sdk/generator/shape::to-query-params "transferDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transfer-date)))
    (aws-sdk/generator/shape::to-query-params "transferMessage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transfer-message)))
    (aws-sdk/generator/shape::to-query-params "creationDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-date))))))
(common-lisp:progn
 (common-lisp:deftype outgoing-certificates ()
   '(trivial-types:proper-list outgoing-certificate))
 (common-lisp:defun |make-outgoing-certificates|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list outgoing-certificate))
   aws-sdk/generator/shape::members))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype partition-key () 'common-lisp:string)
(common-lisp:deftype payload-field () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policies () '(trivial-types:proper-list policy))
 (common-lisp:defun |make-policies|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (policy (:copier common-lisp:nil))
   (policy-name common-lisp:nil :type
    (common-lisp:or policy-name common-lisp:null))
   (policy-arn common-lisp:nil :type
    (common-lisp:or policy-arn common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy 'make-policy))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape policy))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "policyArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-arn))))))
(common-lisp:deftype policy-arn () 'common-lisp:string)
(common-lisp:deftype policy-document () 'common-lisp:string)
(common-lisp:deftype policy-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (policy-version (:copier common-lisp:nil))
   (version-id common-lisp:nil :type
    (common-lisp:or policy-version-id common-lisp:null))
   (is-default-version common-lisp:nil :type
    (common-lisp:or is-default-version common-lisp:null))
   (create-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'policy-version 'make-policy-version))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape policy-version))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "versionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version-id)))
    (aws-sdk/generator/shape::to-query-params "isDefaultVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'is-default-version)))
    (aws-sdk/generator/shape::to-query-params "createDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-date))))))
(common-lisp:deftype policy-version-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype policy-versions ()
   '(trivial-types:proper-list policy-version))
 (common-lisp:defun |make-policy-versions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list policy-version))
   aws-sdk/generator/shape::members))
(common-lisp:deftype principal () 'common-lisp:string)
(common-lisp:deftype principal-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype principals () '(trivial-types:proper-list principal-arn))
 (common-lisp:defun |make-principals|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list principal-arn))
   aws-sdk/generator/shape::members))
(common-lisp:deftype private-key () 'common-lisp:string)
(common-lisp:deftype public-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (put-item-input (:copier common-lisp:nil))
   (table-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":tablename is required"))
    :type (common-lisp:or table-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'put-item-input 'make-put-item-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape put-item-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "tableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name))))))
(common-lisp:deftype queue-url () 'common-lisp:string)
(common-lisp:deftype range-key-field () 'common-lisp:string)
(common-lisp:deftype range-key-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (register-cacertificate-request (:copier common-lisp:nil))
   (ca-certificate
    (common-lisp:error
     #A((26) common-lisp:base-char . ":cacertificate is required"))
    :type (common-lisp:or certificate-pem common-lisp:null))
   (verification-certificate
    (common-lisp:error
     #A((36) common-lisp:base-char . ":verificationcertificate is required"))
    :type (common-lisp:or certificate-pem common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active common-lisp:null))
   (allow-auto-registration common-lisp:nil :type
    (common-lisp:or allow-auto-registration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-cacertificate-request
                    'make-register-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          register-cacertificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "caCertificate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ca-certificate)))
    (aws-sdk/generator/shape::to-query-params "verificationCertificate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'verification-certificate)))
    (aws-sdk/generator/shape::to-query-params "setAsActive"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'set-as-active)))
    (aws-sdk/generator/shape::to-query-params "allowAutoRegistration"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allow-auto-registration))))))
(common-lisp:progn
 (common-lisp:defstruct
     (register-cacertificate-response (:copier common-lisp:nil))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-cacertificate-response
                    'make-register-cacertificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          register-cacertificate-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-arn)))
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (register-certificate-request (:copier common-lisp:nil))
   (certificate-pem
    (common-lisp:error
     #A((27) common-lisp:base-char . ":certificatepem is required"))
    :type (common-lisp:or certificate-pem common-lisp:null))
   (ca-certificate-pem common-lisp:nil :type
    (common-lisp:or certificate-pem common-lisp:null))
   (set-as-active common-lisp:nil :type
    (common-lisp:or set-as-active-flag common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or certificate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-certificate-request
                    'make-register-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          register-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificatePem"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-pem)))
    (aws-sdk/generator/shape::to-query-params "caCertificatePem"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ca-certificate-pem)))
    (aws-sdk/generator/shape::to-query-params "setAsActive"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'set-as-active)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:progn
 (common-lisp:defstruct
     (register-certificate-response (:copier common-lisp:nil))
   (certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null))
   (certificate-id common-lisp:nil :type
    (common-lisp:or certificate-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'register-certificate-response
                    'make-register-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          register-certificate-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-arn)))
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id))))))
(common-lisp:deftype registration-code () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (registration-code-validation-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'registration-code-validation-exception
                    'make-registration-code-validation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          registration-code-validation-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype registry-max-results () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (reject-certificate-transfer-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null))
   (reject-reason common-lisp:nil :type
    (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reject-certificate-transfer-request
                    'make-reject-certificate-transfer-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          reject-certificate-transfer-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "rejectReason"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'reject-reason))))))
(common-lisp:deftype remove-thing-type () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct (replace-topic-rule-request (:copier common-lisp:nil))
   (rule-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":rulename is required"))
    :type (common-lisp:or rule-name common-lisp:null))
   (topic-rule-payload
    (common-lisp:error
     #A((29) common-lisp:base-char . ":topicrulepayload is required"))
    :type (common-lisp:or topic-rule-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'replace-topic-rule-request
                    'make-replace-topic-rule-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          replace-topic-rule-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ruleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-name)))
    (aws-sdk/generator/shape::to-query-params "topicRulePayload"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'topic-rule-payload))))))
(common-lisp:progn
 (common-lisp:defstruct (republish-action (:copier common-lisp:nil))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (topic
    (common-lisp:error #A((18) common-lisp:base-char . ":topic is required"))
    :type (common-lisp:or topic-pattern common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'republish-action 'make-republish-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape republish-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "topic"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'topic))))))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-already-exists-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null))
   (resource-id common-lisp:nil :type
    (common-lisp:or |resourceId| common-lisp:null))
   (resource-arn common-lisp:nil :type
    (common-lisp:or |resourceArn| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'make-resource-already-exists-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          resource-already-exists-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message)))
    (aws-sdk/generator/shape::to-query-params "resourceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-id)))
    (aws-sdk/generator/shape::to-query-params "resourceArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-arn))))))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-not-found-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'make-resource-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          resource-not-found-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype rule-arn () 'common-lisp:string)
(common-lisp:deftype rule-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (s3action (:copier common-lisp:nil))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (bucket-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":bucketname is required"))
    :type (common-lisp:or bucket-name common-lisp:null))
   (key (common-lisp:error #A((16) common-lisp:base-char . ":key is required"))
    :type (common-lisp:or key common-lisp:null))
   (canned-acl common-lisp:nil :type
    (common-lisp:or canned-access-control-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3action 'make-s3action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape s3action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "bucketName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bucket-name)))
    (aws-sdk/generator/shape::to-query-params "key"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key)))
    (aws-sdk/generator/shape::to-query-params "cannedAcl"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'canned-acl))))))
(common-lisp:deftype sql () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (salesforce-action (:copier common-lisp:nil))
   (token
    (common-lisp:error #A((18) common-lisp:base-char . ":token is required"))
    :type (common-lisp:or salesforce-token common-lisp:null))
   (url (common-lisp:error #A((16) common-lisp:base-char . ":url is required"))
    :type (common-lisp:or salesforce-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'salesforce-action 'make-salesforce-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape salesforce-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "token"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'token)))
    (aws-sdk/generator/shape::to-query-params "url"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'url))))))
(common-lisp:deftype salesforce-endpoint () 'common-lisp:string)
(common-lisp:deftype salesforce-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype searchable-attributes ()
   '(trivial-types:proper-list attribute-name))
 (common-lisp:defun |make-searchable-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (service-unavailable-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-unavailable-exception
                    'make-service-unavailable-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          service-unavailable-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype set-as-active () 'common-lisp:boolean)
(common-lisp:deftype set-as-active-flag () 'common-lisp:boolean)
(common-lisp:deftype set-as-default () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (set-default-policy-version-request (:copier common-lisp:nil))
   (policy-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":policyname is required"))
    :type (common-lisp:or policy-name common-lisp:null))
   (policy-version-id
    (common-lisp:error
     #A((28) common-lisp:base-char . ":policyversionid is required"))
    :type (common-lisp:or policy-version-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-default-policy-version-request
                    'make-set-default-policy-version-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          set-default-policy-version-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "policyName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-name)))
    (aws-sdk/generator/shape::to-query-params "policyVersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'policy-version-id))))))
(common-lisp:progn
 (common-lisp:defstruct (set-logging-options-request (:copier common-lisp:nil))
   (logging-options-payload
    (common-lisp:error
     #A((34) common-lisp:base-char . ":loggingoptionspayload is required"))
    :type (common-lisp:or logging-options-payload common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-logging-options-request
                    'make-set-logging-options-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          set-logging-options-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "loggingOptionsPayload"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'logging-options-payload))))))
(common-lisp:progn
 (common-lisp:defstruct (sns-action (:copier common-lisp:nil))
   (target-arn
    (common-lisp:error
     #A((22) common-lisp:base-char . ":targetarn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (message-format common-lisp:nil :type
    (common-lisp:or message-format common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sns-action 'make-sns-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape sns-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "targetArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target-arn)))
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "messageFormat"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message-format))))))
(common-lisp:progn
 (common-lisp:defstruct (sql-parse-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sql-parse-exception 'make-sql-parse-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape sql-parse-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (sqs-action (:copier common-lisp:nil))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or aws-arn common-lisp:null))
   (queue-url
    (common-lisp:error
     #A((21) common-lisp:base-char . ":queueurl is required"))
    :type (common-lisp:or queue-url common-lisp:null))
   (use-base64 common-lisp:nil :type
    (common-lisp:or use-base64 common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sqs-action 'make-sqs-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape sqs-action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "queueUrl"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'queue-url)))
    (aws-sdk/generator/shape::to-query-params "useBase64"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'use-base64))))))
(common-lisp:deftype state-reason () 'common-lisp:string)
(common-lisp:deftype state-value () 'common-lisp:string)
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:deftype thing-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (thing-attribute (:copier common-lisp:nil))
   (thing-name common-lisp:nil :type
    (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'thing-attribute 'make-thing-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape thing-attribute))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name)))
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name)))
    (aws-sdk/generator/shape::to-query-params "attributes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attributes)))
    (aws-sdk/generator/shape::to-query-params "version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:deftype thing-attribute-list ()
   '(trivial-types:proper-list thing-attribute))
 (common-lisp:defun |make-thing-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-name-list ()
   '(trivial-types:proper-list thing-name))
 (common-lisp:defun |make-thing-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype thing-type-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (thing-type-definition (:copier common-lisp:nil))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (thing-type-properties common-lisp:nil :type
    (common-lisp:or thing-type-properties common-lisp:null))
   (thing-type-metadata common-lisp:nil :type
    (common-lisp:or thing-type-metadata common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-type-definition 'make-thing-type-definition))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          thing-type-definition))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name)))
    (aws-sdk/generator/shape::to-query-params "thingTypeProperties"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-properties)))
    (aws-sdk/generator/shape::to-query-params "thingTypeMetadata"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-metadata))))))
(common-lisp:deftype thing-type-description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype thing-type-list ()
   '(trivial-types:proper-list thing-type-definition))
 (common-lisp:defun |make-thing-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list thing-type-definition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (thing-type-metadata (:copier common-lisp:nil))
   (deprecated common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (deprecation-date common-lisp:nil :type
    (common-lisp:or deprecation-date common-lisp:null))
   (creation-date common-lisp:nil :type
    (common-lisp:or creation-date common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-type-metadata 'make-thing-type-metadata))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape thing-type-metadata))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "deprecated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'deprecated)))
    (aws-sdk/generator/shape::to-query-params "deprecationDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'deprecation-date)))
    (aws-sdk/generator/shape::to-query-params "creationDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-date))))))
(common-lisp:deftype thing-type-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (thing-type-properties (:copier common-lisp:nil))
   (thing-type-description common-lisp:nil :type
    (common-lisp:or thing-type-description common-lisp:null))
   (searchable-attributes common-lisp:nil :type
    (common-lisp:or searchable-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'thing-type-properties 'make-thing-type-properties))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          thing-type-properties))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingTypeDescription"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-description)))
    (aws-sdk/generator/shape::to-query-params "searchableAttributes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'searchable-attributes))))))
(common-lisp:progn
 (common-lisp:defstruct (throttling-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'make-throttling-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape throttling-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype topic () 'common-lisp:string)
(common-lisp:deftype topic-pattern () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (topic-rule (:copier common-lisp:nil))
   (rule-name common-lisp:nil :type
    (common-lisp:or rule-name common-lisp:null))
   (sql common-lisp:nil :type (common-lisp:or sql common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at-date common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or action-list common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null))
   (aws-iot-sql-version common-lisp:nil :type
    (common-lisp:or aws-iot-sql-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'topic-rule 'make-topic-rule))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape topic-rule))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ruleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-name)))
    (aws-sdk/generator/shape::to-query-params "sql"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sql)))
    (aws-sdk/generator/shape::to-query-params "description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "createdAt"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created-at)))
    (aws-sdk/generator/shape::to-query-params "actions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'actions)))
    (aws-sdk/generator/shape::to-query-params "ruleDisabled"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-disabled)))
    (aws-sdk/generator/shape::to-query-params "awsIotSqlVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'aws-iot-sql-version))))))
(common-lisp:progn
 (common-lisp:deftype topic-rule-list ()
   '(trivial-types:proper-list topic-rule-list-item))
 (common-lisp:defun |make-topic-rule-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list topic-rule-list-item))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (topic-rule-list-item (:copier common-lisp:nil))
   (rule-arn common-lisp:nil :type (common-lisp:or rule-arn common-lisp:null))
   (rule-name common-lisp:nil :type
    (common-lisp:or rule-name common-lisp:null))
   (topic-pattern common-lisp:nil :type
    (common-lisp:or topic-pattern common-lisp:null))
   (created-at common-lisp:nil :type
    (common-lisp:or created-at-date common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-rule-list-item 'make-topic-rule-list-item))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape topic-rule-list-item))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ruleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-arn)))
    (aws-sdk/generator/shape::to-query-params "ruleName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-name)))
    (aws-sdk/generator/shape::to-query-params "topicPattern"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'topic-pattern)))
    (aws-sdk/generator/shape::to-query-params "createdAt"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created-at)))
    (aws-sdk/generator/shape::to-query-params "ruleDisabled"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-disabled))))))
(common-lisp:progn
 (common-lisp:defstruct (topic-rule-payload (:copier common-lisp:nil))
   (sql (common-lisp:error #A((16) common-lisp:base-char . ":sql is required"))
    :type (common-lisp:or sql common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (actions
    (common-lisp:error #A((20) common-lisp:base-char . ":actions is required"))
    :type (common-lisp:or action-list common-lisp:null))
   (rule-disabled common-lisp:nil :type
    (common-lisp:or is-disabled common-lisp:null))
   (aws-iot-sql-version common-lisp:nil :type
    (common-lisp:or aws-iot-sql-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'topic-rule-payload 'make-topic-rule-payload))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape topic-rule-payload))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "sql"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sql)))
    (aws-sdk/generator/shape::to-query-params "description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "actions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'actions)))
    (aws-sdk/generator/shape::to-query-params "ruleDisabled"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'rule-disabled)))
    (aws-sdk/generator/shape::to-query-params "awsIotSqlVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'aws-iot-sql-version))))))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-already-completed-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-already-completed-exception
                    'make-transfer-already-completed-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          transfer-already-completed-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-certificate-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null))
   (target-aws-account
    (common-lisp:error
     #A((29) common-lisp:base-char . ":targetawsaccount is required"))
    :type (common-lisp:or aws-account-id common-lisp:null))
   (transfer-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-certificate-request
                    'make-transfer-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          transfer-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "targetAwsAccount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target-aws-account)))
    (aws-sdk/generator/shape::to-query-params "transferMessage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transfer-message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (transfer-certificate-response (:copier common-lisp:nil))
   (transferred-certificate-arn common-lisp:nil :type
    (common-lisp:or certificate-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-certificate-response
                    'make-transfer-certificate-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          transfer-certificate-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "transferredCertificateArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transferred-certificate-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (transfer-conflict-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transfer-conflict-exception
                    'make-transfer-conflict-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          transfer-conflict-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (transfer-data (:copier common-lisp:nil))
   (transfer-message common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (reject-reason common-lisp:nil :type
    (common-lisp:or message common-lisp:null))
   (transfer-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (accept-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null))
   (reject-date common-lisp:nil :type
    (common-lisp:or date-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'transfer-data 'make-transfer-data))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape transfer-data))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "transferMessage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transfer-message)))
    (aws-sdk/generator/shape::to-query-params "rejectReason"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'reject-reason)))
    (aws-sdk/generator/shape::to-query-params "transferDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transfer-date)))
    (aws-sdk/generator/shape::to-query-params "acceptDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'accept-date)))
    (aws-sdk/generator/shape::to-query-params "rejectDate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'reject-date))))))
(common-lisp:progn
 (common-lisp:defstruct (unauthorized-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unauthorized-exception 'make-unauthorized-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          unauthorized-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype undo-deprecate () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct
     (update-cacertificate-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null))
   (new-status common-lisp:nil :type
    (common-lisp:or cacertificate-status common-lisp:null))
   (new-auto-registration-status common-lisp:nil :type
    (common-lisp:or auto-registration-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-cacertificate-request
                    'make-update-cacertificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-cacertificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "newStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-status)))
    (aws-sdk/generator/shape::to-query-params "newAutoRegistrationStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-auto-registration-status))))))
(common-lisp:progn
 (common-lisp:defstruct (update-certificate-request (:copier common-lisp:nil))
   (certificate-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":certificateid is required"))
    :type (common-lisp:or certificate-id common-lisp:null))
   (new-status
    (common-lisp:error
     #A((22) common-lisp:base-char . ":newstatus is required"))
    :type (common-lisp:or certificate-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-certificate-request
                    'make-update-certificate-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-certificate-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "certificateId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'certificate-id)))
    (aws-sdk/generator/shape::to-query-params "newStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-status))))))
(common-lisp:progn
 (common-lisp:defstruct (update-thing-request (:copier common-lisp:nil))
   (thing-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":thingname is required"))
    :type (common-lisp:or thing-name common-lisp:null))
   (thing-type-name common-lisp:nil :type
    (common-lisp:or thing-type-name common-lisp:null))
   (attribute-payload common-lisp:nil :type
    (common-lisp:or attribute-payload common-lisp:null))
   (expected-version common-lisp:nil :type
    (common-lisp:or optional-version common-lisp:null))
   (remove-thing-type common-lisp:nil :type
    (common-lisp:or remove-thing-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-thing-request 'make-update-thing-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape update-thing-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thingName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-name)))
    (aws-sdk/generator/shape::to-query-params "thingTypeName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'thing-type-name)))
    (aws-sdk/generator/shape::to-query-params "attributePayload"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attribute-payload)))
    (aws-sdk/generator/shape::to-query-params "expectedVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'expected-version)))
    (aws-sdk/generator/shape::to-query-params "removeThingType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'remove-thing-type))))))
(common-lisp:progn
 (common-lisp:defstruct (update-thing-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-thing-response 'make-update-thing-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-thing-response))
   (common-lisp:append)))
(common-lisp:deftype use-base64 () 'common-lisp:boolean)
(common-lisp:deftype version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (version-conflict-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'version-conflict-exception
                    'make-version-conflict-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          version-conflict-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (versions-limit-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'versions-limit-exceeded-exception
                    'make-versions-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          versions-limit-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:deftype |resourceArn| () 'common-lisp:string)
(common-lisp:deftype |resourceId| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun accept-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id set-as-active)
   (common-lisp:declare (common-lisp:ignorable certificate-id set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-accept-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :patch :path
                               (common-lisp:format common-lisp:nil
                                                   "/accept-certificate-transfer/~a"
                                                   certificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"AcceptCertificateTransfer")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'accept-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun attach-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name principal)
   (common-lisp:declare (common-lisp:ignorable policy-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-principal-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :put :path
                               (common-lisp:format common-lisp:nil
                                                   "/principal-policies/~a"
                                                   policyname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"AttachPrincipalPolicy")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'attach-principal-policy))
(common-lisp:progn
 (common-lisp:defun attach-thing-principal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name principal)
   (common-lisp:declare (common-lisp:ignorable thing-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-attach-thing-principal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :put :path
                               (common-lisp:format common-lisp:nil
                                                   "/things/~a/principals"
                                                   thingname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"AttachThingPrincipal")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "AttachThingPrincipalResponse" common-lisp:nil)))
 (common-lisp:export 'attach-thing-principal))
(common-lisp:progn
 (common-lisp:defun cancel-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-cancel-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :patch :path
                               (common-lisp:format common-lisp:nil
                                                   "/cancel-certificate-transfer/~a"
                                                   certificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"CancelCertificateTransfer")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'cancel-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun create-certificate-from-csr
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-signing-request
                     set-as-active)
   (common-lisp:declare
    (common-lisp:ignorable certificate-signing-request set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-certificate-from-csr-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateCertificateFromCsr")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateCertificateFromCsrResponse" common-lisp:nil)))
 (common-lisp:export 'create-certificate-from-csr))
(common-lisp:progn
 (common-lisp:defun create-keys-and-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key set-as-active)
   (common-lisp:declare (common-lisp:ignorable set-as-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-keys-and-certificate-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateKeysAndCertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateKeysAndCertificateResponse" common-lisp:nil)))
 (common-lisp:export 'create-keys-and-certificate))
(common-lisp:progn
 (common-lisp:defun create-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-document))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/policies/~a" policyname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"CreatePolicy")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreatePolicyResponse" common-lisp:nil)))
 (common-lisp:export 'create-policy))
(common-lisp:progn
 (common-lisp:defun create-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-document
                     set-as-default)
   (common-lisp:declare
    (common-lisp:ignorable policy-name policy-document set-as-default))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/policies/~a/version"
                                                   policyname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"CreatePolicyVersion")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreatePolicyVersionResponse" common-lisp:nil)))
 (common-lisp:export 'create-policy-version))
(common-lisp:progn
 (common-lisp:defun create-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-type-name
                     attribute-payload)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-type-name attribute-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :path
                               (common-lisp:format common-lisp:nil "/things/~a"
                                                   thingname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"CreateThing")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateThingResponse" common-lisp:nil)))
 (common-lisp:export 'create-thing))
(common-lisp:progn
 (common-lisp:defun create-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name thing-type-properties)
   (common-lisp:declare
    (common-lisp:ignorable thing-type-name thing-type-properties))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/thing-types/~a"
                                                   thingtypename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"CreateThingType")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateThingTypeResponse" common-lisp:nil)))
 (common-lisp:export 'create-thing-type))
(common-lisp:progn
 (common-lisp:defun create-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name topic-rule-payload)
   (common-lisp:declare (common-lisp:ignorable rule-name topic-rule-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :path
                               (common-lisp:format common-lisp:nil "/rules/~a"
                                                   rulename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"CreateTopicRule")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-topic-rule))
(common-lisp:progn
 (common-lisp:defun delete-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/cacertificate/~a"
                                                   cacertificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteCACertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteCACertificateResponse" common-lisp:nil)))
 (common-lisp:export 'delete-cacertificate))
(common-lisp:progn
 (common-lisp:defun delete-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/certificates/~a"
                                                   certificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteCertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-certificate))
(common-lisp:progn
 (common-lisp:defun delete-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/policies/~a" policyname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeletePolicy")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-policy))
(common-lisp:progn
 (common-lisp:defun delete-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/policies/~a/version/~a"
                                                   policyname policyversionid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeletePolicyVersion")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-policy-version))
(common-lisp:progn
 (common-lisp:defun delete-registration-code ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                             :method :delete :params
                             (common-lisp:cons "Action"
                                               "DeleteRegistrationCode"))
    "DeleteRegistrationCodeResponse" common-lisp:nil))
 (common-lisp:export 'delete-registration-code))
(common-lisp:progn
 (common-lisp:defun delete-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name expected-version)
   (common-lisp:declare (common-lisp:ignorable thing-name expected-version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil "/things/~a"
                                                   thingname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteThing")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteThingResponse" common-lisp:nil)))
 (common-lisp:export 'delete-thing))
(common-lisp:progn
 (common-lisp:defun delete-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name)
   (common-lisp:declare (common-lisp:ignorable thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/thing-types/~a"
                                                   thingtypename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteThingType")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteThingTypeResponse" common-lisp:nil)))
 (common-lisp:export 'delete-thing-type))
(common-lisp:progn
 (common-lisp:defun delete-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil "/rules/~a"
                                                   rulename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteTopicRule")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-topic-rule))
(common-lisp:progn
 (common-lisp:defun deprecate-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name undo-deprecate)
   (common-lisp:declare (common-lisp:ignorable thing-type-name undo-deprecate))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deprecate-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/thing-types/~a/deprecate"
                                                   thingtypename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeprecateThingType")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeprecateThingTypeResponse" common-lisp:nil)))
 (common-lisp:export 'deprecate-thing-type))
(common-lisp:progn
 (common-lisp:defun describe-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/cacertificate/~a"
                                                   cacertificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeCACertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeCACertificateResponse" common-lisp:nil)))
 (common-lisp:export 'describe-cacertificate))
(common-lisp:progn
 (common-lisp:defun describe-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id)
   (common-lisp:declare (common-lisp:ignorable certificate-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/certificates/~a"
                                                   certificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeCertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeCertificateResponse" common-lisp:nil)))
 (common-lisp:export 'describe-certificate))
(common-lisp:progn
 (common-lisp:defun describe-endpoint ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                             :method :get :params
                             (common-lisp:cons "Action" "DescribeEndpoint"))
    "DescribeEndpointResponse" common-lisp:nil))
 (common-lisp:export 'describe-endpoint))
(common-lisp:progn
 (common-lisp:defun describe-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name)
   (common-lisp:declare (common-lisp:ignorable thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil "/things/~a"
                                                   thingname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeThing")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeThingResponse" common-lisp:nil)))
 (common-lisp:export 'describe-thing))
(common-lisp:progn
 (common-lisp:defun describe-thing-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-type-name)
   (common-lisp:declare (common-lisp:ignorable thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-thing-type-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/thing-types/~a"
                                                   thingtypename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeThingType")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeThingTypeResponse" common-lisp:nil)))
 (common-lisp:export 'describe-thing-type))
(common-lisp:progn
 (common-lisp:defun detach-principal-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name principal)
   (common-lisp:declare (common-lisp:ignorable policy-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-principal-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/principal-policies/~a"
                                                   policyname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DetachPrincipalPolicy")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'detach-principal-policy))
(common-lisp:progn
 (common-lisp:defun detach-thing-principal
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name principal)
   (common-lisp:declare (common-lisp:ignorable thing-name principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detach-thing-principal-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/things/~a/principals"
                                                   thingname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DetachThingPrincipal")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DetachThingPrincipalResponse" common-lisp:nil)))
 (common-lisp:export 'detach-thing-principal))
(common-lisp:progn
 (common-lisp:defun disable-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/rules/~a/disable"
                                                   rulename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DisableTopicRule")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disable-topic-rule))
(common-lisp:progn
 (common-lisp:defun enable-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :path
                               (common-lisp:format common-lisp:nil
                                                   "/rules/~a/enable" rulename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"EnableTopicRule")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-topic-rule))
(common-lisp:progn
 (common-lisp:defun get-logging-options ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                             :method :get :params
                             (common-lisp:cons "Action" "GetLoggingOptions"))
    "GetLoggingOptionsResponse" common-lisp:nil))
 (common-lisp:export 'get-logging-options))
(common-lisp:progn
 (common-lisp:defun get-policy
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/policies/~a" policyname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetPolicy")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPolicyResponse" common-lisp:nil)))
 (common-lisp:export 'get-policy))
(common-lisp:progn
 (common-lisp:defun get-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-policy-version-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/policies/~a/version/~a"
                                                   policyname policyversionid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetPolicyVersion")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPolicyVersionResponse" common-lisp:nil)))
 (common-lisp:export 'get-policy-version))
(common-lisp:progn
 (common-lisp:defun get-registration-code ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                             :method :get :params
                             (common-lisp:cons "Action" "GetRegistrationCode"))
    "GetRegistrationCodeResponse" common-lisp:nil))
 (common-lisp:export 'get-registration-code))
(common-lisp:progn
 (common-lisp:defun get-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name)
   (common-lisp:declare (common-lisp:ignorable rule-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil "/rules/~a"
                                                   rulename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetTopicRule")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetTopicRuleResponse" common-lisp:nil)))
 (common-lisp:export 'get-topic-rule))
(common-lisp:progn
 (common-lisp:defun list-cacertificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-cacertificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListCACertificates")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListCACertificatesResponse" common-lisp:nil)))
 (common-lisp:export 'list-cacertificates))
(common-lisp:progn
 (common-lisp:defun list-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListCertificates")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListCertificatesResponse" common-lisp:nil)))
 (common-lisp:export 'list-certificates))
(common-lisp:progn
 (common-lisp:defun list-certificates-by-ca
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ca-certificate-id page-size marker
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable ca-certificate-id page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-certificates-by-carequest
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/certificates-by-ca/~a"
                                                   cacertificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ListCertificatesByCA")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListCertificatesByCAResponse" common-lisp:nil)))
 (common-lisp:export 'list-certificates-by-ca))
(common-lisp:progn
 (common-lisp:defun list-outgoing-certificates
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key page-size marker ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable page-size marker ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-list-outgoing-certificates-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListOutgoingCertificates")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListOutgoingCertificatesResponse" common-lisp:nil)))
 (common-lisp:export 'list-outgoing-certificates))
(common-lisp:progn
 (common-lisp:defun list-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker page-size ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListPolicies")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPoliciesResponse" common-lisp:nil)))
 (common-lisp:export 'list-policies))
(common-lisp:progn
 (common-lisp:defun list-policy-principals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name marker page-size
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable policy-name marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-principals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListPolicyPrincipals")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPolicyPrincipalsResponse" common-lisp:nil)))
 (common-lisp:export 'list-policy-principals))
(common-lisp:progn
 (common-lisp:defun list-policy-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name)
   (common-lisp:declare (common-lisp:ignorable policy-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-policy-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/policies/~a/version"
                                                   policyname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ListPolicyVersions")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPolicyVersionsResponse" common-lisp:nil)))
 (common-lisp:export 'list-policy-versions))
(common-lisp:progn
 (common-lisp:defun list-principal-policies
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key principal marker page-size
                     ascending-order)
   (common-lisp:declare
    (common-lisp:ignorable principal marker page-size ascending-order))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-principal-policies-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListPrincipalPolicies")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPrincipalPoliciesResponse" common-lisp:nil)))
 (common-lisp:export 'list-principal-policies))
(common-lisp:progn
 (common-lisp:defun list-principal-things
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results principal)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results principal))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-principal-things-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListPrincipalThings")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPrincipalThingsResponse" common-lisp:nil)))
 (common-lisp:export 'list-principal-things))
(common-lisp:progn
 (common-lisp:defun list-thing-principals
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name)
   (common-lisp:declare (common-lisp:ignorable thing-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-principals-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/things/~a/principals"
                                                   thingname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ListThingPrincipals")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListThingPrincipalsResponse" common-lisp:nil)))
 (common-lisp:export 'list-thing-principals))
(common-lisp:progn
 (common-lisp:defun list-thing-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results thing-type-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-thing-types-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListThingTypes")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListThingTypesResponse" common-lisp:nil)))
 (common-lisp:export 'list-thing-types))
(common-lisp:progn
 (common-lisp:defun list-things
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results attribute-name
                     attribute-value thing-type-name)
   (common-lisp:declare
    (common-lisp:ignorable next-token max-results attribute-name
     attribute-value thing-type-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-things-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListThings")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListThingsResponse" common-lisp:nil)))
 (common-lisp:export 'list-things))
(common-lisp:progn
 (common-lisp:defun list-topic-rules
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key topic max-results next-token
                     rule-disabled)
   (common-lisp:declare
    (common-lisp:ignorable topic max-results next-token rule-disabled))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-topic-rules-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListTopicRules")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListTopicRulesResponse" common-lisp:nil)))
 (common-lisp:export 'list-topic-rules))
(common-lisp:progn
 (common-lisp:defun register-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key ca-certificate verification-certificate
                     set-as-active allow-auto-registration)
   (common-lisp:declare
    (common-lisp:ignorable ca-certificate verification-certificate
     set-as-active allow-auto-registration))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"RegisterCACertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "RegisterCACertificateResponse" common-lisp:nil)))
 (common-lisp:export 'register-cacertificate))
(common-lisp:progn
 (common-lisp:defun register-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-pem ca-certificate-pem
                     set-as-active status)
   (common-lisp:declare
    (common-lisp:ignorable certificate-pem ca-certificate-pem set-as-active
     status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-register-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"RegisterCertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "RegisterCertificateResponse" common-lisp:nil)))
 (common-lisp:export 'register-certificate))
(common-lisp:progn
 (common-lisp:defun reject-certificate-transfer
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id reject-reason)
   (common-lisp:declare (common-lisp:ignorable certificate-id reject-reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-reject-certificate-transfer-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :patch :path
                               (common-lisp:format common-lisp:nil
                                                   "/reject-certificate-transfer/~a"
                                                   certificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"RejectCertificateTransfer")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'reject-certificate-transfer))
(common-lisp:progn
 (common-lisp:defun replace-topic-rule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key rule-name topic-rule-payload)
   (common-lisp:declare (common-lisp:ignorable rule-name topic-rule-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-replace-topic-rule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :patch :path
                               (common-lisp:format common-lisp:nil "/rules/~a"
                                                   rulename)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"ReplaceTopicRule")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'replace-topic-rule))
(common-lisp:progn
 (common-lisp:defun set-default-policy-version
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key policy-name policy-version-id)
   (common-lisp:declare (common-lisp:ignorable policy-name policy-version-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-set-default-policy-version-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :patch :path
                               (common-lisp:format common-lisp:nil
                                                   "/policies/~a/version/~a"
                                                   policyname policyversionid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"SetDefaultPolicyVersion")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'set-default-policy-version))
(common-lisp:progn
 (common-lisp:defun set-logging-options
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key logging-options-payload)
   (common-lisp:declare (common-lisp:ignorable logging-options-payload))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-logging-options-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SetLoggingOptions")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'set-logging-options))
(common-lisp:progn
 (common-lisp:defun transfer-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id target-aws-account
                     transfer-message)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id target-aws-account transfer-message))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-transfer-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :patch :path
                               (common-lisp:format common-lisp:nil
                                                   "/transfer-certificate/~a"
                                                   certificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"TransferCertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "TransferCertificateResponse" common-lisp:nil)))
 (common-lisp:export 'transfer-certificate))
(common-lisp:progn
 (common-lisp:defun update-cacertificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id new-status
                     new-auto-registration-status)
   (common-lisp:declare
    (common-lisp:ignorable certificate-id new-status
     new-auto-registration-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-cacertificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :put :path
                               (common-lisp:format common-lisp:nil
                                                   "/cacertificate/~a"
                                                   cacertificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateCACertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-cacertificate))
(common-lisp:progn
 (common-lisp:defun update-certificate
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key certificate-id new-status)
   (common-lisp:declare (common-lisp:ignorable certificate-id new-status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-certificate-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :put :path
                               (common-lisp:format common-lisp:nil
                                                   "/certificates/~a"
                                                   certificateid)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateCertificate")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'update-certificate))
(common-lisp:progn
 (common-lisp:defun update-thing
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key thing-name thing-type-name
                     attribute-payload expected-version remove-thing-type)
   (common-lisp:declare
    (common-lisp:ignorable thing-name thing-type-name attribute-payload
     expected-version remove-thing-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-thing-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((3) common-lisp:base-char . "iot")
                               :method :patch :path
                               (common-lisp:format common-lisp:nil "/things/~a"
                                                   thingname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateThing")
                                  ("Version" ,@"2015-05-28"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateThingResponse" common-lisp:nil)))
 (common-lisp:export 'update-thing))