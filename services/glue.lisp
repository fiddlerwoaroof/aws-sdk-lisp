;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/glue
  (:use)
  (:nicknames #:aws/glue)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/glue)

(common-lisp:progn
 (common-lisp:defstruct (access-denied-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'make-access-denied-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          access-denied-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (action (:copier common-lisp:nil))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action 'make-action))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name)))
    (aws-sdk/generator/shape::to-query-params "Arguments"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arguments))))))
(common-lisp:progn
 (common-lisp:deftype action-list () '(trivial-types:proper-list action))
 (common-lisp:defun |make-action-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (already-exists-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'already-exists-exception 'make-already-exists-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          already-exists-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype attempt-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-partition-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (partition-input-list
    (common-lisp:error
     #A((33) common-lisp:base-char . ":partition-input-list is required"))
    :type (common-lisp:or partition-input-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-partition-request
                    'make-batch-create-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-create-partition-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "PartitionInputList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-input-list))))))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-create-partition-response (:copier common-lisp:nil))
   (errors common-lisp:nil :type
    (common-lisp:or partition-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-create-partition-response
                    'make-batch-create-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-create-partition-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Errors"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'errors))))))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-connection-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (connection-name-list
    (common-lisp:error
     #A((33) common-lisp:base-char . ":connection-name-list is required"))
    :type (common-lisp:or delete-connection-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-connection-request
                    'make-batch-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-delete-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "ConnectionNameList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-name-list))))))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-connection-response (:copier common-lisp:nil))
   (succeeded common-lisp:nil :type
    (common-lisp:or name-string-list common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or error-by-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-connection-response
                    'make-batch-delete-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-delete-connection-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Succeeded"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'succeeded)))
    (aws-sdk/generator/shape::to-query-params "Errors"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'errors))))))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-partition-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (partitions-to-delete
    (common-lisp:error
     #A((33) common-lisp:base-char . ":partitions-to-delete is required"))
    :type (common-lisp:or batch-delete-partition-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-partition-request
                    'make-batch-delete-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-delete-partition-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "PartitionsToDelete"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partitions-to-delete))))))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-delete-partition-response (:copier common-lisp:nil))
   (errors common-lisp:nil :type
    (common-lisp:or partition-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-partition-response
                    'make-batch-delete-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-delete-partition-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Errors"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'errors))))))
(common-lisp:progn
 (common-lisp:deftype batch-delete-partition-value-list ()
   '(trivial-types:proper-list partition-value-list))
 (common-lisp:defun |make-batch-delete-partition-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-list))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype batch-delete-table-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-batch-delete-table-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (batch-delete-table-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (tables-to-delete
    (common-lisp:error
     #A((29) common-lisp:base-char . ":tables-to-delete is required"))
    :type (common-lisp:or batch-delete-table-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-request
                    'make-batch-delete-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-delete-table-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TablesToDelete"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tables-to-delete))))))
(common-lisp:progn
 (common-lisp:defstruct (batch-delete-table-response (:copier common-lisp:nil))
   (errors common-lisp:nil :type
    (common-lisp:or table-errors common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-delete-table-response
                    'make-batch-delete-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-delete-table-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Errors"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'errors))))))
(common-lisp:progn
 (common-lisp:defstruct (batch-get-partition-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (partitions-to-get
    (common-lisp:error
     #A((30) common-lisp:base-char . ":partitions-to-get is required"))
    :type (common-lisp:or batch-get-partition-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-partition-request
                    'make-batch-get-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-get-partition-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "PartitionsToGet"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partitions-to-get))))))
(common-lisp:progn
 (common-lisp:defstruct
     (batch-get-partition-response (:copier common-lisp:nil))
   (partitions common-lisp:nil :type
    (common-lisp:or partition-list common-lisp:null))
   (unprocessed-keys common-lisp:nil :type
    (common-lisp:or batch-get-partition-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'batch-get-partition-response
                    'make-batch-get-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          batch-get-partition-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Partitions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partitions)))
    (aws-sdk/generator/shape::to-query-params "UnprocessedKeys"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'unprocessed-keys))))))
(common-lisp:progn
 (common-lisp:deftype batch-get-partition-value-list ()
   '(trivial-types:proper-list partition-value-list))
 (common-lisp:defun |make-batch-get-partition-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-value-list))
   aws-sdk/generator/shape::members))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype boolean-value () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:deftype bounded-partition-value-list ()
   '(trivial-types:proper-list value-string))
 (common-lisp:defun |make-bounded-partition-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype catalog-entries ()
   '(trivial-types:proper-list catalog-entry))
 (common-lisp:defun |make-catalog-entries|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list catalog-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (catalog-entry (:copier common-lisp:nil))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'catalog-entry 'make-catalog-entry))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape catalog-entry))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name))))))
(common-lisp:deftype catalog-id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (catalog-import-status (:copier common-lisp:nil))
   (import-completed common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (import-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (imported-by common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'catalog-import-status 'make-catalog-import-status))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          catalog-import-status))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ImportCompleted"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'import-completed)))
    (aws-sdk/generator/shape::to-query-params "ImportTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'import-time)))
    (aws-sdk/generator/shape::to-query-params "ImportedBy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'imported-by))))))
(common-lisp:deftype classification () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (classifier (:copier common-lisp:nil))
   (grok-classifier common-lisp:nil :type
    (common-lisp:or grok-classifier common-lisp:null)))
 (common-lisp:export (common-lisp:list 'classifier 'make-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape classifier))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GrokClassifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'grok-classifier))))))
(common-lisp:progn
 (common-lisp:deftype classifier-list ()
   '(trivial-types:proper-list classifier))
 (common-lisp:defun |make-classifier-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list classifier))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype classifier-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-classifier-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype code-gen-arg-name () 'common-lisp:string)
(common-lisp:deftype code-gen-arg-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (code-gen-edge (:copier common-lisp:nil))
   (source
    (common-lisp:error #A((19) common-lisp:base-char . ":source is required"))
    :type (common-lisp:or code-gen-identifier common-lisp:null))
   (target
    (common-lisp:error #A((19) common-lisp:base-char . ":target is required"))
    :type (common-lisp:or code-gen-identifier common-lisp:null))
   (target-parameter common-lisp:nil :type
    (common-lisp:or code-gen-arg-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-gen-edge 'make-code-gen-edge))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape code-gen-edge))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Source"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source)))
    (aws-sdk/generator/shape::to-query-params "Target"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target)))
    (aws-sdk/generator/shape::to-query-params "TargetParameter"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target-parameter))))))
(common-lisp:deftype code-gen-identifier () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (code-gen-node (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or code-gen-identifier common-lisp:null))
   (node-type
    (common-lisp:error
     #A((22) common-lisp:base-char . ":node-type is required"))
    :type (common-lisp:or code-gen-node-type common-lisp:null))
   (args
    (common-lisp:error #A((17) common-lisp:base-char . ":args is required"))
    :type (common-lisp:or code-gen-node-args common-lisp:null))
   (line-number common-lisp:nil :type
    (common-lisp:or integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'code-gen-node 'make-code-gen-node))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape code-gen-node))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "NodeType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'node-type)))
    (aws-sdk/generator/shape::to-query-params "Args"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'args)))
    (aws-sdk/generator/shape::to-query-params "LineNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'line-number))))))
(common-lisp:progn
 (common-lisp:defstruct (code-gen-node-arg (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or code-gen-arg-name common-lisp:null))
   (value
    (common-lisp:error #A((18) common-lisp:base-char . ":value is required"))
    :type (common-lisp:or code-gen-arg-value common-lisp:null))
   (param common-lisp:nil :type (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'code-gen-node-arg 'make-code-gen-node-arg))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape code-gen-node-arg))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value)))
    (aws-sdk/generator/shape::to-query-params "Param"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'param))))))
(common-lisp:progn
 (common-lisp:deftype code-gen-node-args ()
   '(trivial-types:proper-list code-gen-node-arg))
 (common-lisp:defun |make-code-gen-node-args|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-gen-node-arg))
   aws-sdk/generator/shape::members))
(common-lisp:deftype code-gen-node-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (column (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or column-type-string common-lisp:null))
   (comment common-lisp:nil :type
    (common-lisp:or comment-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'column 'make-column))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape column))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "Comment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'comment))))))
(common-lisp:progn
 (common-lisp:deftype column-list () '(trivial-types:proper-list column))
 (common-lisp:defun |make-column-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype column-value-string-list ()
   '(trivial-types:proper-list column-values-string))
 (common-lisp:defun |make-column-value-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list column-values-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype column-values-string () 'common-lisp:string)
(common-lisp:deftype comment-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (concurrent-modification-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'concurrent-modification-exception
                    'make-concurrent-modification-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          concurrent-modification-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (concurrent-runs-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'concurrent-runs-exceeded-exception
                    'make-concurrent-runs-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          concurrent-runs-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (condition (:copier common-lisp:nil))
   (logical-operator common-lisp:nil :type
    (common-lisp:or logical-operator common-lisp:null))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or job-run-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'condition 'make-condition))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape condition))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "LogicalOperator"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'logical-operator)))
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name)))
    (aws-sdk/generator/shape::to-query-params "State"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'state))))))
(common-lisp:progn
 (common-lisp:deftype condition-list () '(trivial-types:proper-list condition))
 (common-lisp:defun |make-condition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list condition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (connection (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (connection-type common-lisp:nil :type
    (common-lisp:or connection-type common-lisp:null))
   (match-criteria common-lisp:nil :type
    (common-lisp:or match-criteria common-lisp:null))
   (connection-properties common-lisp:nil :type
    (common-lisp:or connection-properties common-lisp:null))
   (physical-connection-requirements common-lisp:nil :type
    (common-lisp:or physical-connection-requirements common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'connection 'make-connection))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape connection))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "ConnectionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-type)))
    (aws-sdk/generator/shape::to-query-params "MatchCriteria"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'match-criteria)))
    (aws-sdk/generator/shape::to-query-params "ConnectionProperties"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-properties)))
    (aws-sdk/generator/shape::to-query-params "PhysicalConnectionRequirements"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'physical-connection-requirements)))
    (aws-sdk/generator/shape::to-query-params "CreationTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-time)))
    (aws-sdk/generator/shape::to-query-params "LastUpdatedTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-updated-time)))
    (aws-sdk/generator/shape::to-query-params "LastUpdatedBy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-updated-by))))))
(common-lisp:progn
 (common-lisp:defstruct (connection-input (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (connection-type common-lisp:nil :type
    (common-lisp:or connection-type common-lisp:null))
   (match-criteria common-lisp:nil :type
    (common-lisp:or match-criteria common-lisp:null))
   (connection-properties common-lisp:nil :type
    (common-lisp:or connection-properties common-lisp:null))
   (physical-connection-requirements common-lisp:nil :type
    (common-lisp:or physical-connection-requirements common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connection-input 'make-connection-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape connection-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "ConnectionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-type)))
    (aws-sdk/generator/shape::to-query-params "MatchCriteria"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'match-criteria)))
    (aws-sdk/generator/shape::to-query-params "ConnectionProperties"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-properties)))
    (aws-sdk/generator/shape::to-query-params "PhysicalConnectionRequirements"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'physical-connection-requirements))))))
(common-lisp:progn
 (common-lisp:deftype connection-list ()
   '(trivial-types:proper-list connection))
 (common-lisp:defun |make-connection-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list connection))
   aws-sdk/generator/shape::members))
(common-lisp:deftype connection-name () 'common-lisp:string)
(common-lisp:defstruct
    (connection-properties
     (:constructor |make-connection-properties|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:deftype connection-property-key () 'common-lisp:string)
(common-lisp:deftype connection-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (connections-list (:copier common-lisp:nil))
   (connections common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'connections-list 'make-connections-list))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape connections-list))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Connections"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connections))))))
(common-lisp:progn
 (common-lisp:defstruct (crawler (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or crawler-targets common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or database-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (classifiers common-lisp:nil :type
    (common-lisp:or classifier-name-list common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or schema-change-policy common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or crawler-state common-lisp:null))
   (table-prefix common-lisp:nil :type
    (common-lisp:or table-prefix common-lisp:null))
   (schedule common-lisp:nil :type (common-lisp:or schedule common-lisp:null))
   (crawl-elapsed-time common-lisp:nil :type
    (common-lisp:or milliseconds-count common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-crawl common-lisp:nil :type
    (common-lisp:or last-crawl-info common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or version-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'crawler 'make-crawler))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape crawler))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role)))
    (aws-sdk/generator/shape::to-query-params "Targets"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'targets)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "Classifiers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'classifiers)))
    (aws-sdk/generator/shape::to-query-params "SchemaChangePolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schema-change-policy)))
    (aws-sdk/generator/shape::to-query-params "State"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'state)))
    (aws-sdk/generator/shape::to-query-params "TablePrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-prefix)))
    (aws-sdk/generator/shape::to-query-params "Schedule"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schedule)))
    (aws-sdk/generator/shape::to-query-params "CrawlElapsedTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'crawl-elapsed-time)))
    (aws-sdk/generator/shape::to-query-params "CreationTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-time)))
    (aws-sdk/generator/shape::to-query-params "LastUpdated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-updated)))
    (aws-sdk/generator/shape::to-query-params "LastCrawl"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-crawl)))
    (aws-sdk/generator/shape::to-query-params "Version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:deftype crawler-list () '(trivial-types:proper-list crawler))
 (common-lisp:defun |make-crawler-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawler))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (crawler-metrics (:copier common-lisp:nil))
   (crawler-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (time-left-seconds common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null))
   (still-estimating common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (last-runtime-seconds common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null))
   (median-runtime-seconds common-lisp:nil :type
    (common-lisp:or non-negative-double common-lisp:null))
   (tables-created common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (tables-updated common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (tables-deleted common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'crawler-metrics 'make-crawler-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape crawler-metrics))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CrawlerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'crawler-name)))
    (aws-sdk/generator/shape::to-query-params "TimeLeftSeconds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'time-left-seconds)))
    (aws-sdk/generator/shape::to-query-params "StillEstimating"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'still-estimating)))
    (aws-sdk/generator/shape::to-query-params "LastRuntimeSeconds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-runtime-seconds)))
    (aws-sdk/generator/shape::to-query-params "MedianRuntimeSeconds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'median-runtime-seconds)))
    (aws-sdk/generator/shape::to-query-params "TablesCreated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tables-created)))
    (aws-sdk/generator/shape::to-query-params "TablesUpdated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tables-updated)))
    (aws-sdk/generator/shape::to-query-params "TablesDeleted"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tables-deleted))))))
(common-lisp:progn
 (common-lisp:deftype crawler-metrics-list ()
   '(trivial-types:proper-list crawler-metrics))
 (common-lisp:defun |make-crawler-metrics-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list crawler-metrics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype crawler-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-crawler-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (crawler-not-running-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'crawler-not-running-exception
                    'make-crawler-not-running-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          crawler-not-running-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (crawler-running-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'crawler-running-exception
                    'make-crawler-running-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          crawler-running-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype crawler-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (crawler-stopping-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'crawler-stopping-exception
                    'make-crawler-stopping-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          crawler-stopping-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (crawler-targets (:copier common-lisp:nil))
   (s3targets common-lisp:nil :type
    (common-lisp:or s3target-list common-lisp:null))
   (jdbc-targets common-lisp:nil :type
    (common-lisp:or jdbc-target-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'crawler-targets 'make-crawler-targets))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape crawler-targets))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "S3Targets"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                's3targets)))
    (aws-sdk/generator/shape::to-query-params "JdbcTargets"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'jdbc-targets))))))
(common-lisp:progn
 (common-lisp:defstruct (create-classifier-request (:copier common-lisp:nil))
   (grok-classifier common-lisp:nil :type
    (common-lisp:or create-grok-classifier-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-classifier-request
                    'make-create-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-classifier-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GrokClassifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'grok-classifier))))))
(common-lisp:progn
 (common-lisp:defstruct (create-classifier-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-classifier-response
                    'make-create-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-classifier-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (create-connection-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (connection-input
    (common-lisp:error
     #A((29) common-lisp:base-char . ":connection-input is required"))
    :type (common-lisp:or connection-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-connection-request
                    'make-create-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "ConnectionInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-input))))))
(common-lisp:progn
 (common-lisp:defstruct (create-connection-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-connection-response
                    'make-create-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-connection-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (create-crawler-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (role
    (common-lisp:error #A((17) common-lisp:base-char . ":role is required"))
    :type (common-lisp:or role-arn common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or database-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (targets
    (common-lisp:error #A((20) common-lisp:base-char . ":targets is required"))
    :type (common-lisp:or crawler-targets common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or cron-expression common-lisp:null))
   (classifiers common-lisp:nil :type
    (common-lisp:or classifier-name-list common-lisp:null))
   (table-prefix common-lisp:nil :type
    (common-lisp:or table-prefix common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or schema-change-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-crawler-request 'make-create-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-crawler-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "Targets"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'targets)))
    (aws-sdk/generator/shape::to-query-params "Schedule"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schedule)))
    (aws-sdk/generator/shape::to-query-params "Classifiers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'classifiers)))
    (aws-sdk/generator/shape::to-query-params "TablePrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-prefix)))
    (aws-sdk/generator/shape::to-query-params "SchemaChangePolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schema-change-policy))))))
(common-lisp:progn
 (common-lisp:defstruct (create-crawler-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-crawler-response 'make-create-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-crawler-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (create-database-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-input
    (common-lisp:error
     #A((27) common-lisp:base-char . ":database-input is required"))
    :type (common-lisp:or database-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-database-request 'make-create-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-database-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-input))))))
(common-lisp:progn
 (common-lisp:defstruct (create-database-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-database-response 'make-create-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-database-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (create-dev-endpoint-request (:copier common-lisp:nil))
   (endpoint-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":endpoint-name is required"))
    :type (common-lisp:or generic-string common-lisp:null))
   (role-arn
    (common-lisp:error
     #A((21) common-lisp:base-char . ":role-arn is required"))
    :type (common-lisp:or role-arn common-lisp:null))
   (security-group-ids
    (common-lisp:error
     #A((31) common-lisp:base-char . ":security-group-ids is required"))
    :type (common-lisp:or string-list common-lisp:null))
   (subnet-id
    (common-lisp:error
     #A((22) common-lisp:base-char . ":subnet-id is required"))
    :type (common-lisp:or generic-string common-lisp:null))
   (public-key common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (extra-python-libs-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-jars-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dev-endpoint-request
                    'make-create-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-dev-endpoint-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EndpointName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'endpoint-name)))
    (aws-sdk/generator/shape::to-query-params "RoleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "SecurityGroupIds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'security-group-ids)))
    (aws-sdk/generator/shape::to-query-params "SubnetId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'subnet-id)))
    (aws-sdk/generator/shape::to-query-params "PublicKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'public-key)))
    (aws-sdk/generator/shape::to-query-params "NumberOfNodes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'number-of-nodes)))
    (aws-sdk/generator/shape::to-query-params "ExtraPythonLibsS3Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'extra-python-libs-s3path)))
    (aws-sdk/generator/shape::to-query-params "ExtraJarsS3Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'extra-jars-s3path))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-dev-endpoint-response (:copier common-lisp:nil))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (yarn-endpoint-address common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-python-libs-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-jars-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-dev-endpoint-response
                    'make-create-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-dev-endpoint-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EndpointName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'endpoint-name)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "SecurityGroupIds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'security-group-ids)))
    (aws-sdk/generator/shape::to-query-params "SubnetId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'subnet-id)))
    (aws-sdk/generator/shape::to-query-params "RoleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "YarnEndpointAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'yarn-endpoint-address)))
    (aws-sdk/generator/shape::to-query-params "NumberOfNodes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'number-of-nodes)))
    (aws-sdk/generator/shape::to-query-params "AvailabilityZone"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'availability-zone)))
    (aws-sdk/generator/shape::to-query-params "VpcId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpc-id)))
    (aws-sdk/generator/shape::to-query-params "ExtraPythonLibsS3Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'extra-python-libs-s3path)))
    (aws-sdk/generator/shape::to-query-params "ExtraJarsS3Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'extra-jars-s3path)))
    (aws-sdk/generator/shape::to-query-params "FailureReason"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'failure-reason)))
    (aws-sdk/generator/shape::to-query-params "CreatedTimestamp"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created-timestamp))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-grok-classifier-request (:copier common-lisp:nil))
   (classification
    (common-lisp:error
     #A((27) common-lisp:base-char . ":classification is required"))
    :type (common-lisp:or classification common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (grok-pattern
    (common-lisp:error
     #A((25) common-lisp:base-char . ":grok-pattern is required"))
    :type (common-lisp:or grok-pattern common-lisp:null))
   (custom-patterns common-lisp:nil :type
    (common-lisp:or custom-patterns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-grok-classifier-request
                    'make-create-grok-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-grok-classifier-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Classification"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'classification)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "GrokPattern"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'grok-pattern)))
    (aws-sdk/generator/shape::to-query-params "CustomPatterns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'custom-patterns))))))
(common-lisp:progn
 (common-lisp:defstruct (create-job-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-uri common-lisp:nil :type (common-lisp:or uri-string common-lisp:null))
   (role
    (common-lisp:error #A((17) common-lisp:base-char . ":role is required"))
    :type (common-lisp:or role-string common-lisp:null))
   (execution-property common-lisp:nil :type
    (common-lisp:or execution-property common-lisp:null))
   (command
    (common-lisp:error #A((20) common-lisp:base-char . ":command is required"))
    :type (common-lisp:or job-command common-lisp:null))
   (default-arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connections-list common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or max-retries common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-request 'make-create-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-job-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "LogUri"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'log-uri)))
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role)))
    (aws-sdk/generator/shape::to-query-params "ExecutionProperty"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'execution-property)))
    (aws-sdk/generator/shape::to-query-params "Command"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'command)))
    (aws-sdk/generator/shape::to-query-params "DefaultArguments"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'default-arguments)))
    (aws-sdk/generator/shape::to-query-params "Connections"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connections)))
    (aws-sdk/generator/shape::to-query-params "MaxRetries"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-retries)))
    (aws-sdk/generator/shape::to-query-params "AllocatedCapacity"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allocated-capacity))))))
(common-lisp:progn
 (common-lisp:defstruct (create-job-response (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-job-response 'make-create-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-job-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (create-partition-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (partition-input
    (common-lisp:error
     #A((28) common-lisp:base-char . ":partition-input is required"))
    :type (common-lisp:or partition-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-partition-request 'make-create-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-partition-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "PartitionInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-input))))))
(common-lisp:progn
 (common-lisp:defstruct (create-partition-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-partition-response
                    'make-create-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-partition-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (create-script-request (:copier common-lisp:nil))
   (dag-nodes common-lisp:nil :type
    (common-lisp:or dag-nodes common-lisp:null))
   (dag-edges common-lisp:nil :type
    (common-lisp:or dag-edges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-script-request 'make-create-script-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-script-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DagNodes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dag-nodes)))
    (aws-sdk/generator/shape::to-query-params "DagEdges"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dag-edges))))))
(common-lisp:progn
 (common-lisp:defstruct (create-script-response (:copier common-lisp:nil))
   (python-script common-lisp:nil :type
    (common-lisp:or python-script common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-script-response 'make-create-script-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-script-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PythonScript"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'python-script))))))
(common-lisp:progn
 (common-lisp:defstruct (create-table-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-input
    (common-lisp:error
     #A((24) common-lisp:base-char . ":table-input is required"))
    :type (common-lisp:or table-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-table-request 'make-create-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-table-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-input))))))
(common-lisp:progn
 (common-lisp:defstruct (create-table-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-table-response 'make-create-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-table-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (create-trigger-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or trigger-type common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (predicate common-lisp:nil :type
    (common-lisp:or predicate common-lisp:null))
   (actions
    (common-lisp:error #A((20) common-lisp:base-char . ":actions is required"))
    :type (common-lisp:or action-list common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trigger-request 'make-create-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-trigger-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "Schedule"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schedule)))
    (aws-sdk/generator/shape::to-query-params "Predicate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'predicate)))
    (aws-sdk/generator/shape::to-query-params "Actions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'actions)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description))))))
(common-lisp:progn
 (common-lisp:defstruct (create-trigger-response (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-trigger-response 'make-create-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-trigger-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-defined-function-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (function-input
    (common-lisp:error
     #A((27) common-lisp:base-char . ":function-input is required"))
    :type (common-lisp:or user-defined-function-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-user-defined-function-request
                    'make-create-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-user-defined-function-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "FunctionInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'function-input))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-user-defined-function-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'create-user-defined-function-response
                    'make-create-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-user-defined-function-response))
   (common-lisp:append)))
(common-lisp:deftype cron-expression () 'common-lisp:string)
(common-lisp:deftype custom-patterns () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype dag-edges () '(trivial-types:proper-list code-gen-edge))
 (common-lisp:defun |make-dag-edges|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-gen-edge))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype dag-nodes () '(trivial-types:proper-list code-gen-node))
 (common-lisp:defun |make-dag-nodes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list code-gen-node))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (database (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (location-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'database 'make-database))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape database))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "LocationUri"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location-uri)))
    (aws-sdk/generator/shape::to-query-params "Parameters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameters)))
    (aws-sdk/generator/shape::to-query-params "CreateTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-time))))))
(common-lisp:progn
 (common-lisp:defstruct (database-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (location-uri common-lisp:nil :type (common-lisp:or uri common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'database-input 'make-database-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape database-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "LocationUri"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location-uri)))
    (aws-sdk/generator/shape::to-query-params "Parameters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameters))))))
(common-lisp:progn
 (common-lisp:deftype database-list () '(trivial-types:proper-list database))
 (common-lisp:defun |make-database-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list database))
   aws-sdk/generator/shape::members))
(common-lisp:deftype database-name () 'common-lisp:string)
(common-lisp:deftype delete-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (delete-classifier-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-classifier-request
                    'make-delete-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-classifier-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-classifier-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-classifier-response
                    'make-delete-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-classifier-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:deftype delete-connection-name-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-delete-connection-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (delete-connection-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (connection-name
    (common-lisp:error
     #A((28) common-lisp:base-char . ":connection-name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-connection-request
                    'make-delete-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "ConnectionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-connection-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-connection-response
                    'make-delete-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-connection-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-crawler-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-crawler-request 'make-delete-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-crawler-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-crawler-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-crawler-response 'make-delete-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-crawler-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-database-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-database-request 'make-delete-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-database-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-database-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-database-response 'make-delete-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-database-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-dev-endpoint-request (:copier common-lisp:nil))
   (endpoint-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":endpoint-name is required"))
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-dev-endpoint-request
                    'make-delete-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-dev-endpoint-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EndpointName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'endpoint-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-dev-endpoint-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-dev-endpoint-response
                    'make-delete-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-dev-endpoint-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-job-request (:copier common-lisp:nil))
   (job-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":job-name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-request 'make-delete-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-job-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-job-response (:copier common-lisp:nil))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-job-response 'make-delete-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-job-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-partition-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (partition-values
    (common-lisp:error
     #A((29) common-lisp:base-char . ":partition-values is required"))
    :type (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-partition-request 'make-delete-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-partition-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "PartitionValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-values))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-partition-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-partition-response
                    'make-delete-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-partition-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-table-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-table-request 'make-delete-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-table-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-table-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-table-response 'make-delete-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-table-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-trigger-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trigger-request 'make-delete-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-trigger-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-trigger-response (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-trigger-response 'make-delete-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-trigger-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-defined-function-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (function-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":function-name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-user-defined-function-request
                    'make-delete-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-user-defined-function-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "FunctionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'function-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-user-defined-function-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-user-defined-function-response
                    'make-delete-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-user-defined-function-response))
   (common-lisp:append)))
(common-lisp:deftype description-string () 'common-lisp:string)
(common-lisp:deftype description-string-removable () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (dev-endpoint (:copier common-lisp:nil))
   (endpoint-name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (security-group-ids common-lisp:nil :type
    (common-lisp:or string-list common-lisp:null))
   (subnet-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (yarn-endpoint-address common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (public-address common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (number-of-nodes common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (vpc-id common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-python-libs-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-jars-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (failure-reason common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (last-update-status common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (created-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (last-modified-timestamp common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (public-key common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'dev-endpoint 'make-dev-endpoint))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape dev-endpoint))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EndpointName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'endpoint-name)))
    (aws-sdk/generator/shape::to-query-params "RoleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "SecurityGroupIds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'security-group-ids)))
    (aws-sdk/generator/shape::to-query-params "SubnetId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'subnet-id)))
    (aws-sdk/generator/shape::to-query-params "YarnEndpointAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'yarn-endpoint-address)))
    (aws-sdk/generator/shape::to-query-params "PublicAddress"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'public-address)))
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "NumberOfNodes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'number-of-nodes)))
    (aws-sdk/generator/shape::to-query-params "AvailabilityZone"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'availability-zone)))
    (aws-sdk/generator/shape::to-query-params "VpcId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'vpc-id)))
    (aws-sdk/generator/shape::to-query-params "ExtraPythonLibsS3Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'extra-python-libs-s3path)))
    (aws-sdk/generator/shape::to-query-params "ExtraJarsS3Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'extra-jars-s3path)))
    (aws-sdk/generator/shape::to-query-params "FailureReason"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'failure-reason)))
    (aws-sdk/generator/shape::to-query-params "LastUpdateStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-update-status)))
    (aws-sdk/generator/shape::to-query-params "CreatedTimestamp"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created-timestamp)))
    (aws-sdk/generator/shape::to-query-params "LastModifiedTimestamp"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-modified-timestamp)))
    (aws-sdk/generator/shape::to-query-params "PublicKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'public-key))))))
(common-lisp:progn
 (common-lisp:defstruct
     (dev-endpoint-custom-libraries (:copier common-lisp:nil))
   (extra-python-libs-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (extra-jars-s3path common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'dev-endpoint-custom-libraries
                    'make-dev-endpoint-custom-libraries))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          dev-endpoint-custom-libraries))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ExtraPythonLibsS3Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'extra-python-libs-s3path)))
    (aws-sdk/generator/shape::to-query-params "ExtraJarsS3Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'extra-jars-s3path))))))
(common-lisp:progn
 (common-lisp:deftype dev-endpoint-list ()
   '(trivial-types:proper-list dev-endpoint))
 (common-lisp:defun |make-dev-endpoint-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list dev-endpoint))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (entity-not-found-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'entity-not-found-exception
                    'make-entity-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          entity-not-found-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:defstruct
    (error-by-name
     (:constructor |make-error-by-name|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:progn
 (common-lisp:defstruct (error-detail (:copier common-lisp:nil))
   (error-code common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-detail 'make-error-detail))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape error-detail))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ErrorCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-code)))
    (aws-sdk/generator/shape::to-query-params "ErrorMessage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-message))))))
(common-lisp:deftype error-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (execution-property (:copier common-lisp:nil))
   (max-concurrent-runs common-lisp:nil :type
    (common-lisp:or max-concurrent-runs common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-property 'make-execution-property))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape execution-property))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "MaxConcurrentRuns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-concurrent-runs))))))
(common-lisp:deftype field-type () 'common-lisp:string)
(common-lisp:deftype filter-string () 'common-lisp:string)
(common-lisp:deftype format-string () 'common-lisp:string)
(common-lisp:defstruct
    (generic-map
     (:constructor |make-generic-map|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:deftype generic-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (get-catalog-import-status-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-catalog-import-status-request
                    'make-get-catalog-import-status-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-catalog-import-status-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-catalog-import-status-response (:copier common-lisp:nil))
   (import-status common-lisp:nil :type
    (common-lisp:or catalog-import-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-catalog-import-status-response
                    'make-get-catalog-import-status-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-catalog-import-status-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ImportStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'import-status))))))
(common-lisp:progn
 (common-lisp:defstruct (get-classifier-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classifier-request 'make-get-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-classifier-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-classifier-response (:copier common-lisp:nil))
   (classifier common-lisp:nil :type
    (common-lisp:or classifier common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classifier-response 'make-get-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-classifier-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Classifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'classifier))))))
(common-lisp:progn
 (common-lisp:defstruct (get-classifiers-request (:copier common-lisp:nil))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classifiers-request 'make-get-classifiers-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-classifiers-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-classifiers-response (:copier common-lisp:nil))
   (classifiers common-lisp:nil :type
    (common-lisp:or classifier-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-classifiers-response 'make-get-classifiers-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-classifiers-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Classifiers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'classifiers)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-connection-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connection-request 'make-get-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-connection-response (:copier common-lisp:nil))
   (connection common-lisp:nil :type
    (common-lisp:or connection common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connection-response 'make-get-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-connection-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Connection"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection))))))
(common-lisp:progn
 (common-lisp:defstruct (get-connections-filter (:copier common-lisp:nil))
   (match-criteria common-lisp:nil :type
    (common-lisp:or match-criteria common-lisp:null))
   (connection-type common-lisp:nil :type
    (common-lisp:or connection-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connections-filter 'make-get-connections-filter))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-connections-filter))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "MatchCriteria"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'match-criteria)))
    (aws-sdk/generator/shape::to-query-params "ConnectionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-type))))))
(common-lisp:progn
 (common-lisp:defstruct (get-connections-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (filter common-lisp:nil :type
    (common-lisp:or get-connections-filter common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connections-request 'make-get-connections-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-connections-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "Filter"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'filter)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (get-connections-response (:copier common-lisp:nil))
   (connection-list common-lisp:nil :type
    (common-lisp:or connection-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-connections-response 'make-get-connections-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-connections-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ConnectionList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-list)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-crawler-metrics-request (:copier common-lisp:nil))
   (crawler-name-list common-lisp:nil :type
    (common-lisp:or crawler-name-list common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawler-metrics-request
                    'make-get-crawler-metrics-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-crawler-metrics-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CrawlerNameList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'crawler-name-list)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-crawler-metrics-response (:copier common-lisp:nil))
   (crawler-metrics-list common-lisp:nil :type
    (common-lisp:or crawler-metrics-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawler-metrics-response
                    'make-get-crawler-metrics-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-crawler-metrics-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CrawlerMetricsList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'crawler-metrics-list)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-crawler-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawler-request 'make-get-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-crawler-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-crawler-response (:copier common-lisp:nil))
   (crawler common-lisp:nil :type (common-lisp:or crawler common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawler-response 'make-get-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-crawler-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Crawler"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'crawler))))))
(common-lisp:progn
 (common-lisp:defstruct (get-crawlers-request (:copier common-lisp:nil))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawlers-request 'make-get-crawlers-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-crawlers-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-crawlers-response (:copier common-lisp:nil))
   (crawlers common-lisp:nil :type
    (common-lisp:or crawler-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-crawlers-response 'make-get-crawlers-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-crawlers-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Crawlers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'crawlers)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-database-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-database-request 'make-get-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-database-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-database-response (:copier common-lisp:nil))
   (database common-lisp:nil :type (common-lisp:or database common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-database-response 'make-get-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-database-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Database"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database))))))
(common-lisp:progn
 (common-lisp:defstruct (get-databases-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-databases-request 'make-get-databases-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-databases-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (get-databases-response (:copier common-lisp:nil))
   (database-list
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-list is required"))
    :type (common-lisp:or database-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-databases-response 'make-get-databases-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-databases-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DatabaseList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-list)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-dataflow-graph-request (:copier common-lisp:nil))
   (python-script common-lisp:nil :type
    (common-lisp:or python-script common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-graph-request
                    'make-get-dataflow-graph-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-dataflow-graph-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PythonScript"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'python-script))))))
(common-lisp:progn
 (common-lisp:defstruct (get-dataflow-graph-response (:copier common-lisp:nil))
   (dag-nodes common-lisp:nil :type
    (common-lisp:or dag-nodes common-lisp:null))
   (dag-edges common-lisp:nil :type
    (common-lisp:or dag-edges common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dataflow-graph-response
                    'make-get-dataflow-graph-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-dataflow-graph-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DagNodes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dag-nodes)))
    (aws-sdk/generator/shape::to-query-params "DagEdges"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dag-edges))))))
(common-lisp:progn
 (common-lisp:defstruct (get-dev-endpoint-request (:copier common-lisp:nil))
   (endpoint-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":endpoint-name is required"))
    :type (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoint-request 'make-get-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-dev-endpoint-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EndpointName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'endpoint-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-dev-endpoint-response (:copier common-lisp:nil))
   (dev-endpoint common-lisp:nil :type
    (common-lisp:or dev-endpoint common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoint-response
                    'make-get-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-dev-endpoint-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DevEndpoint"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dev-endpoint))))))
(common-lisp:progn
 (common-lisp:defstruct (get-dev-endpoints-request (:copier common-lisp:nil))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoints-request
                    'make-get-dev-endpoints-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-dev-endpoints-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-dev-endpoints-response (:copier common-lisp:nil))
   (dev-endpoints common-lisp:nil :type
    (common-lisp:or dev-endpoint-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-dev-endpoints-response
                    'make-get-dev-endpoints-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-dev-endpoints-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DevEndpoints"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dev-endpoints)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-job-request (:copier common-lisp:nil))
   (job-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":job-name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'get-job-request 'make-get-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-job-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-job-response (:copier common-lisp:nil))
   (job common-lisp:nil :type (common-lisp:or job common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-response 'make-get-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-job-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Job"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job))))))
(common-lisp:progn
 (common-lisp:defstruct (get-job-run-request (:copier common-lisp:nil))
   (job-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":job-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (run-id
    (common-lisp:error #A((19) common-lisp:base-char . ":run-id is required"))
    :type (common-lisp:or id-string common-lisp:null))
   (predecessors-included common-lisp:nil :type
    (common-lisp:or boolean-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-run-request 'make-get-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-job-run-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name)))
    (aws-sdk/generator/shape::to-query-params "RunId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'run-id)))
    (aws-sdk/generator/shape::to-query-params "PredecessorsIncluded"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'predecessors-included))))))
(common-lisp:progn
 (common-lisp:defstruct (get-job-run-response (:copier common-lisp:nil))
   (job-run common-lisp:nil :type (common-lisp:or job-run common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-run-response 'make-get-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-job-run-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobRun"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-run))))))
(common-lisp:progn
 (common-lisp:defstruct (get-job-runs-request (:copier common-lisp:nil))
   (job-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":job-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-runs-request 'make-get-job-runs-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-job-runs-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (get-job-runs-response (:copier common-lisp:nil))
   (job-runs common-lisp:nil :type
    (common-lisp:or job-run-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-runs-response 'make-get-job-runs-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-job-runs-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobRuns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-runs)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-jobs-request (:copier common-lisp:nil))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-jobs-request 'make-get-jobs-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-jobs-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (get-jobs-response (:copier common-lisp:nil))
   (jobs common-lisp:nil :type (common-lisp:or job-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-jobs-response 'make-get-jobs-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-jobs-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Jobs"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'jobs)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-mapping-request (:copier common-lisp:nil))
   (source
    (common-lisp:error #A((19) common-lisp:base-char . ":source is required"))
    :type (common-lisp:or catalog-entry common-lisp:null))
   (sinks common-lisp:nil :type
    (common-lisp:or catalog-entries common-lisp:null))
   (location common-lisp:nil :type (common-lisp:or location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mapping-request 'make-get-mapping-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-mapping-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Source"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source)))
    (aws-sdk/generator/shape::to-query-params "Sinks"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sinks)))
    (aws-sdk/generator/shape::to-query-params "Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location))))))
(common-lisp:progn
 (common-lisp:defstruct (get-mapping-response (:copier common-lisp:nil))
   (mapping
    (common-lisp:error #A((20) common-lisp:base-char . ":mapping is required"))
    :type (common-lisp:or mapping-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-mapping-response 'make-get-mapping-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-mapping-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Mapping"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'mapping))))))
(common-lisp:progn
 (common-lisp:defstruct (get-partition-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (partition-values
    (common-lisp:error
     #A((29) common-lisp:base-char . ":partition-values is required"))
    :type (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partition-request 'make-get-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-partition-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "PartitionValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-values))))))
(common-lisp:progn
 (common-lisp:defstruct (get-partition-response (:copier common-lisp:nil))
   (partition common-lisp:nil :type
    (common-lisp:or partition common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partition-response 'make-get-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-partition-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Partition"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition))))))
(common-lisp:progn
 (common-lisp:defstruct (get-partitions-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (expression common-lisp:nil :type
    (common-lisp:or predicate-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (segment common-lisp:nil :type (common-lisp:or segment common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partitions-request 'make-get-partitions-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-partitions-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "Expression"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'expression)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "Segment"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'segment)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (get-partitions-response (:copier common-lisp:nil))
   (partitions common-lisp:nil :type
    (common-lisp:or partition-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-partitions-response 'make-get-partitions-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-partitions-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Partitions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partitions)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-plan-request (:copier common-lisp:nil))
   (mapping
    (common-lisp:error #A((20) common-lisp:base-char . ":mapping is required"))
    :type (common-lisp:or mapping-list common-lisp:null))
   (source
    (common-lisp:error #A((19) common-lisp:base-char . ":source is required"))
    :type (common-lisp:or catalog-entry common-lisp:null))
   (sinks common-lisp:nil :type
    (common-lisp:or catalog-entries common-lisp:null))
   (location common-lisp:nil :type (common-lisp:or location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-plan-request 'make-get-plan-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-plan-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Mapping"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'mapping)))
    (aws-sdk/generator/shape::to-query-params "Source"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source)))
    (aws-sdk/generator/shape::to-query-params "Sinks"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sinks)))
    (aws-sdk/generator/shape::to-query-params "Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location))))))
(common-lisp:progn
 (common-lisp:defstruct (get-plan-response (:copier common-lisp:nil))
   (python-script common-lisp:nil :type
    (common-lisp:or python-script common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-plan-response 'make-get-plan-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-plan-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PythonScript"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'python-script))))))
(common-lisp:progn
 (common-lisp:defstruct (get-table-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-request 'make-get-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-table-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-table-response (:copier common-lisp:nil))
   (table common-lisp:nil :type (common-lisp:or table common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-response 'make-get-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-table-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Table"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table))))))
(common-lisp:progn
 (common-lisp:deftype get-table-versions-list ()
   '(trivial-types:proper-list table-version))
 (common-lisp:defun |make-get-table-versions-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-version))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (get-table-versions-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-versions-request
                    'make-get-table-versions-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-table-versions-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (get-table-versions-response (:copier common-lisp:nil))
   (table-versions common-lisp:nil :type
    (common-lisp:or get-table-versions-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-table-versions-response
                    'make-get-table-versions-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-table-versions-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TableVersions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-versions)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-tables-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (expression common-lisp:nil :type
    (common-lisp:or filter-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-tables-request 'make-get-tables-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-tables-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "Expression"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'expression)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (get-tables-response (:copier common-lisp:nil))
   (table-list common-lisp:nil :type
    (common-lisp:or table-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-tables-response 'make-get-tables-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-tables-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TableList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-list)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (get-trigger-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-trigger-request 'make-get-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-trigger-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-trigger-response (:copier common-lisp:nil))
   (trigger common-lisp:nil :type (common-lisp:or trigger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-trigger-response 'make-get-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-trigger-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Trigger"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'trigger))))))
(common-lisp:progn
 (common-lisp:defstruct (get-triggers-request (:copier common-lisp:nil))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (dependent-job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-triggers-request 'make-get-triggers-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-triggers-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "DependentJobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'dependent-job-name)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (get-triggers-response (:copier common-lisp:nil))
   (triggers common-lisp:nil :type
    (common-lisp:or trigger-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-triggers-response 'make-get-triggers-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-triggers-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Triggers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'triggers)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-defined-function-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (function-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":function-name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-function-request
                    'make-get-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-user-defined-function-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "FunctionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'function-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-defined-function-response (:copier common-lisp:nil))
   (user-defined-function common-lisp:nil :type
    (common-lisp:or user-defined-function common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-function-response
                    'make-get-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-user-defined-function-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserDefinedFunction"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-defined-function))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-defined-functions-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (pattern
    (common-lisp:error #A((20) common-lisp:base-char . ":pattern is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-functions-request
                    'make-get-user-defined-functions-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-user-defined-functions-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "Pattern"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pattern)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-user-defined-functions-response (:copier common-lisp:nil))
   (user-defined-functions common-lisp:nil :type
    (common-lisp:or user-defined-function-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-user-defined-functions-response
                    'make-get-user-defined-functions-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-user-defined-functions-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UserDefinedFunctions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'user-defined-functions)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (grok-classifier (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (classification
    (common-lisp:error
     #A((27) common-lisp:base-char . ":classification is required"))
    :type (common-lisp:or classification common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-updated common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (version common-lisp:nil :type (common-lisp:or version-id common-lisp:null))
   (grok-pattern
    (common-lisp:error
     #A((25) common-lisp:base-char . ":grok-pattern is required"))
    :type (common-lisp:or grok-pattern common-lisp:null))
   (custom-patterns common-lisp:nil :type
    (common-lisp:or custom-patterns common-lisp:null)))
 (common-lisp:export (common-lisp:list 'grok-classifier 'make-grok-classifier))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape grok-classifier))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Classification"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'classification)))
    (aws-sdk/generator/shape::to-query-params "CreationTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-time)))
    (aws-sdk/generator/shape::to-query-params "LastUpdated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-updated)))
    (aws-sdk/generator/shape::to-query-params "Version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version)))
    (aws-sdk/generator/shape::to-query-params "GrokPattern"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'grok-pattern)))
    (aws-sdk/generator/shape::to-query-params "CustomPatterns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'custom-patterns))))))
(common-lisp:deftype grok-pattern () 'common-lisp:string)
(common-lisp:deftype id-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (idempotent-parameter-mismatch-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'idempotent-parameter-mismatch-exception
                    'make-idempotent-parameter-mismatch-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          idempotent-parameter-mismatch-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (import-catalog-to-glue-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'import-catalog-to-glue-request
                    'make-import-catalog-to-glue-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          import-catalog-to-glue-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (import-catalog-to-glue-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'import-catalog-to-glue-response
                    'make-import-catalog-to-glue-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          import-catalog-to-glue-response))
   (common-lisp:append)))
(common-lisp:deftype integer () 'common-lisp:integer)
(common-lisp:deftype integer-flag () 'common-lisp:integer)
(common-lisp:deftype integer-value () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (internal-service-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internal-service-exception
                    'make-internal-service-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          internal-service-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-input-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-input-exception 'make-invalid-input-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-input-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (jdbc-target (:copier common-lisp:nil))
   (connection-name common-lisp:nil :type
    (common-lisp:or connection-name common-lisp:null))
   (path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (exclusions common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'jdbc-target 'make-jdbc-target))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape jdbc-target))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ConnectionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-name)))
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "Exclusions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'exclusions))))))
(common-lisp:progn
 (common-lisp:deftype jdbc-target-list ()
   '(trivial-types:proper-list jdbc-target))
 (common-lisp:defun |make-jdbc-target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list jdbc-target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (job (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-uri common-lisp:nil :type (common-lisp:or uri-string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-string common-lisp:null))
   (created-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (execution-property common-lisp:nil :type
    (common-lisp:or execution-property common-lisp:null))
   (command common-lisp:nil :type
    (common-lisp:or job-command common-lisp:null))
   (default-arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connections-list common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or max-retries common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape job))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "LogUri"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'log-uri)))
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role)))
    (aws-sdk/generator/shape::to-query-params "CreatedOn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created-on)))
    (aws-sdk/generator/shape::to-query-params "LastModifiedOn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-modified-on)))
    (aws-sdk/generator/shape::to-query-params "ExecutionProperty"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'execution-property)))
    (aws-sdk/generator/shape::to-query-params "Command"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'command)))
    (aws-sdk/generator/shape::to-query-params "DefaultArguments"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'default-arguments)))
    (aws-sdk/generator/shape::to-query-params "Connections"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connections)))
    (aws-sdk/generator/shape::to-query-params "MaxRetries"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-retries)))
    (aws-sdk/generator/shape::to-query-params "AllocatedCapacity"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allocated-capacity))))))
(common-lisp:progn
 (common-lisp:defstruct (job-bookmark-entry (:copier common-lisp:nil))
   (job-name common-lisp:nil :type (common-lisp:or job-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (run common-lisp:nil :type (common-lisp:or integer-value common-lisp:null))
   (attempt common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null))
   (job-bookmark common-lisp:nil :type
    (common-lisp:or json-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'job-bookmark-entry 'make-job-bookmark-entry))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape job-bookmark-entry))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name)))
    (aws-sdk/generator/shape::to-query-params "Version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version)))
    (aws-sdk/generator/shape::to-query-params "Run"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'run)))
    (aws-sdk/generator/shape::to-query-params "Attempt"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attempt)))
    (aws-sdk/generator/shape::to-query-params "JobBookmark"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-bookmark))))))
(common-lisp:progn
 (common-lisp:defstruct (job-command (:copier common-lisp:nil))
   (name common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (script-location common-lisp:nil :type
    (common-lisp:or script-location-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-command 'make-job-command))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape job-command))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "ScriptLocation"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'script-location))))))
(common-lisp:progn
 (common-lisp:deftype job-list () '(trivial-types:proper-list job))
 (common-lisp:defun |make-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (job-run (:copier common-lisp:nil))
   (id common-lisp:nil :type (common-lisp:or id-string common-lisp:null))
   (attempt common-lisp:nil :type
    (common-lisp:or attempt-count common-lisp:null))
   (previous-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null))
   (trigger-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (started-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (last-modified-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (completed-on common-lisp:nil :type
    (common-lisp:or timestamp-value common-lisp:null))
   (job-run-state common-lisp:nil :type
    (common-lisp:or job-run-state common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-string common-lisp:null))
   (predecessor-runs common-lisp:nil :type
    (common-lisp:or predecessor-list common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-run 'make-job-run))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape job-run))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Attempt"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attempt)))
    (aws-sdk/generator/shape::to-query-params "PreviousRunId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'previous-run-id)))
    (aws-sdk/generator/shape::to-query-params "TriggerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'trigger-name)))
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name)))
    (aws-sdk/generator/shape::to-query-params "StartedOn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'started-on)))
    (aws-sdk/generator/shape::to-query-params "LastModifiedOn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-modified-on)))
    (aws-sdk/generator/shape::to-query-params "CompletedOn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'completed-on)))
    (aws-sdk/generator/shape::to-query-params "JobRunState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-run-state)))
    (aws-sdk/generator/shape::to-query-params "Arguments"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arguments)))
    (aws-sdk/generator/shape::to-query-params "ErrorMessage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-message)))
    (aws-sdk/generator/shape::to-query-params "PredecessorRuns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'predecessor-runs)))
    (aws-sdk/generator/shape::to-query-params "AllocatedCapacity"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allocated-capacity))))))
(common-lisp:progn
 (common-lisp:deftype job-run-list () '(trivial-types:proper-list job-run))
 (common-lisp:defun |make-job-run-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job-run))
   aws-sdk/generator/shape::members))
(common-lisp:deftype job-run-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (job-update (:copier common-lisp:nil))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-uri common-lisp:nil :type (common-lisp:or uri-string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-string common-lisp:null))
   (execution-property common-lisp:nil :type
    (common-lisp:or execution-property common-lisp:null))
   (command common-lisp:nil :type
    (common-lisp:or job-command common-lisp:null))
   (default-arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (connections common-lisp:nil :type
    (common-lisp:or connections-list common-lisp:null))
   (max-retries common-lisp:nil :type
    (common-lisp:or max-retries common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-update 'make-job-update))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape job-update))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "LogUri"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'log-uri)))
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role)))
    (aws-sdk/generator/shape::to-query-params "ExecutionProperty"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'execution-property)))
    (aws-sdk/generator/shape::to-query-params "Command"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'command)))
    (aws-sdk/generator/shape::to-query-params "DefaultArguments"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'default-arguments)))
    (aws-sdk/generator/shape::to-query-params "Connections"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connections)))
    (aws-sdk/generator/shape::to-query-params "MaxRetries"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-retries)))
    (aws-sdk/generator/shape::to-query-params "AllocatedCapacity"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allocated-capacity))))))
(common-lisp:deftype json-value () 'common-lisp:string)
(common-lisp:deftype key-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (last-crawl-info (:copier common-lisp:nil))
   (status common-lisp:nil :type
    (common-lisp:or last-crawl-status common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (log-group common-lisp:nil :type
    (common-lisp:or log-group common-lisp:null))
   (log-stream common-lisp:nil :type
    (common-lisp:or log-stream common-lisp:null))
   (message-prefix common-lisp:nil :type
    (common-lisp:or message-prefix common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'last-crawl-info 'make-last-crawl-info))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape last-crawl-info))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "ErrorMessage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-message)))
    (aws-sdk/generator/shape::to-query-params "LogGroup"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'log-group)))
    (aws-sdk/generator/shape::to-query-params "LogStream"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'log-stream)))
    (aws-sdk/generator/shape::to-query-params "MessagePrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message-prefix)))
    (aws-sdk/generator/shape::to-query-params "StartTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-time))))))
(common-lisp:deftype last-crawl-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (location (:copier common-lisp:nil))
   (jdbc common-lisp:nil :type
    (common-lisp:or code-gen-node-args common-lisp:null))
   (s3 common-lisp:nil :type
    (common-lisp:or code-gen-node-args common-lisp:null)))
 (common-lisp:export (common-lisp:list 'location 'make-location))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape location))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Jdbc"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'jdbc)))
    (aws-sdk/generator/shape::to-query-params "S3"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                's3))))))
(common-lisp:defstruct
    (location-map
     (:constructor |make-location-map|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:deftype location-string () 'common-lisp:string)
(common-lisp:deftype log-group () 'common-lisp:string)
(common-lisp:deftype log-stream () 'common-lisp:string)
(common-lisp:deftype logical () 'common-lisp:string)
(common-lisp:deftype logical-operator () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (mapping-entry (:copier common-lisp:nil))
   (source-table common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (source-path common-lisp:nil :type
    (common-lisp:or schema-path-string common-lisp:null))
   (source-type common-lisp:nil :type
    (common-lisp:or field-type common-lisp:null))
   (target-table common-lisp:nil :type
    (common-lisp:or table-name common-lisp:null))
   (target-path common-lisp:nil :type
    (common-lisp:or schema-path-string common-lisp:null))
   (target-type common-lisp:nil :type
    (common-lisp:or field-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mapping-entry 'make-mapping-entry))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape mapping-entry))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SourceTable"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source-table)))
    (aws-sdk/generator/shape::to-query-params "SourcePath"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source-path)))
    (aws-sdk/generator/shape::to-query-params "SourceType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source-type)))
    (aws-sdk/generator/shape::to-query-params "TargetTable"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target-table)))
    (aws-sdk/generator/shape::to-query-params "TargetPath"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target-path)))
    (aws-sdk/generator/shape::to-query-params "TargetType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target-type))))))
(common-lisp:progn
 (common-lisp:deftype mapping-list ()
   '(trivial-types:proper-list mapping-entry))
 (common-lisp:defun |make-mapping-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list mapping-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype match-criteria ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-match-criteria|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype max-concurrent-runs () 'common-lisp:integer)
(common-lisp:deftype max-retries () 'common-lisp:integer)
(common-lisp:deftype message-prefix () 'common-lisp:string)
(common-lisp:deftype message-string () 'common-lisp:string)
(common-lisp:deftype milliseconds-count () 'common-lisp:integer)
(common-lisp:deftype name-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype name-string-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-name-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (no-schedule-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'no-schedule-exception 'make-no-schedule-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          no-schedule-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype non-negative-double () 'common-lisp:double-float)
(common-lisp:deftype non-negative-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (operation-timeout-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'operation-timeout-exception
                    'make-operation-timeout-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          operation-timeout-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (order (:copier common-lisp:nil))
   (column
    (common-lisp:error #A((19) common-lisp:base-char . ":column is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (sort-order
    (common-lisp:error
     #A((23) common-lisp:base-char . ":sort-order is required"))
    :type (common-lisp:or integer-flag common-lisp:null)))
 (common-lisp:export (common-lisp:list 'order 'make-order))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape order))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Column"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'column)))
    (aws-sdk/generator/shape::to-query-params "SortOrder"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sort-order))))))
(common-lisp:progn
 (common-lisp:deftype order-list () '(trivial-types:proper-list order))
 (common-lisp:defun |make-order-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list order))
   aws-sdk/generator/shape::members))
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:defstruct
    (parameters-map
     (:constructor |make-parameters-map|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:deftype parameters-map-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (partition (:copier common-lisp:nil))
   (values common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (table-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (creation-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-access-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (storage-descriptor common-lisp:nil :type
    (common-lisp:or storage-descriptor common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (last-analyzed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'partition 'make-partition))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape partition))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Values"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'values)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "CreationTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'creation-time)))
    (aws-sdk/generator/shape::to-query-params "LastAccessTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-access-time)))
    (aws-sdk/generator/shape::to-query-params "StorageDescriptor"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'storage-descriptor)))
    (aws-sdk/generator/shape::to-query-params "Parameters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameters)))
    (aws-sdk/generator/shape::to-query-params "LastAnalyzedTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-analyzed-time))))))
(common-lisp:progn
 (common-lisp:defstruct (partition-error (:copier common-lisp:nil))
   (partition-values common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (error-detail common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'partition-error 'make-partition-error))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape partition-error))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "PartitionValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-values)))
    (aws-sdk/generator/shape::to-query-params "ErrorDetail"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-detail))))))
(common-lisp:progn
 (common-lisp:deftype partition-errors ()
   '(trivial-types:proper-list partition-error))
 (common-lisp:defun |make-partition-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (partition-input (:copier common-lisp:nil))
   (values common-lisp:nil :type
    (common-lisp:or value-string-list common-lisp:null))
   (last-access-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (storage-descriptor common-lisp:nil :type
    (common-lisp:or storage-descriptor common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (last-analyzed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'partition-input 'make-partition-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape partition-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Values"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'values)))
    (aws-sdk/generator/shape::to-query-params "LastAccessTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-access-time)))
    (aws-sdk/generator/shape::to-query-params "StorageDescriptor"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'storage-descriptor)))
    (aws-sdk/generator/shape::to-query-params "Parameters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameters)))
    (aws-sdk/generator/shape::to-query-params "LastAnalyzedTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-analyzed-time))))))
(common-lisp:progn
 (common-lisp:deftype partition-input-list ()
   '(trivial-types:proper-list partition-input))
 (common-lisp:defun |make-partition-input-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition-input))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype partition-list () '(trivial-types:proper-list partition))
 (common-lisp:defun |make-partition-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list partition))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (partition-value-list (:copier common-lisp:nil))
   (values
    (common-lisp:error #A((19) common-lisp:base-char . ":values is required"))
    :type (common-lisp:or value-string-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'partition-value-list 'make-partition-value-list))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape partition-value-list))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Values"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'values))))))
(common-lisp:deftype path () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype path-list () '(trivial-types:proper-list path))
 (common-lisp:defun |make-path-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list path))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (physical-connection-requirements (:copier common-lisp:nil))
   (subnet-id common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (security-group-id-list common-lisp:nil :type
    (common-lisp:or security-group-id-list common-lisp:null))
   (availability-zone common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'physical-connection-requirements
                    'make-physical-connection-requirements))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          physical-connection-requirements))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SubnetId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'subnet-id)))
    (aws-sdk/generator/shape::to-query-params "SecurityGroupIdList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'security-group-id-list)))
    (aws-sdk/generator/shape::to-query-params "AvailabilityZone"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'availability-zone))))))
(common-lisp:progn
 (common-lisp:defstruct (predecessor (:copier common-lisp:nil))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (run-id common-lisp:nil :type (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'predecessor 'make-predecessor))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape predecessor))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name)))
    (aws-sdk/generator/shape::to-query-params "RunId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'run-id))))))
(common-lisp:progn
 (common-lisp:deftype predecessor-list ()
   '(trivial-types:proper-list predecessor))
 (common-lisp:defun |make-predecessor-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list predecessor))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (predicate (:copier common-lisp:nil))
   (logical common-lisp:nil :type (common-lisp:or logical common-lisp:null))
   (conditions common-lisp:nil :type
    (common-lisp:or condition-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'predicate 'make-predicate))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape predicate))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Logical"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'logical)))
    (aws-sdk/generator/shape::to-query-params "Conditions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'conditions))))))
(common-lisp:deftype predicate-string () 'common-lisp:string)
(common-lisp:deftype principal-type () 'common-lisp:string)
(common-lisp:deftype python-script () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (reset-job-bookmark-request (:copier common-lisp:nil))
   (job-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":job-name is required"))
    :type (common-lisp:or job-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-job-bookmark-request
                    'make-reset-job-bookmark-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          reset-job-bookmark-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name))))))
(common-lisp:progn
 (common-lisp:defstruct (reset-job-bookmark-response (:copier common-lisp:nil))
   (job-bookmark-entry common-lisp:nil :type
    (common-lisp:or job-bookmark-entry common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'reset-job-bookmark-response
                    'make-reset-job-bookmark-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          reset-job-bookmark-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobBookmarkEntry"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-bookmark-entry))))))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-number-limit-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-number-limit-exceeded-exception
                    'make-resource-number-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          resource-number-limit-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype resource-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (resource-uri (:copier common-lisp:nil))
   (resource-type common-lisp:nil :type
    (common-lisp:or resource-type common-lisp:null))
   (uri common-lisp:nil :type (common-lisp:or uri common-lisp:null)))
 (common-lisp:export (common-lisp:list 'resource-uri 'make-resource-uri))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape resource-uri))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ResourceType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-type)))
    (aws-sdk/generator/shape::to-query-params "Uri"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'uri))))))
(common-lisp:progn
 (common-lisp:deftype resource-uri-list ()
   '(trivial-types:proper-list resource-uri))
 (common-lisp:defun |make-resource-uri-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list resource-uri))
   aws-sdk/generator/shape::members))
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:deftype role-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (s3target (:copier common-lisp:nil))
   (path common-lisp:nil :type (common-lisp:or path common-lisp:null))
   (exclusions common-lisp:nil :type
    (common-lisp:or path-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3target 'make-s3target))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape s3target))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Path"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'path)))
    (aws-sdk/generator/shape::to-query-params "Exclusions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'exclusions))))))
(common-lisp:progn
 (common-lisp:deftype s3target-list () '(trivial-types:proper-list s3target))
 (common-lisp:defun |make-s3target-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list s3target))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (schedule (:copier common-lisp:nil))
   (schedule-expression common-lisp:nil :type
    (common-lisp:or cron-expression common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or schedule-state common-lisp:null)))
 (common-lisp:export (common-lisp:list 'schedule 'make-schedule))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape schedule))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ScheduleExpression"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schedule-expression)))
    (aws-sdk/generator/shape::to-query-params "State"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'state))))))
(common-lisp:deftype schedule-state () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (scheduler-not-running-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduler-not-running-exception
                    'make-scheduler-not-running-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          scheduler-not-running-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (scheduler-running-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduler-running-exception
                    'make-scheduler-running-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          scheduler-running-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (scheduler-transitioning-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'scheduler-transitioning-exception
                    'make-scheduler-transitioning-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          scheduler-transitioning-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (schema-change-policy (:copier common-lisp:nil))
   (update-behavior common-lisp:nil :type
    (common-lisp:or update-behavior common-lisp:null))
   (delete-behavior common-lisp:nil :type
    (common-lisp:or delete-behavior common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'schema-change-policy 'make-schema-change-policy))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape schema-change-policy))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "UpdateBehavior"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'update-behavior)))
    (aws-sdk/generator/shape::to-query-params "DeleteBehavior"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'delete-behavior))))))
(common-lisp:deftype schema-path-string () 'common-lisp:string)
(common-lisp:deftype script-location-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype security-group-id-list ()
   '(trivial-types:proper-list name-string))
 (common-lisp:defun |make-security-group-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list name-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (segment (:copier common-lisp:nil))
   (segment-number
    (common-lisp:error
     #A((27) common-lisp:base-char . ":segment-number is required"))
    :type (common-lisp:or non-negative-integer common-lisp:null))
   (total-segments
    (common-lisp:error
     #A((27) common-lisp:base-char . ":total-segments is required"))
    :type (common-lisp:or total-segments-integer common-lisp:null)))
 (common-lisp:export (common-lisp:list 'segment 'make-segment))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape segment))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SegmentNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'segment-number)))
    (aws-sdk/generator/shape::to-query-params "TotalSegments"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'total-segments))))))
(common-lisp:progn
 (common-lisp:defstruct (ser-de-info (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (serialization-library common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'ser-de-info 'make-ser-de-info))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape ser-de-info))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "SerializationLibrary"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'serialization-library)))
    (aws-sdk/generator/shape::to-query-params "Parameters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameters))))))
(common-lisp:progn
 (common-lisp:defstruct (skewed-info (:copier common-lisp:nil))
   (skewed-column-names common-lisp:nil :type
    (common-lisp:or name-string-list common-lisp:null))
   (skewed-column-values common-lisp:nil :type
    (common-lisp:or column-value-string-list common-lisp:null))
   (skewed-column-value-location-maps common-lisp:nil :type
    (common-lisp:or location-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'skewed-info 'make-skewed-info))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape skewed-info))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SkewedColumnNames"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'skewed-column-names)))
    (aws-sdk/generator/shape::to-query-params "SkewedColumnValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'skewed-column-values)))
    (aws-sdk/generator/shape::to-query-params "SkewedColumnValueLocationMaps"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'skewed-column-value-location-maps))))))
(common-lisp:progn
 (common-lisp:defstruct (start-crawler-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-crawler-request 'make-start-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-crawler-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (start-crawler-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-crawler-response 'make-start-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-crawler-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (start-crawler-schedule-request (:copier common-lisp:nil))
   (crawler-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":crawler-name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-crawler-schedule-request
                    'make-start-crawler-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-crawler-schedule-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CrawlerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'crawler-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (start-crawler-schedule-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'start-crawler-schedule-response
                    'make-start-crawler-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-crawler-schedule-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (start-job-run-request (:copier common-lisp:nil))
   (job-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":job-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (job-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null))
   (arguments common-lisp:nil :type
    (common-lisp:or generic-map common-lisp:null))
   (allocated-capacity common-lisp:nil :type
    (common-lisp:or integer-value common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-job-run-request 'make-start-job-run-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-job-run-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name)))
    (aws-sdk/generator/shape::to-query-params "JobRunId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-run-id)))
    (aws-sdk/generator/shape::to-query-params "Arguments"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'arguments)))
    (aws-sdk/generator/shape::to-query-params "AllocatedCapacity"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'allocated-capacity))))))
(common-lisp:progn
 (common-lisp:defstruct (start-job-run-response (:copier common-lisp:nil))
   (job-run-id common-lisp:nil :type
    (common-lisp:or id-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-job-run-response 'make-start-job-run-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-job-run-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobRunId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-run-id))))))
(common-lisp:progn
 (common-lisp:defstruct (start-trigger-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-trigger-request 'make-start-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-trigger-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (start-trigger-response (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-trigger-response 'make-start-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-trigger-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (stop-crawler-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-request 'make-stop-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape stop-crawler-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (stop-crawler-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-response 'make-stop-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          stop-crawler-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-crawler-schedule-request (:copier common-lisp:nil))
   (crawler-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":crawler-name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-schedule-request
                    'make-stop-crawler-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          stop-crawler-schedule-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CrawlerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'crawler-name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-crawler-schedule-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stop-crawler-schedule-response
                    'make-stop-crawler-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          stop-crawler-schedule-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (stop-trigger-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-trigger-request 'make-stop-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape stop-trigger-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (stop-trigger-response (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-trigger-response 'make-stop-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          stop-trigger-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (storage-descriptor (:copier common-lisp:nil))
   (columns common-lisp:nil :type
    (common-lisp:or column-list common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or location-string common-lisp:null))
   (input-format common-lisp:nil :type
    (common-lisp:or format-string common-lisp:null))
   (output-format common-lisp:nil :type
    (common-lisp:or format-string common-lisp:null))
   (compressed common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (number-of-buckets common-lisp:nil :type
    (common-lisp:or integer common-lisp:null))
   (serde-info common-lisp:nil :type
    (common-lisp:or ser-de-info common-lisp:null))
   (bucket-columns common-lisp:nil :type
    (common-lisp:or name-string-list common-lisp:null))
   (sort-columns common-lisp:nil :type
    (common-lisp:or order-list common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (skewed-info common-lisp:nil :type
    (common-lisp:or skewed-info common-lisp:null))
   (stored-as-sub-directories common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'storage-descriptor 'make-storage-descriptor))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape storage-descriptor))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Columns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'columns)))
    (aws-sdk/generator/shape::to-query-params "Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location)))
    (aws-sdk/generator/shape::to-query-params "InputFormat"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'input-format)))
    (aws-sdk/generator/shape::to-query-params "OutputFormat"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'output-format)))
    (aws-sdk/generator/shape::to-query-params "Compressed"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'compressed)))
    (aws-sdk/generator/shape::to-query-params "NumberOfBuckets"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'number-of-buckets)))
    (aws-sdk/generator/shape::to-query-params "SerdeInfo"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'serde-info)))
    (aws-sdk/generator/shape::to-query-params "BucketColumns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bucket-columns)))
    (aws-sdk/generator/shape::to-query-params "SortColumns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sort-columns)))
    (aws-sdk/generator/shape::to-query-params "Parameters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameters)))
    (aws-sdk/generator/shape::to-query-params "SkewedInfo"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'skewed-info)))
    (aws-sdk/generator/shape::to-query-params "StoredAsSubDirectories"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stored-as-sub-directories))))))
(common-lisp:progn
 (common-lisp:deftype string-list ()
   '(trivial-types:proper-list generic-string))
 (common-lisp:defun |make-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list generic-string))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (table (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (update-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-access-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-analyzed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (retention common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (storage-descriptor common-lisp:nil :type
    (common-lisp:or storage-descriptor common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or column-list common-lisp:null))
   (view-original-text common-lisp:nil :type
    (common-lisp:or view-text-string common-lisp:null))
   (view-expanded-text common-lisp:nil :type
    (common-lisp:or view-text-string common-lisp:null))
   (table-type common-lisp:nil :type
    (common-lisp:or table-type-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null))
   (created-by common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table 'make-table))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape table))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "Owner"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner)))
    (aws-sdk/generator/shape::to-query-params "CreateTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-time)))
    (aws-sdk/generator/shape::to-query-params "UpdateTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'update-time)))
    (aws-sdk/generator/shape::to-query-params "LastAccessTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-access-time)))
    (aws-sdk/generator/shape::to-query-params "LastAnalyzedTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-analyzed-time)))
    (aws-sdk/generator/shape::to-query-params "Retention"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'retention)))
    (aws-sdk/generator/shape::to-query-params "StorageDescriptor"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'storage-descriptor)))
    (aws-sdk/generator/shape::to-query-params "PartitionKeys"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-keys)))
    (aws-sdk/generator/shape::to-query-params "ViewOriginalText"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'view-original-text)))
    (aws-sdk/generator/shape::to-query-params "ViewExpandedText"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'view-expanded-text)))
    (aws-sdk/generator/shape::to-query-params "TableType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-type)))
    (aws-sdk/generator/shape::to-query-params "Parameters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameters)))
    (aws-sdk/generator/shape::to-query-params "CreatedBy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created-by))))))
(common-lisp:progn
 (common-lisp:defstruct (table-error (:copier common-lisp:nil))
   (table-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (error-detail common-lisp:nil :type
    (common-lisp:or error-detail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-error 'make-table-error))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape table-error))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "ErrorDetail"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-detail))))))
(common-lisp:progn
 (common-lisp:deftype table-errors () '(trivial-types:proper-list table-error))
 (common-lisp:defun |make-table-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (table-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (owner common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (last-access-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-analyzed-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (retention common-lisp:nil :type
    (common-lisp:or non-negative-integer common-lisp:null))
   (storage-descriptor common-lisp:nil :type
    (common-lisp:or storage-descriptor common-lisp:null))
   (partition-keys common-lisp:nil :type
    (common-lisp:or column-list common-lisp:null))
   (view-original-text common-lisp:nil :type
    (common-lisp:or view-text-string common-lisp:null))
   (view-expanded-text common-lisp:nil :type
    (common-lisp:or view-text-string common-lisp:null))
   (table-type common-lisp:nil :type
    (common-lisp:or table-type-string common-lisp:null))
   (parameters common-lisp:nil :type
    (common-lisp:or parameters-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-input 'make-table-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape table-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "Owner"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner)))
    (aws-sdk/generator/shape::to-query-params "LastAccessTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-access-time)))
    (aws-sdk/generator/shape::to-query-params "LastAnalyzedTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-analyzed-time)))
    (aws-sdk/generator/shape::to-query-params "Retention"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'retention)))
    (aws-sdk/generator/shape::to-query-params "StorageDescriptor"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'storage-descriptor)))
    (aws-sdk/generator/shape::to-query-params "PartitionKeys"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-keys)))
    (aws-sdk/generator/shape::to-query-params "ViewOriginalText"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'view-original-text)))
    (aws-sdk/generator/shape::to-query-params "ViewExpandedText"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'view-expanded-text)))
    (aws-sdk/generator/shape::to-query-params "TableType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-type)))
    (aws-sdk/generator/shape::to-query-params "Parameters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameters))))))
(common-lisp:progn
 (common-lisp:deftype table-list () '(trivial-types:proper-list table))
 (common-lisp:defun |make-table-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list table))
   aws-sdk/generator/shape::members))
(common-lisp:deftype table-name () 'common-lisp:string)
(common-lisp:deftype table-prefix () 'common-lisp:string)
(common-lisp:deftype table-type-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (table-version (:copier common-lisp:nil))
   (table common-lisp:nil :type (common-lisp:or table common-lisp:null))
   (version-id common-lisp:nil :type
    (common-lisp:or version-string common-lisp:null)))
 (common-lisp:export (common-lisp:list 'table-version 'make-table-version))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape table-version))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Table"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table)))
    (aws-sdk/generator/shape::to-query-params "VersionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version-id))))))
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:deftype timestamp-value () 'common-lisp:string)
(common-lisp:deftype token () 'common-lisp:string)
(common-lisp:deftype total-segments-integer () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (trigger (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or id-string common-lisp:null))
   (type common-lisp:nil :type (common-lisp:or trigger-type common-lisp:null))
   (state common-lisp:nil :type
    (common-lisp:or trigger-state common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or action-list common-lisp:null))
   (predicate common-lisp:nil :type
    (common-lisp:or predicate common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trigger 'make-trigger))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape trigger))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "State"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'state)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "Schedule"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schedule)))
    (aws-sdk/generator/shape::to-query-params "Actions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'actions)))
    (aws-sdk/generator/shape::to-query-params "Predicate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'predicate))))))
(common-lisp:progn
 (common-lisp:deftype trigger-list () '(trivial-types:proper-list trigger))
 (common-lisp:defun |make-trigger-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list trigger))
   aws-sdk/generator/shape::members))
(common-lisp:deftype trigger-state () 'common-lisp:string)
(common-lisp:deftype trigger-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (trigger-update (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or name-string common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (actions common-lisp:nil :type
    (common-lisp:or action-list common-lisp:null))
   (predicate common-lisp:nil :type
    (common-lisp:or predicate common-lisp:null)))
 (common-lisp:export (common-lisp:list 'trigger-update 'make-trigger-update))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape trigger-update))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "Schedule"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schedule)))
    (aws-sdk/generator/shape::to-query-params "Actions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'actions)))
    (aws-sdk/generator/shape::to-query-params "Predicate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'predicate))))))
(common-lisp:deftype uri () 'common-lisp:string)
(common-lisp:deftype update-behavior () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (update-classifier-request (:copier common-lisp:nil))
   (grok-classifier common-lisp:nil :type
    (common-lisp:or update-grok-classifier-request common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-classifier-request
                    'make-update-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-classifier-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "GrokClassifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'grok-classifier))))))
(common-lisp:progn
 (common-lisp:defstruct (update-classifier-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-classifier-response
                    'make-update-classifier-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-classifier-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (update-connection-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (connection-input
    (common-lisp:error
     #A((29) common-lisp:base-char . ":connection-input is required"))
    :type (common-lisp:or connection-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-connection-request
                    'make-update-connection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-connection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "ConnectionInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'connection-input))))))
(common-lisp:progn
 (common-lisp:defstruct (update-connection-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-connection-response
                    'make-update-connection-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-connection-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (update-crawler-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (role common-lisp:nil :type (common-lisp:or role-arn common-lisp:null))
   (database-name common-lisp:nil :type
    (common-lisp:or database-name common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description-string-removable common-lisp:null))
   (targets common-lisp:nil :type
    (common-lisp:or crawler-targets common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or cron-expression common-lisp:null))
   (classifiers common-lisp:nil :type
    (common-lisp:or classifier-name-list common-lisp:null))
   (table-prefix common-lisp:nil :type
    (common-lisp:or table-prefix common-lisp:null))
   (schema-change-policy common-lisp:nil :type
    (common-lisp:or schema-change-policy common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-crawler-request 'make-update-crawler-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-crawler-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Role"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "Description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "Targets"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'targets)))
    (aws-sdk/generator/shape::to-query-params "Schedule"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schedule)))
    (aws-sdk/generator/shape::to-query-params "Classifiers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'classifiers)))
    (aws-sdk/generator/shape::to-query-params "TablePrefix"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-prefix)))
    (aws-sdk/generator/shape::to-query-params "SchemaChangePolicy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schema-change-policy))))))
(common-lisp:progn
 (common-lisp:defstruct (update-crawler-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-crawler-response 'make-update-crawler-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-crawler-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-crawler-schedule-request (:copier common-lisp:nil))
   (crawler-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":crawler-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (schedule common-lisp:nil :type
    (common-lisp:or cron-expression common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-crawler-schedule-request
                    'make-update-crawler-schedule-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-crawler-schedule-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CrawlerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'crawler-name)))
    (aws-sdk/generator/shape::to-query-params "Schedule"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'schedule))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-crawler-schedule-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-crawler-schedule-response
                    'make-update-crawler-schedule-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-crawler-schedule-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (update-database-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (database-input
    (common-lisp:error
     #A((27) common-lisp:base-char . ":database-input is required"))
    :type (common-lisp:or database-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-database-request 'make-update-database-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-database-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "DatabaseInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-input))))))
(common-lisp:progn
 (common-lisp:defstruct (update-database-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-database-response 'make-update-database-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-database-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (update-dev-endpoint-request (:copier common-lisp:nil))
   (endpoint-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":endpoint-name is required"))
    :type (common-lisp:or generic-string common-lisp:null))
   (public-key common-lisp:nil :type
    (common-lisp:or generic-string common-lisp:null))
   (custom-libraries common-lisp:nil :type
    (common-lisp:or dev-endpoint-custom-libraries common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-dev-endpoint-request
                    'make-update-dev-endpoint-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-dev-endpoint-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "EndpointName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'endpoint-name)))
    (aws-sdk/generator/shape::to-query-params "PublicKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'public-key)))
    (aws-sdk/generator/shape::to-query-params "CustomLibraries"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'custom-libraries))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-dev-endpoint-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-dev-endpoint-response
                    'make-update-dev-endpoint-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-dev-endpoint-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (update-grok-classifier-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (classification common-lisp:nil :type
    (common-lisp:or classification common-lisp:null))
   (grok-pattern common-lisp:nil :type
    (common-lisp:or grok-pattern common-lisp:null))
   (custom-patterns common-lisp:nil :type
    (common-lisp:or custom-patterns common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-grok-classifier-request
                    'make-update-grok-classifier-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-grok-classifier-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Classification"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'classification)))
    (aws-sdk/generator/shape::to-query-params "GrokPattern"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'grok-pattern)))
    (aws-sdk/generator/shape::to-query-params "CustomPatterns"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'custom-patterns))))))
(common-lisp:progn
 (common-lisp:defstruct (update-job-request (:copier common-lisp:nil))
   (job-name
    (common-lisp:error
     #A((21) common-lisp:base-char . ":job-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (job-update
    (common-lisp:error
     #A((23) common-lisp:base-char . ":job-update is required"))
    :type (common-lisp:or job-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-request 'make-update-job-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape update-job-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name)))
    (aws-sdk/generator/shape::to-query-params "JobUpdate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-update))))))
(common-lisp:progn
 (common-lisp:defstruct (update-job-response (:copier common-lisp:nil))
   (job-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-job-response 'make-update-job-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape update-job-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "JobName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-name))))))
(common-lisp:progn
 (common-lisp:defstruct (update-partition-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":table-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (partition-value-list
    (common-lisp:error
     #A((33) common-lisp:base-char . ":partition-value-list is required"))
    :type (common-lisp:or bounded-partition-value-list common-lisp:null))
   (partition-input
    (common-lisp:error
     #A((28) common-lisp:base-char . ":partition-input is required"))
    :type (common-lisp:or partition-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-partition-request 'make-update-partition-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-partition-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-name)))
    (aws-sdk/generator/shape::to-query-params "PartitionValueList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-value-list)))
    (aws-sdk/generator/shape::to-query-params "PartitionInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-input))))))
(common-lisp:progn
 (common-lisp:defstruct (update-partition-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-partition-response
                    'make-update-partition-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-partition-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (update-table-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (table-input
    (common-lisp:error
     #A((24) common-lisp:base-char . ":table-input is required"))
    :type (common-lisp:or table-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-table-request 'make-update-table-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape update-table-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "TableInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'table-input))))))
(common-lisp:progn
 (common-lisp:defstruct (update-table-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-table-response 'make-update-table-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-table-response))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (update-trigger-request (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (trigger-update
    (common-lisp:error
     #A((27) common-lisp:base-char . ":trigger-update is required"))
    :type (common-lisp:or trigger-update common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trigger-request 'make-update-trigger-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-trigger-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "TriggerUpdate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'trigger-update))))))
(common-lisp:progn
 (common-lisp:defstruct (update-trigger-response (:copier common-lisp:nil))
   (trigger common-lisp:nil :type (common-lisp:or trigger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-trigger-response 'make-update-trigger-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-trigger-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Trigger"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'trigger))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-defined-function-request (:copier common-lisp:nil))
   (catalog-id common-lisp:nil :type
    (common-lisp:or catalog-id-string common-lisp:null))
   (database-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":database-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (function-name
    (common-lisp:error
     #A((26) common-lisp:base-char . ":function-name is required"))
    :type (common-lisp:or name-string common-lisp:null))
   (function-input
    (common-lisp:error
     #A((27) common-lisp:base-char . ":function-input is required"))
    :type (common-lisp:or user-defined-function-input common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-user-defined-function-request
                    'make-update-user-defined-function-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-user-defined-function-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CatalogId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'catalog-id)))
    (aws-sdk/generator/shape::to-query-params "DatabaseName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'database-name)))
    (aws-sdk/generator/shape::to-query-params "FunctionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'function-name)))
    (aws-sdk/generator/shape::to-query-params "FunctionInput"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'function-input))))))
(common-lisp:progn
 (common-lisp:defstruct
     (update-user-defined-function-response (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'update-user-defined-function-response
                    'make-update-user-defined-function-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-user-defined-function-response))
   (common-lisp:append)))
(common-lisp:deftype uri-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (user-defined-function (:copier common-lisp:nil))
   (function-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (class-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (owner-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (owner-type common-lisp:nil :type
    (common-lisp:or principal-type common-lisp:null))
   (create-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (resource-uris common-lisp:nil :type
    (common-lisp:or resource-uri-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-defined-function 'make-user-defined-function))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          user-defined-function))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "FunctionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'function-name)))
    (aws-sdk/generator/shape::to-query-params "ClassName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'class-name)))
    (aws-sdk/generator/shape::to-query-params "OwnerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-name)))
    (aws-sdk/generator/shape::to-query-params "OwnerType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-type)))
    (aws-sdk/generator/shape::to-query-params "CreateTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'create-time)))
    (aws-sdk/generator/shape::to-query-params "ResourceUris"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-uris))))))
(common-lisp:progn
 (common-lisp:defstruct (user-defined-function-input (:copier common-lisp:nil))
   (function-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (class-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (owner-name common-lisp:nil :type
    (common-lisp:or name-string common-lisp:null))
   (owner-type common-lisp:nil :type
    (common-lisp:or principal-type common-lisp:null))
   (resource-uris common-lisp:nil :type
    (common-lisp:or resource-uri-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'user-defined-function-input
                    'make-user-defined-function-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          user-defined-function-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "FunctionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'function-name)))
    (aws-sdk/generator/shape::to-query-params "ClassName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'class-name)))
    (aws-sdk/generator/shape::to-query-params "OwnerName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-name)))
    (aws-sdk/generator/shape::to-query-params "OwnerType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner-type)))
    (aws-sdk/generator/shape::to-query-params "ResourceUris"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'resource-uris))))))
(common-lisp:progn
 (common-lisp:deftype user-defined-function-list ()
   '(trivial-types:proper-list user-defined-function))
 (common-lisp:defun |make-user-defined-function-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list user-defined-function))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (validation-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'make-validation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape validation-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype value-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype value-string-list ()
   '(trivial-types:proper-list value-string))
 (common-lisp:defun |make-value-string-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list value-string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype version-id () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (version-mismatch-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or message-string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'version-mismatch-exception
                    'make-version-mismatch-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          version-mismatch-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype version-string () 'common-lisp:string)
(common-lisp:deftype view-text-string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun batch-create-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-input-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-input-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-create-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"BatchCreatePartition")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "BatchCreatePartitionResponse" common-lisp:nil)))
 (common-lisp:export 'batch-create-partition))
(common-lisp:progn
 (common-lisp:defun batch-delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id connection-name-list)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id connection-name-list))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"BatchDeleteConnection")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "BatchDeleteConnectionResponse" common-lisp:nil)))
 (common-lisp:export 'batch-delete-connection))
(common-lisp:progn
 (common-lisp:defun batch-delete-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partitions-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partitions-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"BatchDeletePartition")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "BatchDeletePartitionResponse" common-lisp:nil)))
 (common-lisp:export 'batch-delete-partition))
(common-lisp:progn
 (common-lisp:defun batch-delete-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name
                     tables-to-delete)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name tables-to-delete))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-delete-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"BatchDeleteTable")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "BatchDeleteTableResponse" common-lisp:nil)))
 (common-lisp:export 'batch-delete-table))
(common-lisp:progn
 (common-lisp:defun batch-get-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partitions-to-get)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partitions-to-get))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-batch-get-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"BatchGetPartition")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "BatchGetPartitionResponse" common-lisp:nil)))
 (common-lisp:export 'batch-get-partition))
(common-lisp:progn
 (common-lisp:defun create-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grok-classifier)
   (common-lisp:declare (common-lisp:ignorable grok-classifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateClassifier")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateClassifierResponse" common-lisp:nil)))
 (common-lisp:export 'create-classifier))
(common-lisp:progn
 (common-lisp:defun create-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id connection-input)
   (common-lisp:declare (common-lisp:ignorable catalog-id connection-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateConnection")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateConnectionResponse" common-lisp:nil)))
 (common-lisp:export 'create-connection))
(common-lisp:progn
 (common-lisp:defun create-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name role database-name description
                     targets schedule classifiers table-prefix
                     schema-change-policy)
   (common-lisp:declare
    (common-lisp:ignorable name role database-name description targets schedule
     classifiers table-prefix schema-change-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateCrawler")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateCrawlerResponse" common-lisp:nil)))
 (common-lisp:export 'create-crawler))
(common-lisp:progn
 (common-lisp:defun create-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-input)
   (common-lisp:declare (common-lisp:ignorable catalog-id database-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateDatabase")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateDatabaseResponse" common-lisp:nil)))
 (common-lisp:export 'create-database))
(common-lisp:progn
 (common-lisp:defun create-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name role-arn security-group-ids
                     subnet-id public-key number-of-nodes
                     extra-python-libs-s3path extra-jars-s3path)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name role-arn security-group-ids subnet-id
     public-key number-of-nodes extra-python-libs-s3path extra-jars-s3path))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateDevEndpoint")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateDevEndpointResponse" common-lisp:nil)))
 (common-lisp:export 'create-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun create-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name description log-uri role
                     execution-property command default-arguments connections
                     max-retries allocated-capacity)
   (common-lisp:declare
    (common-lisp:ignorable name description log-uri role execution-property
     command default-arguments connections max-retries allocated-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateJob")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateJobResponse" common-lisp:nil)))
 (common-lisp:export 'create-job))
(common-lisp:progn
 (common-lisp:defun create-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreatePartition")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreatePartitionResponse" common-lisp:nil)))
 (common-lisp:export 'create-partition))
(common-lisp:progn
 (common-lisp:defun create-script
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key dag-nodes dag-edges)
   (common-lisp:declare (common-lisp:ignorable dag-nodes dag-edges))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-script-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateScript")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateScriptResponse" common-lisp:nil)))
 (common-lisp:export 'create-script))
(common-lisp:progn
 (common-lisp:defun create-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateTable")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateTableResponse" common-lisp:nil)))
 (common-lisp:export 'create-table))
(common-lisp:progn
 (common-lisp:defun create-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name type schedule predicate actions
                     description)
   (common-lisp:declare
    (common-lisp:ignorable name type schedule predicate actions description))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateTrigger")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateTriggerResponse" common-lisp:nil)))
 (common-lisp:export 'create-trigger))
(common-lisp:progn
 (common-lisp:defun create-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-create-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateUserDefinedFunction")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateUserDefinedFunctionResponse" common-lisp:nil)))
 (common-lisp:export 'create-user-defined-function))
(common-lisp:progn
 (common-lisp:defun delete-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteClassifier")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteClassifierResponse" common-lisp:nil)))
 (common-lisp:export 'delete-classifier))
(common-lisp:progn
 (common-lisp:defun delete-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id connection-name)
   (common-lisp:declare (common-lisp:ignorable catalog-id connection-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteConnection")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteConnectionResponse" common-lisp:nil)))
 (common-lisp:export 'delete-connection))
(common-lisp:progn
 (common-lisp:defun delete-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteCrawler")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteCrawlerResponse" common-lisp:nil)))
 (common-lisp:export 'delete-crawler))
(common-lisp:progn
 (common-lisp:defun delete-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name)
   (common-lisp:declare (common-lisp:ignorable catalog-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteDatabase")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteDatabaseResponse" common-lisp:nil)))
 (common-lisp:export 'delete-database))
(common-lisp:progn
 (common-lisp:defun delete-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteDevEndpoint")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteDevEndpointResponse" common-lisp:nil)))
 (common-lisp:export 'delete-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun delete-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name)
   (common-lisp:declare (common-lisp:ignorable job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteJob")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteJobResponse" common-lisp:nil)))
 (common-lisp:export 'delete-job))
(common-lisp:progn
 (common-lisp:defun delete-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeletePartition")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeletePartitionResponse" common-lisp:nil)))
 (common-lisp:export 'delete-partition))
(common-lisp:progn
 (common-lisp:defun delete-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name name)
   (common-lisp:declare (common-lisp:ignorable catalog-id database-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteTable")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteTableResponse" common-lisp:nil)))
 (common-lisp:export 'delete-table))
(common-lisp:progn
 (common-lisp:defun delete-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteTrigger")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteTriggerResponse" common-lisp:nil)))
 (common-lisp:export 'delete-trigger))
(common-lisp:progn
 (common-lisp:defun delete-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-delete-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteUserDefinedFunction")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteUserDefinedFunctionResponse" common-lisp:nil)))
 (common-lisp:export 'delete-user-defined-function))
(common-lisp:progn
 (common-lisp:defun get-catalog-import-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-catalog-import-status-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetCatalogImportStatus")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetCatalogImportStatusResponse" common-lisp:nil)))
 (common-lisp:export 'get-catalog-import-status))
(common-lisp:progn
 (common-lisp:defun get-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetClassifier")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetClassifierResponse" common-lisp:nil)))
 (common-lisp:export 'get-classifier))
(common-lisp:progn
 (common-lisp:defun get-classifiers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-classifiers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetClassifiers")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetClassifiersResponse" common-lisp:nil)))
 (common-lisp:export 'get-classifiers))
(common-lisp:progn
 (common-lisp:defun get-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name)
   (common-lisp:declare (common-lisp:ignorable catalog-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetConnection")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetConnectionResponse" common-lisp:nil)))
 (common-lisp:export 'get-connection))
(common-lisp:progn
 (common-lisp:defun get-connections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id filter next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id filter next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-connections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetConnections")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetConnectionsResponse" common-lisp:nil)))
 (common-lisp:export 'get-connections))
(common-lisp:progn
 (common-lisp:defun get-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetCrawler")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetCrawlerResponse" common-lisp:nil)))
 (common-lisp:export 'get-crawler))
(common-lisp:progn
 (common-lisp:defun get-crawler-metrics
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name-list max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable crawler-name-list max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-crawler-metrics-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetCrawlerMetrics")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetCrawlerMetricsResponse" common-lisp:nil)))
 (common-lisp:export 'get-crawler-metrics))
(common-lisp:progn
 (common-lisp:defun get-crawlers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-crawlers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetCrawlers")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetCrawlersResponse" common-lisp:nil)))
 (common-lisp:export 'get-crawlers))
(common-lisp:progn
 (common-lisp:defun get-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name)
   (common-lisp:declare (common-lisp:ignorable catalog-id name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetDatabase")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetDatabaseResponse" common-lisp:nil)))
 (common-lisp:export 'get-database))
(common-lisp:progn
 (common-lisp:defun get-databases
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-databases-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetDatabases")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetDatabasesResponse" common-lisp:nil)))
 (common-lisp:export 'get-databases))
(common-lisp:progn
 (common-lisp:defun get-dataflow-graph
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key python-script)
   (common-lisp:declare (common-lisp:ignorable python-script))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dataflow-graph-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetDataflowGraph")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetDataflowGraphResponse" common-lisp:nil)))
 (common-lisp:export 'get-dataflow-graph))
(common-lisp:progn
 (common-lisp:defun get-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name)
   (common-lisp:declare (common-lisp:ignorable endpoint-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetDevEndpoint")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetDevEndpointResponse" common-lisp:nil)))
 (common-lisp:export 'get-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun get-dev-endpoints
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key max-results next-token)
   (common-lisp:declare (common-lisp:ignorable max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-dev-endpoints-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetDevEndpoints")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetDevEndpointsResponse" common-lisp:nil)))
 (common-lisp:export 'get-dev-endpoints))
(common-lisp:progn
 (common-lisp:defun get-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name)
   (common-lisp:declare (common-lisp:ignorable job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetJob")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetJobResponse" common-lisp:nil)))
 (common-lisp:export 'get-job))
(common-lisp:progn
 (common-lisp:defun get-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name run-id predecessors-included)
   (common-lisp:declare
    (common-lisp:ignorable job-name run-id predecessors-included))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetJobRun")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetJobRunResponse" common-lisp:nil)))
 (common-lisp:export 'get-job-run))
(common-lisp:progn
 (common-lisp:defun get-job-runs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable job-name next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-runs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetJobRuns")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetJobRunsResponse" common-lisp:nil)))
 (common-lisp:export 'get-job-runs))
(common-lisp:progn
 (common-lisp:defun get-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-jobs-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetJobs")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetJobsResponse" common-lisp:nil)))
 (common-lisp:export 'get-jobs))
(common-lisp:progn
 (common-lisp:defun get-mapping
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source sinks location)
   (common-lisp:declare (common-lisp:ignorable source sinks location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-mapping-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetMapping")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetMappingResponse" common-lisp:nil)))
 (common-lisp:export 'get-mapping))
(common-lisp:progn
 (common-lisp:defun get-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-values)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetPartition")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPartitionResponse" common-lisp:nil)))
 (common-lisp:export 'get-partition))
(common-lisp:progn
 (common-lisp:defun get-partitions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     expression next-token segment max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name expression
     next-token segment max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-partitions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetPartitions")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPartitionsResponse" common-lisp:nil)))
 (common-lisp:export 'get-partitions))
(common-lisp:progn
 (common-lisp:defun get-plan
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key mapping source sinks location)
   (common-lisp:declare (common-lisp:ignorable mapping source sinks location))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-plan-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetPlan")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPlanResponse" common-lisp:nil)))
 (common-lisp:export 'get-plan))
(common-lisp:progn
 (common-lisp:defun get-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name name)
   (common-lisp:declare (common-lisp:ignorable catalog-id database-name name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetTable")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetTableResponse" common-lisp:nil)))
 (common-lisp:export 'get-table))
(common-lisp:progn
 (common-lisp:defun get-table-versions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-table-versions-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetTableVersions")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetTableVersionsResponse" common-lisp:nil)))
 (common-lisp:export 'get-table-versions))
(common-lisp:progn
 (common-lisp:defun get-tables
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name expression
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name expression next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-tables-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetTables")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetTablesResponse" common-lisp:nil)))
 (common-lisp:export 'get-tables))
(common-lisp:progn
 (common-lisp:defun get-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetTrigger")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetTriggerResponse" common-lisp:nil)))
 (common-lisp:export 'get-trigger))
(common-lisp:progn
 (common-lisp:defun get-triggers
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token dependent-job-name
                     max-results)
   (common-lisp:declare
    (common-lisp:ignorable next-token dependent-job-name max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-triggers-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetTriggers")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetTriggersResponse" common-lisp:nil)))
 (common-lisp:export 'get-triggers))
(common-lisp:progn
 (common-lisp:defun get-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-name)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetUserDefinedFunction")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetUserDefinedFunctionResponse" common-lisp:nil)))
 (common-lisp:export 'get-user-defined-function))
(common-lisp:progn
 (common-lisp:defun get-user-defined-functions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name pattern
                     next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name pattern next-token
     max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-user-defined-functions-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetUserDefinedFunctions")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetUserDefinedFunctionsResponse" common-lisp:nil)))
 (common-lisp:export 'get-user-defined-functions))
(common-lisp:progn
 (common-lisp:defun import-catalog-to-glue
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id)
   (common-lisp:declare (common-lisp:ignorable catalog-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-import-catalog-to-glue-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ImportCatalogToGlue")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ImportCatalogToGlueResponse" common-lisp:nil)))
 (common-lisp:export 'import-catalog-to-glue))
(common-lisp:progn
 (common-lisp:defun reset-job-bookmark
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name)
   (common-lisp:declare (common-lisp:ignorable job-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-reset-job-bookmark-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ResetJobBookmark")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ResetJobBookmarkResponse" common-lisp:nil)))
 (common-lisp:export 'reset-job-bookmark))
(common-lisp:progn
 (common-lisp:defun start-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StartCrawler")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "StartCrawlerResponse" common-lisp:nil)))
 (common-lisp:export 'start-crawler))
(common-lisp:progn
 (common-lisp:defun start-crawler-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name)
   (common-lisp:declare (common-lisp:ignorable crawler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-crawler-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StartCrawlerSchedule")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "StartCrawlerScheduleResponse" common-lisp:nil)))
 (common-lisp:export 'start-crawler-schedule))
(common-lisp:progn
 (common-lisp:defun start-job-run
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-run-id arguments
                     allocated-capacity)
   (common-lisp:declare
    (common-lisp:ignorable job-name job-run-id arguments allocated-capacity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-job-run-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StartJobRun")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "StartJobRunResponse" common-lisp:nil)))
 (common-lisp:export 'start-job-run))
(common-lisp:progn
 (common-lisp:defun start-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StartTrigger")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "StartTriggerResponse" common-lisp:nil)))
 (common-lisp:export 'start-trigger))
(common-lisp:progn
 (common-lisp:defun stop-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StopCrawler")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "StopCrawlerResponse" common-lisp:nil)))
 (common-lisp:export 'stop-crawler))
(common-lisp:progn
 (common-lisp:defun stop-crawler-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name)
   (common-lisp:declare (common-lisp:ignorable crawler-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-crawler-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StopCrawlerSchedule")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "StopCrawlerScheduleResponse" common-lisp:nil)))
 (common-lisp:export 'stop-crawler-schedule))
(common-lisp:progn
 (common-lisp:defun stop-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StopTrigger")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "StopTriggerResponse" common-lisp:nil)))
 (common-lisp:export 'stop-trigger))
(common-lisp:progn
 (common-lisp:defun update-classifier
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key grok-classifier)
   (common-lisp:declare (common-lisp:ignorable grok-classifier))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-classifier-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateClassifier")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateClassifierResponse" common-lisp:nil)))
 (common-lisp:export 'update-classifier))
(common-lisp:progn
 (common-lisp:defun update-connection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name connection-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id name connection-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-connection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateConnection")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateConnectionResponse" common-lisp:nil)))
 (common-lisp:export 'update-connection))
(common-lisp:progn
 (common-lisp:defun update-crawler
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name role database-name description
                     targets schedule classifiers table-prefix
                     schema-change-policy)
   (common-lisp:declare
    (common-lisp:ignorable name role database-name description targets schedule
     classifiers table-prefix schema-change-policy))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-crawler-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateCrawler")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateCrawlerResponse" common-lisp:nil)))
 (common-lisp:export 'update-crawler))
(common-lisp:progn
 (common-lisp:defun update-crawler-schedule
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key crawler-name schedule)
   (common-lisp:declare (common-lisp:ignorable crawler-name schedule))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-crawler-schedule-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateCrawlerSchedule")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateCrawlerScheduleResponse" common-lisp:nil)))
 (common-lisp:export 'update-crawler-schedule))
(common-lisp:progn
 (common-lisp:defun update-database
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id name database-input)
   (common-lisp:declare (common-lisp:ignorable catalog-id name database-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-database-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateDatabase")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateDatabaseResponse" common-lisp:nil)))
 (common-lisp:export 'update-database))
(common-lisp:progn
 (common-lisp:defun update-dev-endpoint
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key endpoint-name public-key
                     custom-libraries)
   (common-lisp:declare
    (common-lisp:ignorable endpoint-name public-key custom-libraries))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-dev-endpoint-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateDevEndpoint")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateDevEndpointResponse" common-lisp:nil)))
 (common-lisp:export 'update-dev-endpoint))
(common-lisp:progn
 (common-lisp:defun update-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-name job-update)
   (common-lisp:declare (common-lisp:ignorable job-name job-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-job-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateJob")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateJobResponse" common-lisp:nil)))
 (common-lisp:export 'update-job))
(common-lisp:progn
 (common-lisp:defun update-partition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-name
                     partition-value-list partition-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-name
     partition-value-list partition-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-partition-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdatePartition")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdatePartitionResponse" common-lisp:nil)))
 (common-lisp:export 'update-partition))
(common-lisp:progn
 (common-lisp:defun update-table
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name table-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name table-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-table-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateTable")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateTableResponse" common-lisp:nil)))
 (common-lisp:export 'update-table))
(common-lisp:progn
 (common-lisp:defun update-trigger
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name trigger-update)
   (common-lisp:declare (common-lisp:ignorable name trigger-update))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-trigger-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateTrigger")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateTriggerResponse" common-lisp:nil)))
 (common-lisp:export 'update-trigger))
(common-lisp:progn
 (common-lisp:defun update-user-defined-function
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key catalog-id database-name function-name
                     function-input)
   (common-lisp:declare
    (common-lisp:ignorable catalog-id database-name function-name
     function-input))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-update-user-defined-function-request
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((4) common-lisp:base-char . "glue")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateUserDefinedFunction")
                                  ("Version" ,@"2017-03-31"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateUserDefinedFunctionResponse" common-lisp:nil)))
 (common-lisp:export 'update-user-defined-function))