;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/polly
  (:use)
  (:nicknames #:aws/polly)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/polly)

(common-lisp:deftype alphabet () 'common-lisp:string)
(common-lisp:deftype audio-stream ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype content-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (delete-lexicon-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or lexicon-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-lexicon-input 'make-delete-lexicon-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-lexicon-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-lexicon-output (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'delete-lexicon-output 'make-delete-lexicon-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-lexicon-output))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (describe-voices-input (:copier common-lisp:nil))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-voices-input 'make-describe-voices-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-voices-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "LanguageCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'language-code)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-voices-output (:copier common-lisp:nil))
   (voices common-lisp:nil :type (common-lisp:or voice-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-voices-output 'make-describe-voices-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-voices-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Voices"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'voices)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:deftype gender () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (get-lexicon-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or lexicon-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lexicon-input 'make-get-lexicon-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-lexicon-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-lexicon-output (:copier common-lisp:nil))
   (lexicon common-lisp:nil :type (common-lisp:or lexicon common-lisp:null))
   (lexicon-attributes common-lisp:nil :type
    (common-lisp:or lexicon-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-lexicon-output 'make-get-lexicon-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-lexicon-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Lexicon"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lexicon)))
    (aws-sdk/generator/shape::to-query-params "LexiconAttributes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lexicon-attributes))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-lexicon-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-lexicon-exception
                    'make-invalid-lexicon-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-lexicon-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-next-token-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'make-invalid-next-token-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-next-token-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-sample-rate-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-sample-rate-exception
                    'make-invalid-sample-rate-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-sample-rate-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-ssml-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-ssml-exception 'make-invalid-ssml-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-ssml-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype language-code () 'common-lisp:string)
(common-lisp:deftype language-name () 'common-lisp:string)
(common-lisp:deftype last-modified () 'common-lisp:string)
(common-lisp:deftype lexemes-count () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (lexicon (:copier common-lisp:nil))
   (content common-lisp:nil :type
    (common-lisp:or lexicon-content common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or lexicon-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'lexicon 'make-lexicon))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape lexicon))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Content"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'content)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:deftype lexicon-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (lexicon-attributes (:copier common-lisp:nil))
   (alphabet common-lisp:nil :type (common-lisp:or alphabet common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (last-modified common-lisp:nil :type
    (common-lisp:or last-modified common-lisp:null))
   (lexicon-arn common-lisp:nil :type
    (common-lisp:or lexicon-arn common-lisp:null))
   (lexemes-count common-lisp:nil :type
    (common-lisp:or lexemes-count common-lisp:null))
   (size common-lisp:nil :type (common-lisp:or size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lexicon-attributes 'make-lexicon-attributes))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape lexicon-attributes))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Alphabet"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'alphabet)))
    (aws-sdk/generator/shape::to-query-params "LanguageCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'language-code)))
    (aws-sdk/generator/shape::to-query-params "LastModified"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-modified)))
    (aws-sdk/generator/shape::to-query-params "LexiconArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lexicon-arn)))
    (aws-sdk/generator/shape::to-query-params "LexemesCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lexemes-count)))
    (aws-sdk/generator/shape::to-query-params "Size"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'size))))))
(common-lisp:deftype lexicon-content () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (lexicon-description (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or lexicon-name common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or lexicon-attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lexicon-description 'make-lexicon-description))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape lexicon-description))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Attributes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attributes))))))
(common-lisp:progn
 (common-lisp:deftype lexicon-description-list ()
   '(trivial-types:proper-list lexicon-description))
 (common-lisp:defun |make-lexicon-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lexicon-description))
   aws-sdk/generator/shape::members))
(common-lisp:deftype lexicon-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype lexicon-name-list ()
   '(trivial-types:proper-list lexicon-name))
 (common-lisp:defun |make-lexicon-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list lexicon-name))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (lexicon-not-found-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lexicon-not-found-exception
                    'make-lexicon-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          lexicon-not-found-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (lexicon-size-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'lexicon-size-exceeded-exception
                    'make-lexicon-size-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          lexicon-size-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (list-lexicons-input (:copier common-lisp:nil))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lexicons-input 'make-list-lexicons-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-lexicons-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (list-lexicons-output (:copier common-lisp:nil))
   (lexicons common-lisp:nil :type
    (common-lisp:or lexicon-description-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-lexicons-output 'make-list-lexicons-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-lexicons-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Lexicons"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lexicons)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct
     (marks-not-supported-for-format-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'marks-not-supported-for-format-exception
                    'make-marks-not-supported-for-format-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          marks-not-supported-for-format-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (max-lexeme-length-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'max-lexeme-length-exceeded-exception
                    'make-max-lexeme-length-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          max-lexeme-length-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (max-lexicons-number-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'max-lexicons-number-exceeded-exception
                    'make-max-lexicons-number-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          max-lexicons-number-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype output-format () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (put-lexicon-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or lexicon-name common-lisp:null))
   (content
    (common-lisp:error #A((20) common-lisp:base-char . ":content is required"))
    :type (common-lisp:or lexicon-content common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-lexicon-input 'make-put-lexicon-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape put-lexicon-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Content"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'content))))))
(common-lisp:progn
 (common-lisp:defstruct (put-lexicon-output (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'put-lexicon-output 'make-put-lexicon-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape put-lexicon-output))
   (common-lisp:append)))
(common-lisp:deftype request-characters () 'common-lisp:integer)
(common-lisp:deftype sample-rate () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (service-failure-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'service-failure-exception
                    'make-service-failure-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          service-failure-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype size () 'common-lisp:integer)
(common-lisp:deftype speech-mark-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype speech-mark-type-list ()
   '(trivial-types:proper-list speech-mark-type))
 (common-lisp:defun |make-speech-mark-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list speech-mark-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (ssml-marks-not-supported-for-text-type-exception
      (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'ssml-marks-not-supported-for-text-type-exception
                    'make-ssml-marks-not-supported-for-text-type-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          ssml-marks-not-supported-for-text-type-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (synthesize-speech-input (:copier common-lisp:nil))
   (lexicon-names common-lisp:nil :type
    (common-lisp:or lexicon-name-list common-lisp:null))
   (output-format
    (common-lisp:error
     #A((26) common-lisp:base-char . ":output-format is required"))
    :type (common-lisp:or output-format common-lisp:null))
   (sample-rate common-lisp:nil :type
    (common-lisp:or sample-rate common-lisp:null))
   (speech-mark-types common-lisp:nil :type
    (common-lisp:or speech-mark-type-list common-lisp:null))
   (text
    (common-lisp:error #A((17) common-lisp:base-char . ":text is required"))
    :type (common-lisp:or text common-lisp:null))
   (text-type common-lisp:nil :type
    (common-lisp:or text-type common-lisp:null))
   (voice-id
    (common-lisp:error
     #A((21) common-lisp:base-char . ":voice-id is required"))
    :type (common-lisp:or voice-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'synthesize-speech-input 'make-synthesize-speech-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          synthesize-speech-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "LexiconNames"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'lexicon-names)))
    (aws-sdk/generator/shape::to-query-params "OutputFormat"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'output-format)))
    (aws-sdk/generator/shape::to-query-params "SampleRate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sample-rate)))
    (aws-sdk/generator/shape::to-query-params "SpeechMarkTypes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'speech-mark-types)))
    (aws-sdk/generator/shape::to-query-params "Text"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'text)))
    (aws-sdk/generator/shape::to-query-params "TextType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'text-type)))
    (aws-sdk/generator/shape::to-query-params "VoiceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'voice-id))))))
(common-lisp:progn
 (common-lisp:defstruct (synthesize-speech-output (:copier common-lisp:nil))
   (audio-stream common-lisp:nil :type
    (common-lisp:or audio-stream common-lisp:null))
   (content-type common-lisp:nil :type
    (common-lisp:or content-type common-lisp:null))
   (request-characters common-lisp:nil :type
    (common-lisp:or request-characters common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'synthesize-speech-output 'make-synthesize-speech-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          synthesize-speech-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "AudioStream"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'audio-stream)))
    (aws-sdk/generator/shape::to-query-params "ContentType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'content-type)))
    (aws-sdk/generator/shape::to-query-params "RequestCharacters"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'request-characters))))))
(common-lisp:deftype text () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (text-length-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'text-length-exceeded-exception
                    'make-text-length-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          text-length-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype text-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (unsupported-pls-alphabet-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unsupported-pls-alphabet-exception
                    'make-unsupported-pls-alphabet-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          unsupported-pls-alphabet-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (unsupported-pls-language-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'unsupported-pls-language-exception
                    'make-unsupported-pls-language-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          unsupported-pls-language-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (voice (:copier common-lisp:nil))
   (gender common-lisp:nil :type (common-lisp:or gender common-lisp:null))
   (id common-lisp:nil :type (common-lisp:or voice-id common-lisp:null))
   (language-code common-lisp:nil :type
    (common-lisp:or language-code common-lisp:null))
   (language-name common-lisp:nil :type
    (common-lisp:or language-name common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or voice-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'voice 'make-voice))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape voice))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Gender"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'gender)))
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "LanguageCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'language-code)))
    (aws-sdk/generator/shape::to-query-params "LanguageName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'language-name)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:deftype voice-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype voice-list () '(trivial-types:proper-list voice))
 (common-lisp:defun |make-voice-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list voice))
   aws-sdk/generator/shape::members))
(common-lisp:deftype voice-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun delete-lexicon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-lexicon-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((5) common-lisp:base-char . "polly")
                               :method :delete :path
                               (common-lisp:format common-lisp:nil
                                                   "/v1/lexicons/~a"
                                                   lexiconname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteLexicon")
                                  ("Version" ,@"2016-06-10"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteLexiconOutput" common-lisp:nil)))
 (common-lisp:export 'delete-lexicon))
(common-lisp:progn
 (common-lisp:defun describe-voices
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key language-code next-token)
   (common-lisp:declare (common-lisp:ignorable language-code next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-voices-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((5) common-lisp:base-char . "polly")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeVoices")
                                  ("Version" ,@"2016-06-10"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeVoicesOutput" common-lisp:nil)))
 (common-lisp:export 'describe-voices))
(common-lisp:progn
 (common-lisp:defun get-lexicon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-lexicon-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((5) common-lisp:base-char . "polly")
                               :method :get :path
                               (common-lisp:format common-lisp:nil
                                                   "/v1/lexicons/~a"
                                                   lexiconname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"GetLexicon")
                                  ("Version" ,@"2016-06-10"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetLexiconOutput" common-lisp:nil)))
 (common-lisp:export 'get-lexicon))
(common-lisp:progn
 (common-lisp:defun list-lexicons
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-lexicons-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((5) common-lisp:base-char . "polly")
                               :method :get :params
                               (common-lisp:append
                                `(("Action" ,@"ListLexicons")
                                  ("Version" ,@"2016-06-10"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListLexiconsOutput" common-lisp:nil)))
 (common-lisp:export 'list-lexicons))
(common-lisp:progn
 (common-lisp:defun put-lexicon
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name content)
   (common-lisp:declare (common-lisp:ignorable name content))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-lexicon-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((5) common-lisp:base-char . "polly")
                               :method :put :path
                               (common-lisp:format common-lisp:nil
                                                   "/v1/lexicons/~a"
                                                   lexiconname)
                               :params
                               (common-lisp:append
                                `(("Action" ,@"PutLexicon")
                                  ("Version" ,@"2016-06-10"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "PutLexiconOutput" common-lisp:nil)))
 (common-lisp:export 'put-lexicon))
(common-lisp:progn
 (common-lisp:defun synthesize-speech
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key lexicon-names output-format sample-rate
                     speech-mark-types text text-type voice-id)
   (common-lisp:declare
    (common-lisp:ignorable lexicon-names output-format sample-rate
     speech-mark-types text text-type voice-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-synthesize-speech-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service #A((5) common-lisp:base-char . "polly")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SynthesizeSpeech")
                                  ("Version" ,@"2016-06-10"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "SynthesizeSpeechOutput" common-lisp:nil)))
 (common-lisp:export 'synthesize-speech))