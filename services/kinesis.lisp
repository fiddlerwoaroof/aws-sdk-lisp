;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/kinesis
  (:use)
  (:nicknames #:aws/kinesis)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/kinesis)

(common-lisp:progn
 (common-lisp:defstruct (add-tags-to-stream-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (tags
    (common-lisp:error #A((17) common-lisp:base-char . ":tags is required"))
    :type (common-lisp:or tag-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'add-tags-to-stream-input 'make-add-tags-to-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          add-tags-to-stream-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "Tags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tags))))))
(common-lisp:deftype boolean-object () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct (create-stream-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (shard-count
    (common-lisp:error
     #A((24) common-lisp:base-char . ":shard-count is required"))
    :type (common-lisp:or positive-integer-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-stream-input 'make-create-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape create-stream-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "ShardCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-count))))))
(common-lisp:deftype data ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:progn
 (common-lisp:defstruct
     (decrease-stream-retention-period-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (retention-period-hours
    (common-lisp:error
     #A((35) common-lisp:base-char . ":retention-period-hours is required"))
    :type (common-lisp:or positive-integer-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'decrease-stream-retention-period-input
                    'make-decrease-stream-retention-period-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          decrease-stream-retention-period-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "RetentionPeriodHours"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'retention-period-hours))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-stream-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-stream-input 'make-delete-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-stream-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-limits-input (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'describe-limits-input 'make-describe-limits-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-limits-input))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (describe-limits-output (:copier common-lisp:nil))
   (shard-limit
    (common-lisp:error
     #A((24) common-lisp:base-char . ":shard-limit is required"))
    :type (common-lisp:or shard-count-object common-lisp:null))
   (open-shard-count
    (common-lisp:error
     #A((29) common-lisp:base-char . ":open-shard-count is required"))
    :type (common-lisp:or shard-count-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-limits-output 'make-describe-limits-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-limits-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ShardLimit"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-limit)))
    (aws-sdk/generator/shape::to-query-params "OpenShardCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'open-shard-count))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-stream-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or describe-stream-input-limit common-lisp:null))
   (exclusive-start-shard-id common-lisp:nil :type
    (common-lisp:or shard-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stream-input 'make-describe-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-stream-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "Limit"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'limit)))
    (aws-sdk/generator/shape::to-query-params "ExclusiveStartShardId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'exclusive-start-shard-id))))))
(common-lisp:deftype describe-stream-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (describe-stream-output (:copier common-lisp:nil))
   (stream-description
    (common-lisp:error
     #A((31) common-lisp:base-char . ":stream-description is required"))
    :type (common-lisp:or stream-description common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-stream-output 'make-describe-stream-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-stream-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamDescription"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-description))))))
(common-lisp:progn
 (common-lisp:defstruct
     (disable-enhanced-monitoring-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (shard-level-metrics
    (common-lisp:error
     #A((32) common-lisp:base-char . ":shard-level-metrics is required"))
    :type (common-lisp:or metrics-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-enhanced-monitoring-input
                    'make-disable-enhanced-monitoring-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          disable-enhanced-monitoring-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "ShardLevelMetrics"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-level-metrics))))))
(common-lisp:progn
 (common-lisp:defstruct
     (enable-enhanced-monitoring-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (shard-level-metrics
    (common-lisp:error
     #A((32) common-lisp:base-char . ":shard-level-metrics is required"))
    :type (common-lisp:or metrics-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-enhanced-monitoring-input
                    'make-enable-enhanced-monitoring-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          enable-enhanced-monitoring-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "ShardLevelMetrics"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-level-metrics))))))
(common-lisp:deftype encryption-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (enhanced-metrics (:copier common-lisp:nil))
   (shard-level-metrics common-lisp:nil :type
    (common-lisp:or metrics-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enhanced-metrics 'make-enhanced-metrics))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape enhanced-metrics))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ShardLevelMetrics"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-level-metrics))))))
(common-lisp:progn
 (common-lisp:deftype enhanced-monitoring-list ()
   '(trivial-types:proper-list enhanced-metrics))
 (common-lisp:defun |make-enhanced-monitoring-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list enhanced-metrics))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (enhanced-monitoring-output (:copier common-lisp:nil))
   (stream-name common-lisp:nil :type
    (common-lisp:or stream-name common-lisp:null))
   (current-shard-level-metrics common-lisp:nil :type
    (common-lisp:or metrics-name-list common-lisp:null))
   (desired-shard-level-metrics common-lisp:nil :type
    (common-lisp:or metrics-name-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enhanced-monitoring-output
                    'make-enhanced-monitoring-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          enhanced-monitoring-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "CurrentShardLevelMetrics"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'current-shard-level-metrics)))
    (aws-sdk/generator/shape::to-query-params "DesiredShardLevelMetrics"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'desired-shard-level-metrics))))))
(common-lisp:deftype error-code () 'common-lisp:string)
(common-lisp:deftype error-message () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (expired-iterator-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'expired-iterator-exception
                    'make-expired-iterator-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          expired-iterator-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (get-records-input (:copier common-lisp:nil))
   (shard-iterator
    (common-lisp:error
     #A((27) common-lisp:base-char . ":shard-iterator is required"))
    :type (common-lisp:or shard-iterator common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or get-records-input-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-records-input 'make-get-records-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-records-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ShardIterator"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-iterator)))
    (aws-sdk/generator/shape::to-query-params "Limit"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'limit))))))
(common-lisp:deftype get-records-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (get-records-output (:copier common-lisp:nil))
   (records
    (common-lisp:error #A((20) common-lisp:base-char . ":records is required"))
    :type (common-lisp:or record-list common-lisp:null))
   (next-shard-iterator common-lisp:nil :type
    (common-lisp:or shard-iterator common-lisp:null))
   (millis-behind-latest common-lisp:nil :type
    (common-lisp:or millis-behind-latest common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-records-output 'make-get-records-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-records-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Records"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'records)))
    (aws-sdk/generator/shape::to-query-params "NextShardIterator"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-shard-iterator)))
    (aws-sdk/generator/shape::to-query-params "MillisBehindLatest"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'millis-behind-latest))))))
(common-lisp:progn
 (common-lisp:defstruct (get-shard-iterator-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (shard-id
    (common-lisp:error
     #A((21) common-lisp:base-char . ":shard-id is required"))
    :type (common-lisp:or shard-id common-lisp:null))
   (shard-iterator-type
    (common-lisp:error
     #A((32) common-lisp:base-char . ":shard-iterator-type is required"))
    :type (common-lisp:or shard-iterator-type common-lisp:null))
   (starting-sequence-number common-lisp:nil :type
    (common-lisp:or sequence-number common-lisp:null))
   (timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-shard-iterator-input 'make-get-shard-iterator-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-shard-iterator-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "ShardId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-id)))
    (aws-sdk/generator/shape::to-query-params "ShardIteratorType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-iterator-type)))
    (aws-sdk/generator/shape::to-query-params "StartingSequenceNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'starting-sequence-number)))
    (aws-sdk/generator/shape::to-query-params "Timestamp"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'timestamp))))))
(common-lisp:progn
 (common-lisp:defstruct (get-shard-iterator-output (:copier common-lisp:nil))
   (shard-iterator common-lisp:nil :type
    (common-lisp:or shard-iterator common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-shard-iterator-output
                    'make-get-shard-iterator-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-shard-iterator-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ShardIterator"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-iterator))))))
(common-lisp:deftype hash-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (hash-key-range (:copier common-lisp:nil))
   (starting-hash-key
    (common-lisp:error
     #A((30) common-lisp:base-char . ":starting-hash-key is required"))
    :type (common-lisp:or hash-key common-lisp:null))
   (ending-hash-key
    (common-lisp:error
     #A((28) common-lisp:base-char . ":ending-hash-key is required"))
    :type (common-lisp:or hash-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'hash-key-range 'make-hash-key-range))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape hash-key-range))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StartingHashKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'starting-hash-key)))
    (aws-sdk/generator/shape::to-query-params "EndingHashKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ending-hash-key))))))
(common-lisp:progn
 (common-lisp:defstruct
     (increase-stream-retention-period-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (retention-period-hours
    (common-lisp:error
     #A((35) common-lisp:base-char . ":retention-period-hours is required"))
    :type (common-lisp:or positive-integer-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'increase-stream-retention-period-input
                    'make-increase-stream-retention-period-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          increase-stream-retention-period-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "RetentionPeriodHours"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'retention-period-hours))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-argument-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-argument-exception
                    'make-invalid-argument-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-argument-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (kmsaccess-denied-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kmsaccess-denied-exception
                    'make-kmsaccess-denied-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          kmsaccess-denied-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (kmsdisabled-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kmsdisabled-exception 'make-kmsdisabled-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          kmsdisabled-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (kmsinvalid-state-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kmsinvalid-state-exception
                    'make-kmsinvalid-state-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          kmsinvalid-state-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (kmsnot-found-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kmsnot-found-exception 'make-kmsnot-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          kmsnot-found-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (kmsopt-in-required (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kmsopt-in-required 'make-kmsopt-in-required))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape kmsopt-in-required))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (kmsthrottling-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'kmsthrottling-exception 'make-kmsthrottling-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          kmsthrottling-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype key-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (limit-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'make-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          limit-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (list-streams-input (:copier common-lisp:nil))
   (limit common-lisp:nil :type
    (common-lisp:or list-streams-input-limit common-lisp:null))
   (exclusive-start-stream-name common-lisp:nil :type
    (common-lisp:or stream-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streams-input 'make-list-streams-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-streams-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Limit"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'limit)))
    (aws-sdk/generator/shape::to-query-params "ExclusiveStartStreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'exclusive-start-stream-name))))))
(common-lisp:deftype list-streams-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (list-streams-output (:copier common-lisp:nil))
   (stream-names
    (common-lisp:error
     #A((25) common-lisp:base-char . ":stream-names is required"))
    :type (common-lisp:or stream-name-list common-lisp:null))
   (has-more-streams
    (common-lisp:error
     #A((29) common-lisp:base-char . ":has-more-streams is required"))
    :type (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-streams-output 'make-list-streams-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-streams-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamNames"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-names)))
    (aws-sdk/generator/shape::to-query-params "HasMoreStreams"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'has-more-streams))))))
(common-lisp:progn
 (common-lisp:defstruct (list-tags-for-stream-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (exclusive-start-tag-key common-lisp:nil :type
    (common-lisp:or tag-key common-lisp:null))
   (limit common-lisp:nil :type
    (common-lisp:or list-tags-for-stream-input-limit common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-stream-input
                    'make-list-tags-for-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-tags-for-stream-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "ExclusiveStartTagKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'exclusive-start-tag-key)))
    (aws-sdk/generator/shape::to-query-params "Limit"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'limit))))))
(common-lisp:deftype list-tags-for-stream-input-limit () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (list-tags-for-stream-output (:copier common-lisp:nil))
   (tags
    (common-lisp:error #A((17) common-lisp:base-char . ":tags is required"))
    :type (common-lisp:or tag-list common-lisp:null))
   (has-more-tags
    (common-lisp:error
     #A((26) common-lisp:base-char . ":has-more-tags is required"))
    :type (common-lisp:or boolean-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-tags-for-stream-output
                    'make-list-tags-for-stream-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-tags-for-stream-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Tags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tags)))
    (aws-sdk/generator/shape::to-query-params "HasMoreTags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'has-more-tags))))))
(common-lisp:progn
 (common-lisp:defstruct (merge-shards-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (shard-to-merge
    (common-lisp:error
     #A((27) common-lisp:base-char . ":shard-to-merge is required"))
    :type (common-lisp:or shard-id common-lisp:null))
   (adjacent-shard-to-merge
    (common-lisp:error
     #A((36) common-lisp:base-char . ":adjacent-shard-to-merge is required"))
    :type (common-lisp:or shard-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'merge-shards-input 'make-merge-shards-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape merge-shards-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "ShardToMerge"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-to-merge)))
    (aws-sdk/generator/shape::to-query-params "AdjacentShardToMerge"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'adjacent-shard-to-merge))))))
(common-lisp:deftype metrics-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype metrics-name-list ()
   '(trivial-types:proper-list metrics-name))
 (common-lisp:defun |make-metrics-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list metrics-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype millis-behind-latest () 'common-lisp:integer)
(common-lisp:deftype partition-key () 'common-lisp:string)
(common-lisp:deftype positive-integer-object () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (provisioned-throughput-exceeded-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput-exceeded-exception
                    'make-provisioned-throughput-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          provisioned-throughput-exceeded-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (put-record-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (data
    (common-lisp:error #A((17) common-lisp:base-char . ":data is required"))
    :type (common-lisp:or data common-lisp:null))
   (partition-key
    (common-lisp:error
     #A((26) common-lisp:base-char . ":partition-key is required"))
    :type (common-lisp:or partition-key common-lisp:null))
   (explicit-hash-key common-lisp:nil :type
    (common-lisp:or hash-key common-lisp:null))
   (sequence-number-for-ordering common-lisp:nil :type
    (common-lisp:or sequence-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-record-input 'make-put-record-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape put-record-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "Data"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'data)))
    (aws-sdk/generator/shape::to-query-params "PartitionKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-key)))
    (aws-sdk/generator/shape::to-query-params "ExplicitHashKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'explicit-hash-key)))
    (aws-sdk/generator/shape::to-query-params "SequenceNumberForOrdering"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sequence-number-for-ordering))))))
(common-lisp:progn
 (common-lisp:defstruct (put-record-output (:copier common-lisp:nil))
   (shard-id
    (common-lisp:error
     #A((21) common-lisp:base-char . ":shard-id is required"))
    :type (common-lisp:or shard-id common-lisp:null))
   (sequence-number
    (common-lisp:error
     #A((28) common-lisp:base-char . ":sequence-number is required"))
    :type (common-lisp:or sequence-number common-lisp:null))
   (encryption-type common-lisp:nil :type
    (common-lisp:or encryption-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-record-output 'make-put-record-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape put-record-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ShardId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-id)))
    (aws-sdk/generator/shape::to-query-params "SequenceNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sequence-number)))
    (aws-sdk/generator/shape::to-query-params "EncryptionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encryption-type))))))
(common-lisp:progn
 (common-lisp:defstruct (put-records-input (:copier common-lisp:nil))
   (records
    (common-lisp:error #A((20) common-lisp:base-char . ":records is required"))
    :type (common-lisp:or put-records-request-entry-list common-lisp:null))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-records-input 'make-put-records-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape put-records-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Records"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'records)))
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name))))))
(common-lisp:progn
 (common-lisp:defstruct (put-records-output (:copier common-lisp:nil))
   (failed-record-count common-lisp:nil :type
    (common-lisp:or positive-integer-object common-lisp:null))
   (records
    (common-lisp:error #A((20) common-lisp:base-char . ":records is required"))
    :type (common-lisp:or put-records-result-entry-list common-lisp:null))
   (encryption-type common-lisp:nil :type
    (common-lisp:or encryption-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-records-output 'make-put-records-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape put-records-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "FailedRecordCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'failed-record-count)))
    (aws-sdk/generator/shape::to-query-params "Records"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'records)))
    (aws-sdk/generator/shape::to-query-params "EncryptionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encryption-type))))))
(common-lisp:progn
 (common-lisp:defstruct (put-records-request-entry (:copier common-lisp:nil))
   (data
    (common-lisp:error #A((17) common-lisp:base-char . ":data is required"))
    :type (common-lisp:or data common-lisp:null))
   (explicit-hash-key common-lisp:nil :type
    (common-lisp:or hash-key common-lisp:null))
   (partition-key
    (common-lisp:error
     #A((26) common-lisp:base-char . ":partition-key is required"))
    :type (common-lisp:or partition-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-records-request-entry
                    'make-put-records-request-entry))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-records-request-entry))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Data"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'data)))
    (aws-sdk/generator/shape::to-query-params "ExplicitHashKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'explicit-hash-key)))
    (aws-sdk/generator/shape::to-query-params "PartitionKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-key))))))
(common-lisp:progn
 (common-lisp:deftype put-records-request-entry-list ()
   '(trivial-types:proper-list put-records-request-entry))
 (common-lisp:defun |make-put-records-request-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-records-request-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (put-records-result-entry (:copier common-lisp:nil))
   (sequence-number common-lisp:nil :type
    (common-lisp:or sequence-number common-lisp:null))
   (shard-id common-lisp:nil :type (common-lisp:or shard-id common-lisp:null))
   (error-code common-lisp:nil :type
    (common-lisp:or error-code common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-records-result-entry 'make-put-records-result-entry))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-records-result-entry))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SequenceNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sequence-number)))
    (aws-sdk/generator/shape::to-query-params "ShardId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-id)))
    (aws-sdk/generator/shape::to-query-params "ErrorCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-code)))
    (aws-sdk/generator/shape::to-query-params "ErrorMessage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-message))))))
(common-lisp:progn
 (common-lisp:deftype put-records-result-entry-list ()
   '(trivial-types:proper-list put-records-result-entry))
 (common-lisp:defun |make-put-records-result-entry-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            put-records-result-entry))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (record (:copier common-lisp:nil))
   (sequence-number
    (common-lisp:error
     #A((28) common-lisp:base-char . ":sequence-number is required"))
    :type (common-lisp:or sequence-number common-lisp:null))
   (approximate-arrival-timestamp common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (data
    (common-lisp:error #A((17) common-lisp:base-char . ":data is required"))
    :type (common-lisp:or data common-lisp:null))
   (partition-key
    (common-lisp:error
     #A((26) common-lisp:base-char . ":partition-key is required"))
    :type (common-lisp:or partition-key common-lisp:null))
   (encryption-type common-lisp:nil :type
    (common-lisp:or encryption-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'record 'make-record))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape record))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SequenceNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sequence-number)))
    (aws-sdk/generator/shape::to-query-params "ApproximateArrivalTimestamp"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'approximate-arrival-timestamp)))
    (aws-sdk/generator/shape::to-query-params "Data"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'data)))
    (aws-sdk/generator/shape::to-query-params "PartitionKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'partition-key)))
    (aws-sdk/generator/shape::to-query-params "EncryptionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encryption-type))))))
(common-lisp:progn
 (common-lisp:deftype record-list () '(trivial-types:proper-list record))
 (common-lisp:defun |make-record-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list record))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (remove-tags-from-stream-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (tag-keys
    (common-lisp:error
     #A((21) common-lisp:base-char . ":tag-keys is required"))
    :type (common-lisp:or tag-key-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-from-stream-input
                    'make-remove-tags-from-stream-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          remove-tags-from-stream-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "TagKeys"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tag-keys))))))
(common-lisp:progn
 (common-lisp:defstruct (resource-in-use-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-in-use-exception
                    'make-resource-in-use-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          resource-in-use-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-not-found-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or error-message common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'make-resource-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          resource-not-found-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:deftype scaling-type () 'common-lisp:string)
(common-lisp:deftype sequence-number () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (sequence-number-range (:copier common-lisp:nil))
   (starting-sequence-number
    (common-lisp:error
     #A((37) common-lisp:base-char . ":starting-sequence-number is required"))
    :type (common-lisp:or sequence-number common-lisp:null))
   (ending-sequence-number common-lisp:nil :type
    (common-lisp:or sequence-number common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'sequence-number-range 'make-sequence-number-range))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          sequence-number-range))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StartingSequenceNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'starting-sequence-number)))
    (aws-sdk/generator/shape::to-query-params "EndingSequenceNumber"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ending-sequence-number))))))
(common-lisp:progn
 (common-lisp:defstruct (shard (:copier common-lisp:nil))
   (shard-id
    (common-lisp:error
     #A((21) common-lisp:base-char . ":shard-id is required"))
    :type (common-lisp:or shard-id common-lisp:null))
   (parent-shard-id common-lisp:nil :type
    (common-lisp:or shard-id common-lisp:null))
   (adjacent-parent-shard-id common-lisp:nil :type
    (common-lisp:or shard-id common-lisp:null))
   (hash-key-range
    (common-lisp:error
     #A((27) common-lisp:base-char . ":hash-key-range is required"))
    :type (common-lisp:or hash-key-range common-lisp:null))
   (sequence-number-range
    (common-lisp:error
     #A((34) common-lisp:base-char . ":sequence-number-range is required"))
    :type (common-lisp:or sequence-number-range common-lisp:null)))
 (common-lisp:export (common-lisp:list 'shard 'make-shard))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape shard))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ShardId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-id)))
    (aws-sdk/generator/shape::to-query-params "ParentShardId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parent-shard-id)))
    (aws-sdk/generator/shape::to-query-params "AdjacentParentShardId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'adjacent-parent-shard-id)))
    (aws-sdk/generator/shape::to-query-params "HashKeyRange"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hash-key-range)))
    (aws-sdk/generator/shape::to-query-params "SequenceNumberRange"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sequence-number-range))))))
(common-lisp:deftype shard-count-object () 'common-lisp:integer)
(common-lisp:deftype shard-id () 'common-lisp:string)
(common-lisp:deftype shard-iterator () 'common-lisp:string)
(common-lisp:deftype shard-iterator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype shard-list () '(trivial-types:proper-list shard))
 (common-lisp:defun |make-shard-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list shard))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (split-shard-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (shard-to-split
    (common-lisp:error
     #A((27) common-lisp:base-char . ":shard-to-split is required"))
    :type (common-lisp:or shard-id common-lisp:null))
   (new-starting-hash-key
    (common-lisp:error
     #A((34) common-lisp:base-char . ":new-starting-hash-key is required"))
    :type (common-lisp:or hash-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'split-shard-input 'make-split-shard-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape split-shard-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "ShardToSplit"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shard-to-split)))
    (aws-sdk/generator/shape::to-query-params "NewStartingHashKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-starting-hash-key))))))
(common-lisp:progn
 (common-lisp:defstruct
     (start-stream-encryption-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (encryption-type
    (common-lisp:error
     #A((28) common-lisp:base-char . ":encryption-type is required"))
    :type (common-lisp:or encryption-type common-lisp:null))
   (key-id
    (common-lisp:error #A((19) common-lisp:base-char . ":key-id is required"))
    :type (common-lisp:or key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-stream-encryption-input
                    'make-start-stream-encryption-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-stream-encryption-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "EncryptionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encryption-type)))
    (aws-sdk/generator/shape::to-query-params "KeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (stop-stream-encryption-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (encryption-type
    (common-lisp:error
     #A((28) common-lisp:base-char . ":encryption-type is required"))
    :type (common-lisp:or encryption-type common-lisp:null))
   (key-id
    (common-lisp:error #A((19) common-lisp:base-char . ":key-id is required"))
    :type (common-lisp:or key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stop-stream-encryption-input
                    'make-stop-stream-encryption-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          stop-stream-encryption-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "EncryptionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encryption-type)))
    (aws-sdk/generator/shape::to-query-params "KeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key-id))))))
(common-lisp:deftype stream-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (stream-description (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (stream-arn
    (common-lisp:error
     #A((23) common-lisp:base-char . ":stream-arn is required"))
    :type (common-lisp:or stream-arn common-lisp:null))
   (stream-status
    (common-lisp:error
     #A((26) common-lisp:base-char . ":stream-status is required"))
    :type (common-lisp:or stream-status common-lisp:null))
   (shards
    (common-lisp:error #A((19) common-lisp:base-char . ":shards is required"))
    :type (common-lisp:or shard-list common-lisp:null))
   (has-more-shards
    (common-lisp:error
     #A((28) common-lisp:base-char . ":has-more-shards is required"))
    :type (common-lisp:or boolean-object common-lisp:null))
   (retention-period-hours
    (common-lisp:error
     #A((35) common-lisp:base-char . ":retention-period-hours is required"))
    :type (common-lisp:or positive-integer-object common-lisp:null))
   (stream-creation-timestamp
    (common-lisp:error
     #A((38) common-lisp:base-char . ":stream-creation-timestamp is required"))
    :type (common-lisp:or timestamp common-lisp:null))
   (enhanced-monitoring
    (common-lisp:error
     #A((32) common-lisp:base-char . ":enhanced-monitoring is required"))
    :type (common-lisp:or enhanced-monitoring-list common-lisp:null))
   (encryption-type common-lisp:nil :type
    (common-lisp:or encryption-type common-lisp:null))
   (key-id common-lisp:nil :type (common-lisp:or key-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stream-description 'make-stream-description))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape stream-description))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "StreamARN"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-arn)))
    (aws-sdk/generator/shape::to-query-params "StreamStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-status)))
    (aws-sdk/generator/shape::to-query-params "Shards"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'shards)))
    (aws-sdk/generator/shape::to-query-params "HasMoreShards"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'has-more-shards)))
    (aws-sdk/generator/shape::to-query-params "RetentionPeriodHours"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'retention-period-hours)))
    (aws-sdk/generator/shape::to-query-params "StreamCreationTimestamp"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-creation-timestamp)))
    (aws-sdk/generator/shape::to-query-params "EnhancedMonitoring"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'enhanced-monitoring)))
    (aws-sdk/generator/shape::to-query-params "EncryptionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encryption-type)))
    (aws-sdk/generator/shape::to-query-params "KeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key-id))))))
(common-lisp:deftype stream-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stream-name-list ()
   '(trivial-types:proper-list stream-name))
 (common-lisp:defun |make-stream-name-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stream-name))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stream-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (tag (:copier common-lisp:nil))
   (key (common-lisp:error #A((16) common-lisp:base-char . ":key is required"))
    :type (common-lisp:or tag-key common-lisp:null))
   (value common-lisp:nil :type (common-lisp:or tag-value common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape tag))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Key"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key)))
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value))))))
(common-lisp:deftype tag-key () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype tag-key-list () '(trivial-types:proper-list tag-key))
 (common-lisp:defun |make-tag-key-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag-key))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype tag-list () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-tag-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:defstruct
    (tag-map
     (:constructor |make-tag-map|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:deftype tag-value () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (update-shard-count-input (:copier common-lisp:nil))
   (stream-name
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stream-name is required"))
    :type (common-lisp:or stream-name common-lisp:null))
   (target-shard-count
    (common-lisp:error
     #A((31) common-lisp:base-char . ":target-shard-count is required"))
    :type (common-lisp:or positive-integer-object common-lisp:null))
   (scaling-type
    (common-lisp:error
     #A((25) common-lisp:base-char . ":scaling-type is required"))
    :type (common-lisp:or scaling-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-shard-count-input 'make-update-shard-count-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-shard-count-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "TargetShardCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target-shard-count)))
    (aws-sdk/generator/shape::to-query-params "ScalingType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'scaling-type))))))
(common-lisp:progn
 (common-lisp:defstruct (update-shard-count-output (:copier common-lisp:nil))
   (stream-name common-lisp:nil :type
    (common-lisp:or stream-name common-lisp:null))
   (current-shard-count common-lisp:nil :type
    (common-lisp:or positive-integer-object common-lisp:null))
   (target-shard-count common-lisp:nil :type
    (common-lisp:or positive-integer-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-shard-count-output
                    'make-update-shard-count-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-shard-count-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StreamName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stream-name)))
    (aws-sdk/generator/shape::to-query-params "CurrentShardCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'current-shard-count)))
    (aws-sdk/generator/shape::to-query-params "TargetShardCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target-shard-count))))))
(common-lisp:progn
 (common-lisp:defun add-tags-to-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name tags)
   (common-lisp:declare (common-lisp:ignorable stream-name tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-to-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AddTagsToStream")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'add-tags-to-stream))
(common-lisp:progn
 (common-lisp:defun create-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-count)
   (common-lisp:declare (common-lisp:ignorable stream-name shard-count))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateStream")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'create-stream))
(common-lisp:progn
 (common-lisp:defun decrease-stream-retention-period
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name retention-period-hours)
   (common-lisp:declare
    (common-lisp:ignorable stream-name retention-period-hours))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-decrease-stream-retention-period-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DecreaseStreamRetentionPeriod")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'decrease-stream-retention-period))
(common-lisp:progn
 (common-lisp:defun delete-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name)
   (common-lisp:declare (common-lisp:ignorable stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteStream")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-stream))
(common-lisp:progn
 (common-lisp:defun describe-limits ()
   (aws-sdk/generator/operation::parse-response
    (aws-sdk/api:aws-request :service #A((7) common-lisp:base-char . "kinesis")
                             :method :post :params
                             (common-lisp:cons "Action" "DescribeLimits"))
    "DescribeLimitsOutput" common-lisp:nil))
 (common-lisp:export 'describe-limits))
(common-lisp:progn
 (common-lisp:defun describe-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name limit
                     exclusive-start-shard-id)
   (common-lisp:declare
    (common-lisp:ignorable stream-name limit exclusive-start-shard-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeStream")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeStreamOutput" common-lisp:nil)))
 (common-lisp:export 'describe-stream))
(common-lisp:progn
 (common-lisp:defun disable-enhanced-monitoring
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-level-metrics)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-level-metrics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-disable-enhanced-monitoring-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DisableEnhancedMonitoring")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "EnhancedMonitoringOutput" common-lisp:nil)))
 (common-lisp:export 'disable-enhanced-monitoring))
(common-lisp:progn
 (common-lisp:defun enable-enhanced-monitoring
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-level-metrics)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-level-metrics))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-enhanced-monitoring-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"EnableEnhancedMonitoring")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "EnhancedMonitoringOutput" common-lisp:nil)))
 (common-lisp:export 'enable-enhanced-monitoring))
(common-lisp:progn
 (common-lisp:defun get-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key shard-iterator limit)
   (common-lisp:declare (common-lisp:ignorable shard-iterator limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-records-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetRecords")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetRecordsOutput" common-lisp:nil)))
 (common-lisp:export 'get-records))
(common-lisp:progn
 (common-lisp:defun get-shard-iterator
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-id shard-iterator-type
                     starting-sequence-number timestamp)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-id shard-iterator-type
     starting-sequence-number timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-shard-iterator-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetShardIterator")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetShardIteratorOutput" common-lisp:nil)))
 (common-lisp:export 'get-shard-iterator))
(common-lisp:progn
 (common-lisp:defun increase-stream-retention-period
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name retention-period-hours)
   (common-lisp:declare
    (common-lisp:ignorable stream-name retention-period-hours))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-increase-stream-retention-period-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"IncreaseStreamRetentionPeriod")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'increase-stream-retention-period))
(common-lisp:progn
 (common-lisp:defun list-streams
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key limit exclusive-start-stream-name)
   (common-lisp:declare
    (common-lisp:ignorable limit exclusive-start-stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-streams-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListStreams")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListStreamsOutput" common-lisp:nil)))
 (common-lisp:export 'list-streams))
(common-lisp:progn
 (common-lisp:defun list-tags-for-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name exclusive-start-tag-key
                     limit)
   (common-lisp:declare
    (common-lisp:ignorable stream-name exclusive-start-tag-key limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-tags-for-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListTagsForStream")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListTagsForStreamOutput" common-lisp:nil)))
 (common-lisp:export 'list-tags-for-stream))
(common-lisp:progn
 (common-lisp:defun merge-shards
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-to-merge
                     adjacent-shard-to-merge)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-to-merge adjacent-shard-to-merge))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-merge-shards-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"MergeShards")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'merge-shards))
(common-lisp:progn
 (common-lisp:defun put-record
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name data partition-key
                     explicit-hash-key sequence-number-for-ordering)
   (common-lisp:declare
    (common-lisp:ignorable stream-name data partition-key explicit-hash-key
     sequence-number-for-ordering))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-record-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutRecord")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "PutRecordOutput" common-lisp:nil)))
 (common-lisp:export 'put-record))
(common-lisp:progn
 (common-lisp:defun put-records
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key records stream-name)
   (common-lisp:declare (common-lisp:ignorable records stream-name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-records-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutRecords")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "PutRecordsOutput" common-lisp:nil)))
 (common-lisp:export 'put-records))
(common-lisp:progn
 (common-lisp:defun remove-tags-from-stream
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name tag-keys)
   (common-lisp:declare (common-lisp:ignorable stream-name tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-from-stream-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"RemoveTagsFromStream")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'remove-tags-from-stream))
(common-lisp:progn
 (common-lisp:defun split-shard
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name shard-to-split
                     new-starting-hash-key)
   (common-lisp:declare
    (common-lisp:ignorable stream-name shard-to-split new-starting-hash-key))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-split-shard-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SplitShard")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'split-shard))
(common-lisp:progn
 (common-lisp:defun start-stream-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name encryption-type key-id)
   (common-lisp:declare
    (common-lisp:ignorable stream-name encryption-type key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-stream-encryption-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StartStreamEncryption")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'start-stream-encryption))
(common-lisp:progn
 (common-lisp:defun stop-stream-encryption
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name encryption-type key-id)
   (common-lisp:declare
    (common-lisp:ignorable stream-name encryption-type key-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-stop-stream-encryption-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StopStreamEncryption")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'stop-stream-encryption))
(common-lisp:progn
 (common-lisp:defun update-shard-count
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key stream-name target-shard-count
                     scaling-type)
   (common-lisp:declare
    (common-lisp:ignorable stream-name target-shard-count scaling-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-shard-count-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((7) common-lisp:base-char . "kinesis")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdateShardCount")
                                  ("Version" ,@"2013-12-02"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdateShardCountOutput" common-lisp:nil)))
 (common-lisp:export 'update-shard-count))