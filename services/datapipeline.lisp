;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/datapipeline
  (:use)
  (:nicknames #:aws/datapipeline)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/datapipeline)

(common-lisp:progn
 (common-lisp:defstruct (activate-pipeline-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (parameter-values common-lisp:nil :type
    (common-lisp:or parameter-value-list common-lisp:null))
   (start-timestamp common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'activate-pipeline-input 'make-activate-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          activate-pipeline-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "parameterValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameter-values)))
    (aws-sdk/generator/shape::to-query-params "startTimestamp"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-timestamp))))))
(common-lisp:progn
 (common-lisp:defstruct (activate-pipeline-output (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'activate-pipeline-output 'make-activate-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          activate-pipeline-output))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (add-tags-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (tags
    (common-lisp:error #A((17) common-lisp:base-char . ":tags is required"))
    :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'add-tags-input 'make-add-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape add-tags-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "tags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tags))))))
(common-lisp:progn
 (common-lisp:defstruct (add-tags-output (:copier common-lisp:nil)))
 (common-lisp:export (common-lisp:list 'add-tags-output 'make-add-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape add-tags-output))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (create-pipeline-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (unique-id
    (common-lisp:error
     #A((21) common-lisp:base-char . ":uniqueid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-input 'make-create-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-pipeline-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "uniqueId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'unique-id)))
    (aws-sdk/generator/shape::to-query-params "description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "tags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tags))))))
(common-lisp:progn
 (common-lisp:defstruct (create-pipeline-output (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-output 'make-create-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-pipeline-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id))))))
(common-lisp:progn
 (common-lisp:defstruct (deactivate-pipeline-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (cancel-active common-lisp:nil :type
    (common-lisp:or |cancelActive| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'deactivate-pipeline-input
                    'make-deactivate-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          deactivate-pipeline-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "cancelActive"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'cancel-active))))))
(common-lisp:progn
 (common-lisp:defstruct (deactivate-pipeline-output (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'deactivate-pipeline-output
                    'make-deactivate-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          deactivate-pipeline-output))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (delete-pipeline-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-input 'make-delete-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-pipeline-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-objects-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (object-ids
    (common-lisp:error
     #A((22) common-lisp:base-char . ":objectids is required"))
    :type (common-lisp:or |idList| common-lisp:null))
   (evaluate-expressions common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-objects-input 'make-describe-objects-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-objects-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "objectIds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'object-ids)))
    (aws-sdk/generator/shape::to-query-params "evaluateExpressions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'evaluate-expressions)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-objects-output (:copier common-lisp:nil))
   (pipeline-objects
    (common-lisp:error
     #A((28) common-lisp:base-char . ":pipelineobjects is required"))
    :type (common-lisp:or pipeline-object-list common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (has-more-results common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-objects-output 'make-describe-objects-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-objects-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineObjects"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-objects)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "hasMoreResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'has-more-results))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-pipelines-input (:copier common-lisp:nil))
   (pipeline-ids
    (common-lisp:error
     #A((24) common-lisp:base-char . ":pipelineids is required"))
    :type (common-lisp:or |idList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pipelines-input 'make-describe-pipelines-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-pipelines-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineIds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-ids))))))
(common-lisp:progn
 (common-lisp:defstruct (describe-pipelines-output (:copier common-lisp:nil))
   (pipeline-description-list
    (common-lisp:error
     #A((36) common-lisp:base-char . ":pipelinedescriptionlist is required"))
    :type (common-lisp:or pipeline-description-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'describe-pipelines-output
                    'make-describe-pipelines-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          describe-pipelines-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineDescriptionList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-description-list))))))
(common-lisp:progn
 (common-lisp:defstruct (evaluate-expression-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (object-id
    (common-lisp:error
     #A((21) common-lisp:base-char . ":objectid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (expression
    (common-lisp:error
     #A((23) common-lisp:base-char . ":expression is required"))
    :type (common-lisp:or |longString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluate-expression-input
                    'make-evaluate-expression-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          evaluate-expression-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "objectId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'object-id)))
    (aws-sdk/generator/shape::to-query-params "expression"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'expression))))))
(common-lisp:progn
 (common-lisp:defstruct (evaluate-expression-output (:copier common-lisp:nil))
   (evaluated-expression
    (common-lisp:error
     #A((32) common-lisp:base-char . ":evaluatedexpression is required"))
    :type (common-lisp:or |longString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'evaluate-expression-output
                    'make-evaluate-expression-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          evaluate-expression-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "evaluatedExpression"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'evaluated-expression))))))
(common-lisp:progn
 (common-lisp:defstruct (field (:copier common-lisp:nil))
   (key (common-lisp:error #A((16) common-lisp:base-char . ":key is required"))
    :type (common-lisp:or |fieldNameString| common-lisp:null))
   (string-value common-lisp:nil :type
    (common-lisp:or |fieldStringValue| common-lisp:null))
   (ref-value common-lisp:nil :type
    (common-lisp:or |fieldNameString| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'field 'make-field))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape field))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "key"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key)))
    (aws-sdk/generator/shape::to-query-params "stringValue"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'string-value)))
    (aws-sdk/generator/shape::to-query-params "refValue"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ref-value))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-definition-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-definition-input
                    'make-get-pipeline-definition-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-pipeline-definition-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-definition-output (:copier common-lisp:nil))
   (pipeline-objects common-lisp:nil :type
    (common-lisp:or pipeline-object-list common-lisp:null))
   (parameter-objects common-lisp:nil :type
    (common-lisp:or parameter-object-list common-lisp:null))
   (parameter-values common-lisp:nil :type
    (common-lisp:or parameter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-definition-output
                    'make-get-pipeline-definition-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-pipeline-definition-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineObjects"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-objects)))
    (aws-sdk/generator/shape::to-query-params "parameterObjects"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameter-objects)))
    (aws-sdk/generator/shape::to-query-params "parameterValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameter-values))))))
(common-lisp:progn
 (common-lisp:defstruct (instance-identity (:copier common-lisp:nil))
   (document common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (signature common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'instance-identity 'make-instance-identity))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape instance-identity))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "document"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'document)))
    (aws-sdk/generator/shape::to-query-params "signature"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'signature))))))
(common-lisp:progn
 (common-lisp:defstruct (internal-service-error (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'internal-service-error 'make-internal-service-error))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          internal-service-error))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (invalid-request-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'invalid-request-exception
                    'make-invalid-request-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-request-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (list-pipelines-input (:copier common-lisp:nil))
   (marker common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-input 'make-list-pipelines-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-pipelines-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker))))))
(common-lisp:progn
 (common-lisp:defstruct (list-pipelines-output (:copier common-lisp:nil))
   (pipeline-id-list
    (common-lisp:error
     #A((27) common-lisp:base-char . ":pipelineidlist is required"))
    :type (common-lisp:or |pipelineList| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (has-more-results common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-output 'make-list-pipelines-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-pipelines-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineIdList"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id-list)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "hasMoreResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'has-more-results))))))
(common-lisp:progn
 (common-lisp:defstruct (operator (:copier common-lisp:nil))
   (type common-lisp:nil :type (common-lisp:or operator-type common-lisp:null))
   (values common-lisp:nil :type
    (common-lisp:or |stringList| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'operator 'make-operator))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape operator))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "values"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'values))))))
(common-lisp:deftype operator-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (parameter-attribute (:copier common-lisp:nil))
   (key (common-lisp:error #A((16) common-lisp:base-char . ":key is required"))
    :type (common-lisp:or |attributeNameString| common-lisp:null))
   (string-value
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stringvalue is required"))
    :type (common-lisp:or |attributeValueString| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-attribute 'make-parameter-attribute))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape parameter-attribute))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "key"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key)))
    (aws-sdk/generator/shape::to-query-params "stringValue"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'string-value))))))
(common-lisp:progn
 (common-lisp:deftype parameter-attribute-list ()
   '(trivial-types:proper-list parameter-attribute))
 (common-lisp:defun |make-parameter-attribute-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (parameter-object (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or |fieldNameString| common-lisp:null))
   (attributes
    (common-lisp:error
     #A((23) common-lisp:base-char . ":attributes is required"))
    :type (common-lisp:or parameter-attribute-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'parameter-object 'make-parameter-object))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape parameter-object))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "attributes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attributes))))))
(common-lisp:progn
 (common-lisp:deftype parameter-object-list ()
   '(trivial-types:proper-list parameter-object))
 (common-lisp:defun |make-parameter-object-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-object))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (parameter-value (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or |fieldNameString| common-lisp:null))
   (string-value
    (common-lisp:error
     #A((24) common-lisp:base-char . ":stringvalue is required"))
    :type (common-lisp:or |fieldStringValue| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'parameter-value 'make-parameter-value))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape parameter-value))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "stringValue"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'string-value))))))
(common-lisp:progn
 (common-lisp:deftype parameter-value-list ()
   '(trivial-types:proper-list parameter-value))
 (common-lisp:defun |make-parameter-value-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list parameter-value))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (pipeline-deleted-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-deleted-exception
                    'make-pipeline-deleted-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          pipeline-deleted-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (pipeline-description (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (fields
    (common-lisp:error #A((19) common-lisp:base-char . ":fields is required"))
    :type (common-lisp:or |fieldList| common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (tags common-lisp:nil :type (common-lisp:or |tagList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-description 'make-pipeline-description))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape pipeline-description))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "fields"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'fields)))
    (aws-sdk/generator/shape::to-query-params "description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "tags"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tags))))))
(common-lisp:progn
 (common-lisp:deftype pipeline-description-list ()
   '(trivial-types:proper-list pipeline-description))
 (common-lisp:defun |make-pipeline-description-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-description))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (pipeline-id-name (:copier common-lisp:nil))
   (id common-lisp:nil :type (common-lisp:or |id| common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or |id| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-id-name 'make-pipeline-id-name))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape pipeline-id-name))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-not-found-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-not-found-exception
                    'make-pipeline-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          pipeline-not-found-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (pipeline-object (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (fields
    (common-lisp:error #A((19) common-lisp:base-char . ":fields is required"))
    :type (common-lisp:or |fieldList| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pipeline-object 'make-pipeline-object))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape pipeline-object))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "fields"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'fields))))))
(common-lisp:progn
 (common-lisp:deftype pipeline-object-list ()
   '(trivial-types:proper-list pipeline-object))
 (common-lisp:defun |make-pipeline-object-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-object))
   aws-sdk/generator/shape::members))
(common-lisp:defstruct
    (pipeline-object-map
     (:constructor |make-pipeline-object-map|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:progn
 (common-lisp:defstruct (poll-for-task-input (:copier common-lisp:nil))
   (worker-group
    (common-lisp:error
     #A((24) common-lisp:base-char . ":workergroup is required"))
    :type (common-lisp:or common-lisp:string common-lisp:null))
   (hostname common-lisp:nil :type (common-lisp:or |id| common-lisp:null))
   (instance-identity common-lisp:nil :type
    (common-lisp:or instance-identity common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-task-input 'make-poll-for-task-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape poll-for-task-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "workerGroup"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'worker-group)))
    (aws-sdk/generator/shape::to-query-params "hostname"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hostname)))
    (aws-sdk/generator/shape::to-query-params "instanceIdentity"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'instance-identity))))))
(common-lisp:progn
 (common-lisp:defstruct (poll-for-task-output (:copier common-lisp:nil))
   (task-object common-lisp:nil :type
    (common-lisp:or task-object common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-task-output 'make-poll-for-task-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape poll-for-task-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "taskObject"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'task-object))))))
(common-lisp:progn
 (common-lisp:defstruct
     (put-pipeline-definition-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (pipeline-objects
    (common-lisp:error
     #A((28) common-lisp:base-char . ":pipelineobjects is required"))
    :type (common-lisp:or pipeline-object-list common-lisp:null))
   (parameter-objects common-lisp:nil :type
    (common-lisp:or parameter-object-list common-lisp:null))
   (parameter-values common-lisp:nil :type
    (common-lisp:or parameter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-pipeline-definition-input
                    'make-put-pipeline-definition-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-pipeline-definition-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "pipelineObjects"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-objects)))
    (aws-sdk/generator/shape::to-query-params "parameterObjects"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameter-objects)))
    (aws-sdk/generator/shape::to-query-params "parameterValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameter-values))))))
(common-lisp:progn
 (common-lisp:defstruct
     (put-pipeline-definition-output (:copier common-lisp:nil))
   (validation-errors common-lisp:nil :type
    (common-lisp:or validation-errors common-lisp:null))
   (validation-warnings common-lisp:nil :type
    (common-lisp:or validation-warnings common-lisp:null))
   (errored
    (common-lisp:error #A((20) common-lisp:base-char . ":errored is required"))
    :type (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-pipeline-definition-output
                    'make-put-pipeline-definition-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-pipeline-definition-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "validationErrors"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'validation-errors)))
    (aws-sdk/generator/shape::to-query-params "validationWarnings"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'validation-warnings)))
    (aws-sdk/generator/shape::to-query-params "errored"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'errored))))))
(common-lisp:progn
 (common-lisp:defstruct (query (:copier common-lisp:nil))
   (selectors common-lisp:nil :type
    (common-lisp:or selector-list common-lisp:null)))
 (common-lisp:export (common-lisp:list 'query 'make-query))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape query))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "selectors"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'selectors))))))
(common-lisp:progn
 (common-lisp:defstruct (query-objects-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (query common-lisp:nil :type (common-lisp:or query common-lisp:null))
   (sphere
    (common-lisp:error #A((19) common-lisp:base-char . ":sphere is required"))
    :type (common-lisp:or common-lisp:string common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (limit common-lisp:nil :type (common-lisp:or |int| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-objects-input 'make-query-objects-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape query-objects-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "query"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'query)))
    (aws-sdk/generator/shape::to-query-params "sphere"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sphere)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "limit"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'limit))))))
(common-lisp:progn
 (common-lisp:defstruct (query-objects-output (:copier common-lisp:nil))
   (ids common-lisp:nil :type (common-lisp:or |idList| common-lisp:null))
   (marker common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (has-more-results common-lisp:nil :type
    (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'query-objects-output 'make-query-objects-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape query-objects-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ids"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'ids)))
    (aws-sdk/generator/shape::to-query-params "marker"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'marker)))
    (aws-sdk/generator/shape::to-query-params "hasMoreResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'has-more-results))))))
(common-lisp:progn
 (common-lisp:defstruct (remove-tags-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (tag-keys
    (common-lisp:error #A((20) common-lisp:base-char . ":tagkeys is required"))
    :type (common-lisp:or |stringList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-input 'make-remove-tags-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape remove-tags-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "tagKeys"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'tag-keys))))))
(common-lisp:progn
 (common-lisp:defstruct (remove-tags-output (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'remove-tags-output 'make-remove-tags-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape remove-tags-output))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (report-task-progress-input (:copier common-lisp:nil))
   (task-id
    (common-lisp:error #A((19) common-lisp:base-char . ":taskid is required"))
    :type (common-lisp:or |taskId| common-lisp:null))
   (fields common-lisp:nil :type
    (common-lisp:or |fieldList| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'report-task-progress-input
                    'make-report-task-progress-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          report-task-progress-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "taskId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'task-id)))
    (aws-sdk/generator/shape::to-query-params "fields"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'fields))))))
(common-lisp:progn
 (common-lisp:defstruct (report-task-progress-output (:copier common-lisp:nil))
   (canceled
    (common-lisp:error
     #A((21) common-lisp:base-char . ":canceled is required"))
    :type (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'report-task-progress-output
                    'make-report-task-progress-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          report-task-progress-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "canceled"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'canceled))))))
(common-lisp:progn
 (common-lisp:defstruct
     (report-task-runner-heartbeat-input (:copier common-lisp:nil))
   (taskrunner-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":taskrunnerid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (worker-group common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (hostname common-lisp:nil :type (common-lisp:or |id| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'report-task-runner-heartbeat-input
                    'make-report-task-runner-heartbeat-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          report-task-runner-heartbeat-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "taskrunnerId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'taskrunner-id)))
    (aws-sdk/generator/shape::to-query-params "workerGroup"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'worker-group)))
    (aws-sdk/generator/shape::to-query-params "hostname"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'hostname))))))
(common-lisp:progn
 (common-lisp:defstruct
     (report-task-runner-heartbeat-output (:copier common-lisp:nil))
   (terminate
    (common-lisp:error
     #A((22) common-lisp:base-char . ":terminate is required"))
    :type (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'report-task-runner-heartbeat-output
                    'make-report-task-runner-heartbeat-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          report-task-runner-heartbeat-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "terminate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'terminate))))))
(common-lisp:progn
 (common-lisp:defstruct (selector (:copier common-lisp:nil))
   (field-name common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (operator common-lisp:nil :type (common-lisp:or operator common-lisp:null)))
 (common-lisp:export (common-lisp:list 'selector 'make-selector))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape selector))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "fieldName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'field-name)))
    (aws-sdk/generator/shape::to-query-params "operator"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'operator))))))
(common-lisp:progn
 (common-lisp:deftype selector-list () '(trivial-types:proper-list selector))
 (common-lisp:defun |make-selector-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list selector))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (set-status-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (object-ids
    (common-lisp:error
     #A((22) common-lisp:base-char . ":objectids is required"))
    :type (common-lisp:or |idList| common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-status-input 'make-set-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape set-status-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "objectIds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'object-ids)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:progn
 (common-lisp:defstruct (set-task-status-input (:copier common-lisp:nil))
   (task-id
    (common-lisp:error #A((19) common-lisp:base-char . ":taskid is required"))
    :type (common-lisp:or |taskId| common-lisp:null))
   (task-status
    (common-lisp:error
     #A((23) common-lisp:base-char . ":taskstatus is required"))
    :type (common-lisp:or task-status common-lisp:null))
   (error-id common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null))
   (error-message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null))
   (error-stack-trace common-lisp:nil :type
    (common-lisp:or common-lisp:string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'set-task-status-input 'make-set-task-status-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          set-task-status-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "taskId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'task-id)))
    (aws-sdk/generator/shape::to-query-params "taskStatus"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'task-status)))
    (aws-sdk/generator/shape::to-query-params "errorId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-id)))
    (aws-sdk/generator/shape::to-query-params "errorMessage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-message)))
    (aws-sdk/generator/shape::to-query-params "errorStackTrace"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-stack-trace))))))
(common-lisp:progn
 (common-lisp:defstruct (set-task-status-output (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'set-task-status-output 'make-set-task-status-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          set-task-status-output))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (tag (:copier common-lisp:nil))
   (key (common-lisp:error #A((16) common-lisp:base-char . ":key is required"))
    :type (common-lisp:or |tagKey| common-lisp:null))
   (value
    (common-lisp:error #A((18) common-lisp:base-char . ":value is required"))
    :type (common-lisp:or |tagValue| common-lisp:null)))
 (common-lisp:export (common-lisp:list 'tag 'make-tag))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape tag))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "key"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key)))
    (aws-sdk/generator/shape::to-query-params "value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value))))))
(common-lisp:progn
 (common-lisp:defstruct (task-not-found-exception (:copier common-lisp:nil))
   (message common-lisp:nil :type
    (common-lisp:or |errorMessage| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'task-not-found-exception 'make-task-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          task-not-found-exception))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (task-object (:copier common-lisp:nil))
   (task-id common-lisp:nil :type (common-lisp:or |taskId| common-lisp:null))
   (pipeline-id common-lisp:nil :type (common-lisp:or |id| common-lisp:null))
   (attempt-id common-lisp:nil :type (common-lisp:or |id| common-lisp:null))
   (objects common-lisp:nil :type
    (common-lisp:or pipeline-object-map common-lisp:null)))
 (common-lisp:export (common-lisp:list 'task-object 'make-task-object))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape task-object))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "taskId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'task-id)))
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "attemptId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attempt-id)))
    (aws-sdk/generator/shape::to-query-params "objects"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'objects))))))
(common-lisp:deftype task-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (validate-pipeline-definition-input (:copier common-lisp:nil))
   (pipeline-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":pipelineid is required"))
    :type (common-lisp:or |id| common-lisp:null))
   (pipeline-objects
    (common-lisp:error
     #A((28) common-lisp:base-char . ":pipelineobjects is required"))
    :type (common-lisp:or pipeline-object-list common-lisp:null))
   (parameter-objects common-lisp:nil :type
    (common-lisp:or parameter-object-list common-lisp:null))
   (parameter-values common-lisp:nil :type
    (common-lisp:or parameter-value-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-pipeline-definition-input
                    'make-validate-pipeline-definition-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          validate-pipeline-definition-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-id)))
    (aws-sdk/generator/shape::to-query-params "pipelineObjects"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-objects)))
    (aws-sdk/generator/shape::to-query-params "parameterObjects"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameter-objects)))
    (aws-sdk/generator/shape::to-query-params "parameterValues"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parameter-values))))))
(common-lisp:progn
 (common-lisp:defstruct
     (validate-pipeline-definition-output (:copier common-lisp:nil))
   (validation-errors common-lisp:nil :type
    (common-lisp:or validation-errors common-lisp:null))
   (validation-warnings common-lisp:nil :type
    (common-lisp:or validation-warnings common-lisp:null))
   (errored
    (common-lisp:error #A((20) common-lisp:base-char . ":errored is required"))
    :type (common-lisp:or common-lisp:boolean common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validate-pipeline-definition-output
                    'make-validate-pipeline-definition-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          validate-pipeline-definition-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "validationErrors"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'validation-errors)))
    (aws-sdk/generator/shape::to-query-params "validationWarnings"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'validation-warnings)))
    (aws-sdk/generator/shape::to-query-params "errored"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'errored))))))
(common-lisp:progn
 (common-lisp:defstruct (validation-error (:copier common-lisp:nil))
   (id common-lisp:nil :type (common-lisp:or |id| common-lisp:null))
   (errors common-lisp:nil :type
    (common-lisp:or |validationMessages| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-error 'make-validation-error))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape validation-error))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "errors"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'errors))))))
(common-lisp:progn
 (common-lisp:deftype validation-errors ()
   '(trivial-types:proper-list validation-error))
 (common-lisp:defun |make-validation-errors|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-error))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (validation-warning (:copier common-lisp:nil))
   (id common-lisp:nil :type (common-lisp:or |id| common-lisp:null))
   (warnings common-lisp:nil :type
    (common-lisp:or |validationMessages| common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'validation-warning 'make-validation-warning))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape validation-warning))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "warnings"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'warnings))))))
(common-lisp:progn
 (common-lisp:deftype validation-warnings ()
   '(trivial-types:proper-list validation-warning))
 (common-lisp:defun |make-validation-warnings|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list validation-warning))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |attributeNameString| () 'common-lisp:string)
(common-lisp:deftype |attributeValueString| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |cancelActive| () 'common-lisp:boolean)
(common-lisp:deftype |errorMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |fieldList| () '(trivial-types:proper-list field))
 (common-lisp:defun |make-fieldlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list field))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |fieldNameString| () 'common-lisp:string)
(common-lisp:deftype |fieldStringValue| () 'common-lisp:string)
(common-lisp:deftype |id| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |idList| () '(trivial-types:proper-list |id|))
 (common-lisp:defun |make-idlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |id|))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |int| () 'common-lisp:integer)
(common-lisp:deftype |longString| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |pipelineList| ()
   '(trivial-types:proper-list pipeline-id-name))
 (common-lisp:defun |make-pipelinelist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-id-name))
   aws-sdk/generator/shape::members))
common-lisp:nil
(common-lisp:progn
 (common-lisp:deftype |stringList| ()
   '(trivial-types:proper-list common-lisp:string))
 (common-lisp:defun |make-stringlist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list common-lisp:string))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagKey| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |tagList| () '(trivial-types:proper-list tag))
 (common-lisp:defun |make-taglist|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list tag))
   aws-sdk/generator/shape::members))
(common-lisp:deftype |tagValue| () 'common-lisp:string)
(common-lisp:deftype |taskId| () 'common-lisp:string)
common-lisp:nil
(common-lisp:deftype |validationMessage| () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype |validationMessages| ()
   '(trivial-types:proper-list |validationMessage|))
 (common-lisp:defun |make-validationmessages|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list |validationMessage|))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun activate-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id parameter-values
                     start-timestamp)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id parameter-values start-timestamp))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-activate-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ActivatePipeline")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ActivatePipelineOutput" common-lisp:nil)))
 (common-lisp:export 'activate-pipeline))
(common-lisp:progn
 (common-lisp:defun add-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id tags)
   (common-lisp:declare (common-lisp:ignorable pipeline-id tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-add-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AddTags")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "AddTagsOutput" common-lisp:nil)))
 (common-lisp:export 'add-tags))
(common-lisp:progn
 (common-lisp:defun create-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name unique-id description tags)
   (common-lisp:declare
    (common-lisp:ignorable name unique-id description tags))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreatePipeline")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreatePipelineOutput" common-lisp:nil)))
 (common-lisp:export 'create-pipeline))
(common-lisp:progn
 (common-lisp:defun deactivate-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id cancel-active)
   (common-lisp:declare (common-lisp:ignorable pipeline-id cancel-active))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-deactivate-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeactivatePipeline")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeactivatePipelineOutput" common-lisp:nil)))
 (common-lisp:export 'deactivate-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id)
   (common-lisp:declare (common-lisp:ignorable pipeline-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeletePipeline")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-pipeline))
(common-lisp:progn
 (common-lisp:defun describe-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id object-ids
                     evaluate-expressions marker)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id object-ids evaluate-expressions marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-objects-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribeObjects")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribeObjectsOutput" common-lisp:nil)))
 (common-lisp:export 'describe-objects))
(common-lisp:progn
 (common-lisp:defun describe-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-ids)
   (common-lisp:declare (common-lisp:ignorable pipeline-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-describe-pipelines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DescribePipelines")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DescribePipelinesOutput" common-lisp:nil)))
 (common-lisp:export 'describe-pipelines))
(common-lisp:progn
 (common-lisp:defun evaluate-expression
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id object-id expression)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id object-id expression))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-evaluate-expression-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"EvaluateExpression")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "EvaluateExpressionOutput" common-lisp:nil)))
 (common-lisp:export 'evaluate-expression))
(common-lisp:progn
 (common-lisp:defun get-pipeline-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id version)
   (common-lisp:declare (common-lisp:ignorable pipeline-id version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-definition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetPipelineDefinition")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPipelineDefinitionOutput" common-lisp:nil)))
 (common-lisp:export 'get-pipeline-definition))
(common-lisp:progn
 (common-lisp:defun list-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key marker)
   (common-lisp:declare (common-lisp:ignorable marker))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipelines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListPipelines")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPipelinesOutput" common-lisp:nil)))
 (common-lisp:export 'list-pipelines))
(common-lisp:progn
 (common-lisp:defun poll-for-task
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key worker-group hostname instance-identity)
   (common-lisp:declare
    (common-lisp:ignorable worker-group hostname instance-identity))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-task-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PollForTask")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "PollForTaskOutput" common-lisp:nil)))
 (common-lisp:export 'poll-for-task))
(common-lisp:progn
 (common-lisp:defun put-pipeline-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id pipeline-objects
                     parameter-objects parameter-values)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id pipeline-objects parameter-objects
     parameter-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-pipeline-definition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutPipelineDefinition")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "PutPipelineDefinitionOutput" common-lisp:nil)))
 (common-lisp:export 'put-pipeline-definition))
(common-lisp:progn
 (common-lisp:defun query-objects
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id query sphere marker limit)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id query sphere marker limit))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-query-objects-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"QueryObjects")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "QueryObjectsOutput" common-lisp:nil)))
 (common-lisp:export 'query-objects))
(common-lisp:progn
 (common-lisp:defun remove-tags
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id tag-keys)
   (common-lisp:declare (common-lisp:ignorable pipeline-id tag-keys))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-remove-tags-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"RemoveTags")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "RemoveTagsOutput" common-lisp:nil)))
 (common-lisp:export 'remove-tags))
(common-lisp:progn
 (common-lisp:defun report-task-progress
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id fields)
   (common-lisp:declare (common-lisp:ignorable task-id fields))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-report-task-progress-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ReportTaskProgress")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ReportTaskProgressOutput" common-lisp:nil)))
 (common-lisp:export 'report-task-progress))
(common-lisp:progn
 (common-lisp:defun report-task-runner-heartbeat
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key taskrunner-id worker-group hostname)
   (common-lisp:declare
    (common-lisp:ignorable taskrunner-id worker-group hostname))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-report-task-runner-heartbeat-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ReportTaskRunnerHeartbeat")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ReportTaskRunnerHeartbeatOutput" common-lisp:nil)))
 (common-lisp:export 'report-task-runner-heartbeat))
(common-lisp:progn
 (common-lisp:defun set-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id object-ids status)
   (common-lisp:declare (common-lisp:ignorable pipeline-id object-ids status))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SetStatus")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'set-status))
(common-lisp:progn
 (common-lisp:defun set-task-status
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key task-id task-status error-id
                     error-message error-stack-trace)
   (common-lisp:declare
    (common-lisp:ignorable task-id task-status error-id error-message
     error-stack-trace))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-set-task-status-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SetTaskStatus")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "SetTaskStatusOutput" common-lisp:nil)))
 (common-lisp:export 'set-task-status))
(common-lisp:progn
 (common-lisp:defun validate-pipeline-definition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-id pipeline-objects
                     parameter-objects parameter-values)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-id pipeline-objects parameter-objects
     parameter-values))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-validate-pipeline-definition-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "datapipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ValidatePipelineDefinition")
                                  ("Version" ,@"2012-10-29"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ValidatePipelineDefinitionOutput" common-lisp:nil)))
 (common-lisp:export 'validate-pipeline-definition))