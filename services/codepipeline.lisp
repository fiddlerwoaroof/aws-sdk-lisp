;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/codepipeline
  (:use)
  (:nicknames #:aws/codepipeline)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/codepipeline)

(common-lisp:progn
 (common-lisp:defstruct (awssession-credentials (:copier common-lisp:nil))
   (access-key-id
    (common-lisp:error
     #A((24) common-lisp:base-char . ":accesskeyid is required"))
    :type (common-lisp:or access-key-id common-lisp:null))
   (secret-access-key
    (common-lisp:error
     #A((28) common-lisp:base-char . ":secretaccesskey is required"))
    :type (common-lisp:or secret-access-key common-lisp:null))
   (session-token
    (common-lisp:error
     #A((25) common-lisp:base-char . ":sessiontoken is required"))
    :type (common-lisp:or session-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'awssession-credentials 'make-awssession-credentials))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          awssession-credentials))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "accessKeyId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'access-key-id)))
    (aws-sdk/generator/shape::to-query-params "secretAccessKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'secret-access-key)))
    (aws-sdk/generator/shape::to-query-params "sessionToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'session-token))))))
(common-lisp:deftype access-key-id () 'common-lisp:string)
(common-lisp:deftype account-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (acknowledge-job-input (:copier common-lisp:nil))
   (job-id
    (common-lisp:error #A((18) common-lisp:base-char . ":jobid is required"))
    :type (common-lisp:or job-id common-lisp:null))
   (nonce
    (common-lisp:error #A((18) common-lisp:base-char . ":nonce is required"))
    :type (common-lisp:or nonce common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'acknowledge-job-input 'make-acknowledge-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          acknowledge-job-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-id)))
    (aws-sdk/generator/shape::to-query-params "nonce"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'nonce))))))
(common-lisp:progn
 (common-lisp:defstruct (acknowledge-job-output (:copier common-lisp:nil))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'acknowledge-job-output 'make-acknowledge-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          acknowledge-job-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:progn
 (common-lisp:defstruct
     (acknowledge-third-party-job-input (:copier common-lisp:nil))
   (job-id
    (common-lisp:error #A((18) common-lisp:base-char . ":jobid is required"))
    :type (common-lisp:or third-party-job-id common-lisp:null))
   (nonce
    (common-lisp:error #A((18) common-lisp:base-char . ":nonce is required"))
    :type (common-lisp:or nonce common-lisp:null))
   (client-token
    (common-lisp:error
     #A((24) common-lisp:base-char . ":clienttoken is required"))
    :type (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'acknowledge-third-party-job-input
                    'make-acknowledge-third-party-job-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          acknowledge-third-party-job-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-id)))
    (aws-sdk/generator/shape::to-query-params "nonce"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'nonce)))
    (aws-sdk/generator/shape::to-query-params "clientToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'client-token))))))
(common-lisp:progn
 (common-lisp:defstruct
     (acknowledge-third-party-job-output (:copier common-lisp:nil))
   (status common-lisp:nil :type (common-lisp:or job-status common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'acknowledge-third-party-job-output
                    'make-acknowledge-third-party-job-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          acknowledge-third-party-job-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:deftype action-category () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (action-configuration (:copier common-lisp:nil))
   (configuration common-lisp:nil :type
    (common-lisp:or action-configuration-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-configuration 'make-action-configuration))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action-configuration))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "configuration"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'configuration))))))
(common-lisp:deftype action-configuration-key () 'common-lisp:string)
(common-lisp:defstruct
    (action-configuration-map
     (:constructor |make-action-configuration-map|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:progn
 (common-lisp:defstruct
     (action-configuration-property (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or action-configuration-key common-lisp:null))
   (required
    (common-lisp:error
     #A((21) common-lisp:base-char . ":required is required"))
    :type (common-lisp:or boolean common-lisp:null))
   (key (common-lisp:error #A((16) common-lisp:base-char . ":key is required"))
    :type (common-lisp:or boolean common-lisp:null))
   (secret
    (common-lisp:error #A((19) common-lisp:base-char . ":secret is required"))
    :type (common-lisp:or boolean common-lisp:null))
   (queryable common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (description common-lisp:nil :type
    (common-lisp:or description common-lisp:null))
   (type common-lisp:nil :type
    (common-lisp:or action-configuration-property-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-configuration-property
                    'make-action-configuration-property))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          action-configuration-property))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "required"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'required)))
    (aws-sdk/generator/shape::to-query-params "key"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'key)))
    (aws-sdk/generator/shape::to-query-params "secret"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'secret)))
    (aws-sdk/generator/shape::to-query-params "queryable"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'queryable)))
    (aws-sdk/generator/shape::to-query-params "description"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'description)))
    (aws-sdk/generator/shape::to-query-params "type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type))))))
(common-lisp:progn
 (common-lisp:deftype action-configuration-property-list ()
   '(trivial-types:proper-list action-configuration-property))
 (common-lisp:defun |make-action-configuration-property-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            action-configuration-property))
   aws-sdk/generator/shape::members))
(common-lisp:deftype action-configuration-property-type () 'common-lisp:string)
(common-lisp:deftype action-configuration-queryable-value ()
  'common-lisp:string)
(common-lisp:deftype action-configuration-value () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (action-context (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or action-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-context 'make-action-context))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action-context))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (action-declaration (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or action-name common-lisp:null))
   (action-type-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":actiontypeid is required"))
    :type (common-lisp:or action-type-id common-lisp:null))
   (run-order common-lisp:nil :type
    (common-lisp:or action-run-order common-lisp:null))
   (configuration common-lisp:nil :type
    (common-lisp:or action-configuration-map common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or output-artifact-list common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or input-artifact-list common-lisp:null))
   (role-arn common-lisp:nil :type (common-lisp:or role-arn common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-declaration 'make-action-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action-declaration))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "actionTypeId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-type-id)))
    (aws-sdk/generator/shape::to-query-params "runOrder"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'run-order)))
    (aws-sdk/generator/shape::to-query-params "configuration"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'configuration)))
    (aws-sdk/generator/shape::to-query-params "outputArtifacts"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'output-artifacts)))
    (aws-sdk/generator/shape::to-query-params "inputArtifacts"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'input-artifacts)))
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn))))))
(common-lisp:progn
 (common-lisp:defstruct (action-execution (:copier common-lisp:nil))
   (status common-lisp:nil :type
    (common-lisp:or action-execution-status common-lisp:null))
   (summary common-lisp:nil :type
    (common-lisp:or execution-summary common-lisp:null))
   (last-status-change common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (token common-lisp:nil :type
    (common-lisp:or action-execution-token common-lisp:null))
   (last-updated-by common-lisp:nil :type
    (common-lisp:or last-updated-by common-lisp:null))
   (external-execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (external-execution-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null))
   (percent-complete common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null))
   (error-details common-lisp:nil :type
    (common-lisp:or error-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-execution 'make-action-execution))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action-execution))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "summary"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'summary)))
    (aws-sdk/generator/shape::to-query-params "lastStatusChange"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-status-change)))
    (aws-sdk/generator/shape::to-query-params "token"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'token)))
    (aws-sdk/generator/shape::to-query-params "lastUpdatedBy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-updated-by)))
    (aws-sdk/generator/shape::to-query-params "externalExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'external-execution-id)))
    (aws-sdk/generator/shape::to-query-params "externalExecutionUrl"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'external-execution-url)))
    (aws-sdk/generator/shape::to-query-params "percentComplete"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'percent-complete)))
    (aws-sdk/generator/shape::to-query-params "errorDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'error-details))))))
(common-lisp:deftype action-execution-status () 'common-lisp:string)
(common-lisp:deftype action-execution-token () 'common-lisp:string)
(common-lisp:deftype action-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (action-not-found-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'action-not-found-exception
                    'make-action-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          action-not-found-exception))
   (common-lisp:append)))
(common-lisp:deftype action-owner () 'common-lisp:string)
(common-lisp:deftype action-provider () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (action-revision (:copier common-lisp:nil))
   (revision-id
    (common-lisp:error
     #A((23) common-lisp:base-char . ":revisionid is required"))
    :type (common-lisp:or revision common-lisp:null))
   (revision-change-id
    (common-lisp:error
     #A((29) common-lisp:base-char . ":revisionchangeid is required"))
    :type (common-lisp:or revision-change-identifier common-lisp:null))
   (created
    (common-lisp:error #A((20) common-lisp:base-char . ":created is required"))
    :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-revision 'make-action-revision))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action-revision))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "revisionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision-id)))
    (aws-sdk/generator/shape::to-query-params "revisionChangeId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision-change-id)))
    (aws-sdk/generator/shape::to-query-params "created"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created))))))
(common-lisp:deftype action-run-order () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (action-state (:copier common-lisp:nil))
   (action-name common-lisp:nil :type
    (common-lisp:or action-name common-lisp:null))
   (current-revision common-lisp:nil :type
    (common-lisp:or action-revision common-lisp:null))
   (latest-execution common-lisp:nil :type
    (common-lisp:or action-execution common-lisp:null))
   (entity-url common-lisp:nil :type (common-lisp:or url common-lisp:null))
   (revision-url common-lisp:nil :type (common-lisp:or url common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-state 'make-action-state))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action-state))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "actionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-name)))
    (aws-sdk/generator/shape::to-query-params "currentRevision"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'current-revision)))
    (aws-sdk/generator/shape::to-query-params "latestExecution"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'latest-execution)))
    (aws-sdk/generator/shape::to-query-params "entityUrl"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'entity-url)))
    (aws-sdk/generator/shape::to-query-params "revisionUrl"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision-url))))))
(common-lisp:progn
 (common-lisp:deftype action-state-list ()
   '(trivial-types:proper-list action-state))
 (common-lisp:defun |make-action-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-state))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (action-type (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or action-type-id common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or action-type-settings common-lisp:null))
   (action-configuration-properties common-lisp:nil :type
    (common-lisp:or action-configuration-property-list common-lisp:null))
   (input-artifact-details
    (common-lisp:error
     #A((33) common-lisp:base-char . ":inputartifactdetails is required"))
    :type (common-lisp:or artifact-details common-lisp:null))
   (output-artifact-details
    (common-lisp:error
     #A((34) common-lisp:base-char . ":outputartifactdetails is required"))
    :type (common-lisp:or artifact-details common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-type 'make-action-type))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action-type))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "settings"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'settings)))
    (aws-sdk/generator/shape::to-query-params "actionConfigurationProperties"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-configuration-properties)))
    (aws-sdk/generator/shape::to-query-params "inputArtifactDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'input-artifact-details)))
    (aws-sdk/generator/shape::to-query-params "outputArtifactDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'output-artifact-details))))))
(common-lisp:progn
 (common-lisp:defstruct (action-type-id (:copier common-lisp:nil))
   (category
    (common-lisp:error
     #A((21) common-lisp:base-char . ":category is required"))
    :type (common-lisp:or action-category common-lisp:null))
   (owner
    (common-lisp:error #A((18) common-lisp:base-char . ":owner is required"))
    :type (common-lisp:or action-owner common-lisp:null))
   (provider
    (common-lisp:error
     #A((21) common-lisp:base-char . ":provider is required"))
    :type (common-lisp:or action-provider common-lisp:null))
   (version
    (common-lisp:error #A((20) common-lisp:base-char . ":version is required"))
    :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export (common-lisp:list 'action-type-id 'make-action-type-id))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action-type-id))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "category"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'category)))
    (aws-sdk/generator/shape::to-query-params "owner"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'owner)))
    (aws-sdk/generator/shape::to-query-params "provider"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'provider)))
    (aws-sdk/generator/shape::to-query-params "version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:deftype action-type-list ()
   '(trivial-types:proper-list action-type))
 (common-lisp:defun |make-action-type-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-type))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (action-type-not-found-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'action-type-not-found-exception
                    'make-action-type-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          action-type-not-found-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (action-type-settings (:copier common-lisp:nil))
   (third-party-configuration-url common-lisp:nil :type
    (common-lisp:or url common-lisp:null))
   (entity-url-template common-lisp:nil :type
    (common-lisp:or url-template common-lisp:null))
   (execution-url-template common-lisp:nil :type
    (common-lisp:or url-template common-lisp:null))
   (revision-url-template common-lisp:nil :type
    (common-lisp:or url-template common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'action-type-settings 'make-action-type-settings))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape action-type-settings))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "thirdPartyConfigurationUrl"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'third-party-configuration-url)))
    (aws-sdk/generator/shape::to-query-params "entityUrlTemplate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'entity-url-template)))
    (aws-sdk/generator/shape::to-query-params "executionUrlTemplate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'execution-url-template)))
    (aws-sdk/generator/shape::to-query-params "revisionUrlTemplate"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision-url-template))))))
(common-lisp:progn
 (common-lisp:defstruct
     (approval-already-completed-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'approval-already-completed-exception
                    'make-approval-already-completed-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          approval-already-completed-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (approval-result (:copier common-lisp:nil))
   (summary
    (common-lisp:error #A((20) common-lisp:base-char . ":summary is required"))
    :type (common-lisp:or approval-summary common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or approval-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'approval-result 'make-approval-result))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape approval-result))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "summary"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'summary)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:deftype approval-status () 'common-lisp:string)
(common-lisp:deftype approval-summary () 'common-lisp:string)
(common-lisp:deftype approval-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (artifact (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or artifact-name common-lisp:null))
   (revision common-lisp:nil :type (common-lisp:or revision common-lisp:null))
   (location common-lisp:nil :type
    (common-lisp:or artifact-location common-lisp:null)))
 (common-lisp:export (common-lisp:list 'artifact 'make-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape artifact))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "revision"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision)))
    (aws-sdk/generator/shape::to-query-params "location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location))))))
(common-lisp:progn
 (common-lisp:defstruct (artifact-details (:copier common-lisp:nil))
   (minimum-count
    (common-lisp:error
     #A((25) common-lisp:base-char . ":minimumcount is required"))
    :type (common-lisp:or minimum-artifact-count common-lisp:null))
   (maximum-count
    (common-lisp:error
     #A((25) common-lisp:base-char . ":maximumcount is required"))
    :type (common-lisp:or maximum-artifact-count common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifact-details 'make-artifact-details))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape artifact-details))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "minimumCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'minimum-count)))
    (aws-sdk/generator/shape::to-query-params "maximumCount"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'maximum-count))))))
(common-lisp:progn
 (common-lisp:deftype artifact-list () '(trivial-types:proper-list artifact))
 (common-lisp:defun |make-artifact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (artifact-location (:copier common-lisp:nil))
   (type common-lisp:nil :type
    (common-lisp:or artifact-location-type common-lisp:null))
   (s3location common-lisp:nil :type
    (common-lisp:or s3artifact-location common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifact-location 'make-artifact-location))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape artifact-location))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "s3Location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                's3location))))))
(common-lisp:deftype artifact-location-type () 'common-lisp:string)
(common-lisp:deftype artifact-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (artifact-revision (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or artifact-name common-lisp:null))
   (revision-id common-lisp:nil :type
    (common-lisp:or revision common-lisp:null))
   (revision-change-identifier common-lisp:nil :type
    (common-lisp:or revision-change-identifier common-lisp:null))
   (revision-summary common-lisp:nil :type
    (common-lisp:or revision-summary common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (revision-url common-lisp:nil :type (common-lisp:or url common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'artifact-revision 'make-artifact-revision))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape artifact-revision))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "revisionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision-id)))
    (aws-sdk/generator/shape::to-query-params "revisionChangeIdentifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision-change-identifier)))
    (aws-sdk/generator/shape::to-query-params "revisionSummary"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision-summary)))
    (aws-sdk/generator/shape::to-query-params "created"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created)))
    (aws-sdk/generator/shape::to-query-params "revisionUrl"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision-url))))))
(common-lisp:progn
 (common-lisp:deftype artifact-revision-list ()
   '(trivial-types:proper-list artifact-revision))
 (common-lisp:defun |make-artifact-revision-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list artifact-revision))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (artifact-store (:copier common-lisp:nil))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or artifact-store-type common-lisp:null))
   (location
    (common-lisp:error
     #A((21) common-lisp:base-char . ":location is required"))
    :type (common-lisp:or artifact-store-location common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'artifact-store 'make-artifact-store))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape artifact-store))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "location"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'location)))
    (aws-sdk/generator/shape::to-query-params "encryptionKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encryption-key))))))
(common-lisp:deftype artifact-store-location () 'common-lisp:string)
(common-lisp:deftype artifact-store-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (blocker-declaration (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or blocker-name common-lisp:null))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or blocker-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'blocker-declaration 'make-blocker-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape blocker-declaration))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type))))))
(common-lisp:deftype blocker-name () 'common-lisp:string)
(common-lisp:deftype blocker-type () 'common-lisp:string)
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:deftype client-id () 'common-lisp:string)
(common-lisp:deftype client-token () 'common-lisp:string)
(common-lisp:deftype code () 'common-lisp:string)
(common-lisp:deftype continuation-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-action-type-input (:copier common-lisp:nil))
   (category
    (common-lisp:error
     #A((21) common-lisp:base-char . ":category is required"))
    :type (common-lisp:or action-category common-lisp:null))
   (provider
    (common-lisp:error
     #A((21) common-lisp:base-char . ":provider is required"))
    :type (common-lisp:or action-provider common-lisp:null))
   (version
    (common-lisp:error #A((20) common-lisp:base-char . ":version is required"))
    :type (common-lisp:or version common-lisp:null))
   (settings common-lisp:nil :type
    (common-lisp:or action-type-settings common-lisp:null))
   (configuration-properties common-lisp:nil :type
    (common-lisp:or action-configuration-property-list common-lisp:null))
   (input-artifact-details
    (common-lisp:error
     #A((33) common-lisp:base-char . ":inputartifactdetails is required"))
    :type (common-lisp:or artifact-details common-lisp:null))
   (output-artifact-details
    (common-lisp:error
     #A((34) common-lisp:base-char . ":outputartifactdetails is required"))
    :type (common-lisp:or artifact-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-action-type-input
                    'make-create-custom-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-custom-action-type-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "category"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'category)))
    (aws-sdk/generator/shape::to-query-params "provider"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'provider)))
    (aws-sdk/generator/shape::to-query-params "version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version)))
    (aws-sdk/generator/shape::to-query-params "settings"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'settings)))
    (aws-sdk/generator/shape::to-query-params "configurationProperties"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'configuration-properties)))
    (aws-sdk/generator/shape::to-query-params "inputArtifactDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'input-artifact-details)))
    (aws-sdk/generator/shape::to-query-params "outputArtifactDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'output-artifact-details))))))
(common-lisp:progn
 (common-lisp:defstruct
     (create-custom-action-type-output (:copier common-lisp:nil))
   (action-type
    (common-lisp:error
     #A((23) common-lisp:base-char . ":actiontype is required"))
    :type (common-lisp:or action-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-custom-action-type-output
                    'make-create-custom-action-type-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-custom-action-type-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "actionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-type))))))
(common-lisp:progn
 (common-lisp:defstruct (create-pipeline-input (:copier common-lisp:nil))
   (pipeline
    (common-lisp:error
     #A((21) common-lisp:base-char . ":pipeline is required"))
    :type (common-lisp:or pipeline-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-input 'make-create-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-pipeline-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipeline"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline))))))
(common-lisp:progn
 (common-lisp:defstruct (create-pipeline-output (:copier common-lisp:nil))
   (pipeline common-lisp:nil :type
    (common-lisp:or pipeline-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-pipeline-output 'make-create-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-pipeline-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipeline"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline))))))
(common-lisp:progn
 (common-lisp:defstruct (current-revision (:copier common-lisp:nil))
   (revision
    (common-lisp:error
     #A((21) common-lisp:base-char . ":revision is required"))
    :type (common-lisp:or revision common-lisp:null))
   (change-identifier
    (common-lisp:error
     #A((29) common-lisp:base-char . ":changeidentifier is required"))
    :type (common-lisp:or revision-change-identifier common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or time common-lisp:null))
   (revision-summary common-lisp:nil :type
    (common-lisp:or revision-summary common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'current-revision 'make-current-revision))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape current-revision))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "revision"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision)))
    (aws-sdk/generator/shape::to-query-params "changeIdentifier"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'change-identifier)))
    (aws-sdk/generator/shape::to-query-params "created"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created)))
    (aws-sdk/generator/shape::to-query-params "revisionSummary"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'revision-summary))))))
(common-lisp:progn
 (common-lisp:defstruct
     (delete-custom-action-type-input (:copier common-lisp:nil))
   (category
    (common-lisp:error
     #A((21) common-lisp:base-char . ":category is required"))
    :type (common-lisp:or action-category common-lisp:null))
   (provider
    (common-lisp:error
     #A((21) common-lisp:base-char . ":provider is required"))
    :type (common-lisp:or action-provider common-lisp:null))
   (version
    (common-lisp:error #A((20) common-lisp:base-char . ":version is required"))
    :type (common-lisp:or version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-custom-action-type-input
                    'make-delete-custom-action-type-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-custom-action-type-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "category"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'category)))
    (aws-sdk/generator/shape::to-query-params "provider"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'provider)))
    (aws-sdk/generator/shape::to-query-params "version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-pipeline-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or pipeline-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-pipeline-input 'make-delete-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-pipeline-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:deftype description () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (disable-stage-transition-input (:copier common-lisp:nil))
   (pipeline-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":pipelinename is required"))
    :type (common-lisp:or pipeline-name common-lisp:null))
   (stage-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":stagename is required"))
    :type (common-lisp:or stage-name common-lisp:null))
   (transition-type
    (common-lisp:error
     #A((27) common-lisp:base-char . ":transitiontype is required"))
    :type (common-lisp:or stage-transition-type common-lisp:null))
   (reason
    (common-lisp:error #A((19) common-lisp:base-char . ":reason is required"))
    :type (common-lisp:or disabled-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'disable-stage-transition-input
                    'make-disable-stage-transition-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          disable-stage-transition-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "stageName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stage-name)))
    (aws-sdk/generator/shape::to-query-params "transitionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transition-type)))
    (aws-sdk/generator/shape::to-query-params "reason"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'reason))))))
(common-lisp:deftype disabled-reason () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (enable-stage-transition-input (:copier common-lisp:nil))
   (pipeline-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":pipelinename is required"))
    :type (common-lisp:or pipeline-name common-lisp:null))
   (stage-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":stagename is required"))
    :type (common-lisp:or stage-name common-lisp:null))
   (transition-type
    (common-lisp:error
     #A((27) common-lisp:base-char . ":transitiontype is required"))
    :type (common-lisp:or stage-transition-type common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'enable-stage-transition-input
                    'make-enable-stage-transition-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          enable-stage-transition-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "stageName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stage-name)))
    (aws-sdk/generator/shape::to-query-params "transitionType"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'transition-type))))))
(common-lisp:deftype enabled () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct (encryption-key (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or encryption-key-id common-lisp:null))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or encryption-key-type common-lisp:null)))
 (common-lisp:export (common-lisp:list 'encryption-key 'make-encryption-key))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape encryption-key))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type))))))
(common-lisp:deftype encryption-key-id () 'common-lisp:string)
(common-lisp:deftype encryption-key-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (error-details (:copier common-lisp:nil))
   (code common-lisp:nil :type (common-lisp:or code common-lisp:null))
   (message common-lisp:nil :type (common-lisp:or message common-lisp:null)))
 (common-lisp:export (common-lisp:list 'error-details 'make-error-details))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape error-details))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "code"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'code)))
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message))))))
(common-lisp:progn
 (common-lisp:defstruct (execution-details (:copier common-lisp:nil))
   (summary common-lisp:nil :type
    (common-lisp:or execution-summary common-lisp:null))
   (external-execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null))
   (percent-complete common-lisp:nil :type
    (common-lisp:or percentage common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'execution-details 'make-execution-details))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape execution-details))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "summary"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'summary)))
    (aws-sdk/generator/shape::to-query-params "externalExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'external-execution-id)))
    (aws-sdk/generator/shape::to-query-params "percentComplete"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'percent-complete))))))
(common-lisp:deftype execution-id () 'common-lisp:string)
(common-lisp:deftype execution-summary () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (failure-details (:copier common-lisp:nil))
   (type
    (common-lisp:error #A((17) common-lisp:base-char . ":type is required"))
    :type (common-lisp:or failure-type common-lisp:null))
   (message
    (common-lisp:error #A((20) common-lisp:base-char . ":message is required"))
    :type (common-lisp:or message common-lisp:null))
   (external-execution-id common-lisp:nil :type
    (common-lisp:or execution-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'failure-details 'make-failure-details))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape failure-details))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "message"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'message)))
    (aws-sdk/generator/shape::to-query-params "externalExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'external-execution-id))))))
(common-lisp:deftype failure-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (get-job-details-input (:copier common-lisp:nil))
   (job-id
    (common-lisp:error #A((18) common-lisp:base-char . ":jobid is required"))
    :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-details-input 'make-get-job-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-job-details-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-id))))))
(common-lisp:progn
 (common-lisp:defstruct (get-job-details-output (:copier common-lisp:nil))
   (job-details common-lisp:nil :type
    (common-lisp:or job-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-job-details-output 'make-get-job-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-job-details-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-details))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-execution-input (:copier common-lisp:nil))
   (pipeline-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":pipelinename is required"))
    :type (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-execution-id
    (common-lisp:error
     #A((32) common-lisp:base-char . ":pipelineexecutionid is required"))
    :type (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-execution-input
                    'make-get-pipeline-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-pipeline-execution-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "pipelineExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution-id))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-pipeline-execution-output (:copier common-lisp:nil))
   (pipeline-execution common-lisp:nil :type
    (common-lisp:or pipeline-execution common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-execution-output
                    'make-get-pipeline-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-pipeline-execution-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineExecution"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution))))))
(common-lisp:progn
 (common-lisp:defstruct (get-pipeline-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or pipeline-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-input 'make-get-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-pipeline-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:defstruct (get-pipeline-output (:copier common-lisp:nil))
   (pipeline common-lisp:nil :type
    (common-lisp:or pipeline-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-output 'make-get-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape get-pipeline-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipeline"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline))))))
(common-lisp:progn
 (common-lisp:defstruct (get-pipeline-state-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or pipeline-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-state-input 'make-get-pipeline-state-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-pipeline-state-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (get-pipeline-state-output (:copier common-lisp:nil))
   (pipeline-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null))
   (stage-states common-lisp:nil :type
    (common-lisp:or stage-state-list common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (updated common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-pipeline-state-output
                    'make-get-pipeline-state-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-pipeline-state-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "pipelineVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-version)))
    (aws-sdk/generator/shape::to-query-params "stageStates"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stage-states)))
    (aws-sdk/generator/shape::to-query-params "created"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created)))
    (aws-sdk/generator/shape::to-query-params "updated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'updated))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-third-party-job-details-input (:copier common-lisp:nil))
   (job-id
    (common-lisp:error #A((18) common-lisp:base-char . ":jobid is required"))
    :type (common-lisp:or third-party-job-id common-lisp:null))
   (client-token
    (common-lisp:error
     #A((24) common-lisp:base-char . ":clienttoken is required"))
    :type (common-lisp:or client-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-third-party-job-details-input
                    'make-get-third-party-job-details-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-third-party-job-details-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-id)))
    (aws-sdk/generator/shape::to-query-params "clientToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'client-token))))))
(common-lisp:progn
 (common-lisp:defstruct
     (get-third-party-job-details-output (:copier common-lisp:nil))
   (job-details common-lisp:nil :type
    (common-lisp:or third-party-job-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-third-party-job-details-output
                    'make-get-third-party-job-details-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-third-party-job-details-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-details))))))
(common-lisp:progn
 (common-lisp:defstruct (input-artifact (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or artifact-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'input-artifact 'make-input-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape input-artifact))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:deftype input-artifact-list ()
   '(trivial-types:proper-list input-artifact))
 (common-lisp:defun |make-input-artifact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list input-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-action-declaration-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-action-declaration-exception
                    'make-invalid-action-declaration-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-action-declaration-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-approval-token-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-approval-token-exception
                    'make-invalid-approval-token-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-approval-token-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-blocker-declaration-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-blocker-declaration-exception
                    'make-invalid-blocker-declaration-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-blocker-declaration-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-client-token-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-client-token-exception
                    'make-invalid-client-token-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-client-token-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (invalid-job-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-job-exception 'make-invalid-job-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-job-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-job-state-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-job-state-exception
                    'make-invalid-job-state-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-job-state-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-next-token-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-next-token-exception
                    'make-invalid-next-token-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-next-token-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (invalid-nonce-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-nonce-exception 'make-invalid-nonce-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-nonce-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-stage-declaration-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-stage-declaration-exception
                    'make-invalid-stage-declaration-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-stage-declaration-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-structure-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-structure-exception
                    'make-invalid-structure-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-structure-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (job (:copier common-lisp:nil))
   (id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or job-data common-lisp:null))
   (nonce common-lisp:nil :type (common-lisp:or nonce common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job 'make-job))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape job))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "data"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'data)))
    (aws-sdk/generator/shape::to-query-params "nonce"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'nonce)))
    (aws-sdk/generator/shape::to-query-params "accountId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'account-id))))))
(common-lisp:progn
 (common-lisp:defstruct (job-data (:copier common-lisp:nil))
   (action-type-id common-lisp:nil :type
    (common-lisp:or action-type-id common-lisp:null))
   (action-configuration common-lisp:nil :type
    (common-lisp:or action-configuration common-lisp:null))
   (pipeline-context common-lisp:nil :type
    (common-lisp:or pipeline-context common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or artifact-list common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or artifact-list common-lisp:null))
   (artifact-credentials common-lisp:nil :type
    (common-lisp:or awssession-credentials common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-data 'make-job-data))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape job-data))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "actionTypeId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-type-id)))
    (aws-sdk/generator/shape::to-query-params "actionConfiguration"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-configuration)))
    (aws-sdk/generator/shape::to-query-params "pipelineContext"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-context)))
    (aws-sdk/generator/shape::to-query-params "inputArtifacts"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'input-artifacts)))
    (aws-sdk/generator/shape::to-query-params "outputArtifacts"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'output-artifacts)))
    (aws-sdk/generator/shape::to-query-params "artifactCredentials"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'artifact-credentials)))
    (aws-sdk/generator/shape::to-query-params "continuationToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'continuation-token)))
    (aws-sdk/generator/shape::to-query-params "encryptionKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encryption-key))))))
(common-lisp:progn
 (common-lisp:defstruct (job-details (:copier common-lisp:nil))
   (id common-lisp:nil :type (common-lisp:or job-id common-lisp:null))
   (data common-lisp:nil :type (common-lisp:or job-data common-lisp:null))
   (account-id common-lisp:nil :type
    (common-lisp:or account-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'job-details 'make-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape job-details))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "data"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'data)))
    (aws-sdk/generator/shape::to-query-params "accountId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'account-id))))))
(common-lisp:deftype job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype job-list () '(trivial-types:proper-list job))
 (common-lisp:defun |make-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list job))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (job-not-found-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'job-not-found-exception 'make-job-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          job-not-found-exception))
   (common-lisp:append)))
(common-lisp:deftype job-status () 'common-lisp:string)
(common-lisp:deftype last-changed-at () 'common-lisp:string)
(common-lisp:deftype last-changed-by () 'common-lisp:string)
(common-lisp:deftype last-updated-by () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (limit-exceeded-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'limit-exceeded-exception 'make-limit-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          limit-exceeded-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (list-action-types-input (:copier common-lisp:nil))
   (action-owner-filter common-lisp:nil :type
    (common-lisp:or action-owner common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-action-types-input 'make-list-action-types-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-action-types-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "actionOwnerFilter"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-owner-filter)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (list-action-types-output (:copier common-lisp:nil))
   (action-types
    (common-lisp:error
     #A((24) common-lisp:base-char . ":actiontypes is required"))
    :type (common-lisp:or action-type-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-action-types-output 'make-list-action-types-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-action-types-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "actionTypes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-types)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-executions-input (:copier common-lisp:nil))
   (pipeline-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":pipelinename is required"))
    :type (common-lisp:or pipeline-name common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or max-results common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-executions-input
                    'make-list-pipeline-executions-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-pipeline-executions-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "maxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct
     (list-pipeline-executions-output (:copier common-lisp:nil))
   (pipeline-execution-summaries common-lisp:nil :type
    (common-lisp:or pipeline-execution-summary-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipeline-executions-output
                    'make-list-pipeline-executions-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-pipeline-executions-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineExecutionSummaries"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution-summaries)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (list-pipelines-input (:copier common-lisp:nil))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-input 'make-list-pipelines-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-pipelines-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (list-pipelines-output (:copier common-lisp:nil))
   (pipelines common-lisp:nil :type
    (common-lisp:or pipeline-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or next-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-pipelines-output 'make-list-pipelines-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-pipelines-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelines"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipelines)))
    (aws-sdk/generator/shape::to-query-params "nextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:deftype max-batch-size () 'common-lisp:integer)
(common-lisp:deftype max-results () 'common-lisp:integer)
(common-lisp:deftype maximum-artifact-count () 'common-lisp:integer)
(common-lisp:deftype message () 'common-lisp:string)
(common-lisp:deftype minimum-artifact-count () 'common-lisp:integer)
(common-lisp:deftype next-token () 'common-lisp:string)
(common-lisp:deftype nonce () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (not-latest-pipeline-execution-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'not-latest-pipeline-execution-exception
                    'make-not-latest-pipeline-execution-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          not-latest-pipeline-execution-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (output-artifact (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or artifact-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'output-artifact 'make-output-artifact))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape output-artifact))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:deftype output-artifact-list ()
   '(trivial-types:proper-list output-artifact))
 (common-lisp:defun |make-output-artifact-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list output-artifact))
   aws-sdk/generator/shape::members))
(common-lisp:deftype percentage () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (pipeline-context (:copier common-lisp:nil))
   (pipeline-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (stage common-lisp:nil :type
    (common-lisp:or stage-context common-lisp:null))
   (action common-lisp:nil :type
    (common-lisp:or action-context common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-context 'make-pipeline-context))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape pipeline-context))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "stage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stage)))
    (aws-sdk/generator/shape::to-query-params "action"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action))))))
(common-lisp:progn
 (common-lisp:defstruct (pipeline-declaration (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or pipeline-name common-lisp:null))
   (role-arn
    (common-lisp:error #A((20) common-lisp:base-char . ":rolearn is required"))
    :type (common-lisp:or role-arn common-lisp:null))
   (artifact-store
    (common-lisp:error
     #A((26) common-lisp:base-char . ":artifactstore is required"))
    :type (common-lisp:or artifact-store common-lisp:null))
   (stages
    (common-lisp:error #A((19) common-lisp:base-char . ":stages is required"))
    :type (common-lisp:or pipeline-stage-declaration-list common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-declaration 'make-pipeline-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape pipeline-declaration))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "roleArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'role-arn)))
    (aws-sdk/generator/shape::to-query-params "artifactStore"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'artifact-store)))
    (aws-sdk/generator/shape::to-query-params "stages"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stages)))
    (aws-sdk/generator/shape::to-query-params "version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:progn
 (common-lisp:defstruct (pipeline-execution (:copier common-lisp:nil))
   (pipeline-name common-lisp:nil :type
    (common-lisp:or pipeline-name common-lisp:null))
   (pipeline-version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or pipeline-execution-status common-lisp:null))
   (artifact-revisions common-lisp:nil :type
    (common-lisp:or artifact-revision-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution 'make-pipeline-execution))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape pipeline-execution))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "pipelineVersion"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-version)))
    (aws-sdk/generator/shape::to-query-params "pipelineExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution-id)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "artifactRevisions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'artifact-revisions))))))
(common-lisp:deftype pipeline-execution-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-execution-not-found-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-not-found-exception
                    'make-pipeline-execution-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          pipeline-execution-not-found-exception))
   (common-lisp:append)))
(common-lisp:deftype pipeline-execution-status () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (pipeline-execution-summary (:copier common-lisp:nil))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null))
   (status common-lisp:nil :type
    (common-lisp:or pipeline-execution-status common-lisp:null))
   (start-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null))
   (last-update-time common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-execution-summary
                    'make-pipeline-execution-summary))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          pipeline-execution-summary))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution-id)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status)))
    (aws-sdk/generator/shape::to-query-params "startTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'start-time)))
    (aws-sdk/generator/shape::to-query-params "lastUpdateTime"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-update-time))))))
(common-lisp:progn
 (common-lisp:deftype pipeline-execution-summary-list ()
   '(trivial-types:proper-list pipeline-execution-summary))
 (common-lisp:defun |make-pipeline-execution-summary-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list
                            pipeline-execution-summary))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype pipeline-list ()
   '(trivial-types:proper-list pipeline-summary))
 (common-lisp:defun |make-pipeline-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list pipeline-summary))
   aws-sdk/generator/shape::members))
(common-lisp:deftype pipeline-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-name-in-use-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipeline-name-in-use-exception
                    'make-pipeline-name-in-use-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          pipeline-name-in-use-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-not-found-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipeline-not-found-exception
                    'make-pipeline-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          pipeline-not-found-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:deftype pipeline-stage-declaration-list ()
   '(trivial-types:proper-list stage-declaration))
 (common-lisp:defun |make-pipeline-stage-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (pipeline-summary (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or pipeline-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or pipeline-version common-lisp:null))
   (created common-lisp:nil :type (common-lisp:or timestamp common-lisp:null))
   (updated common-lisp:nil :type (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'pipeline-summary 'make-pipeline-summary))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape pipeline-summary))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version)))
    (aws-sdk/generator/shape::to-query-params "created"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'created)))
    (aws-sdk/generator/shape::to-query-params "updated"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'updated))))))
(common-lisp:deftype pipeline-version () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct
     (pipeline-version-not-found-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'pipeline-version-not-found-exception
                    'make-pipeline-version-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          pipeline-version-not-found-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (poll-for-jobs-input (:copier common-lisp:nil))
   (action-type-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":actiontypeid is required"))
    :type (common-lisp:or action-type-id common-lisp:null))
   (max-batch-size common-lisp:nil :type
    (common-lisp:or max-batch-size common-lisp:null))
   (query-param common-lisp:nil :type
    (common-lisp:or query-param-map common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-jobs-input 'make-poll-for-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape poll-for-jobs-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "actionTypeId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-type-id)))
    (aws-sdk/generator/shape::to-query-params "maxBatchSize"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-batch-size)))
    (aws-sdk/generator/shape::to-query-params "queryParam"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'query-param))))))
(common-lisp:progn
 (common-lisp:defstruct (poll-for-jobs-output (:copier common-lisp:nil))
   (jobs common-lisp:nil :type (common-lisp:or job-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-jobs-output 'make-poll-for-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape poll-for-jobs-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobs"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'jobs))))))
(common-lisp:progn
 (common-lisp:defstruct
     (poll-for-third-party-jobs-input (:copier common-lisp:nil))
   (action-type-id
    (common-lisp:error
     #A((25) common-lisp:base-char . ":actiontypeid is required"))
    :type (common-lisp:or action-type-id common-lisp:null))
   (max-batch-size common-lisp:nil :type
    (common-lisp:or max-batch-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-third-party-jobs-input
                    'make-poll-for-third-party-jobs-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          poll-for-third-party-jobs-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "actionTypeId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-type-id)))
    (aws-sdk/generator/shape::to-query-params "maxBatchSize"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-batch-size))))))
(common-lisp:progn
 (common-lisp:defstruct
     (poll-for-third-party-jobs-output (:copier common-lisp:nil))
   (jobs common-lisp:nil :type
    (common-lisp:or third-party-job-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'poll-for-third-party-jobs-output
                    'make-poll-for-third-party-jobs-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          poll-for-third-party-jobs-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobs"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'jobs))))))
(common-lisp:progn
 (common-lisp:defstruct (put-action-revision-input (:copier common-lisp:nil))
   (pipeline-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":pipelinename is required"))
    :type (common-lisp:or pipeline-name common-lisp:null))
   (stage-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":stagename is required"))
    :type (common-lisp:or stage-name common-lisp:null))
   (action-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":actionname is required"))
    :type (common-lisp:or action-name common-lisp:null))
   (action-revision
    (common-lisp:error
     #A((27) common-lisp:base-char . ":actionrevision is required"))
    :type (common-lisp:or action-revision common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-action-revision-input
                    'make-put-action-revision-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-action-revision-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "stageName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stage-name)))
    (aws-sdk/generator/shape::to-query-params "actionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-name)))
    (aws-sdk/generator/shape::to-query-params "actionRevision"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-revision))))))
(common-lisp:progn
 (common-lisp:defstruct (put-action-revision-output (:copier common-lisp:nil))
   (new-revision common-lisp:nil :type
    (common-lisp:or boolean common-lisp:null))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-action-revision-output
                    'make-put-action-revision-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-action-revision-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "newRevision"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'new-revision)))
    (aws-sdk/generator/shape::to-query-params "pipelineExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution-id))))))
(common-lisp:progn
 (common-lisp:defstruct (put-approval-result-input (:copier common-lisp:nil))
   (pipeline-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":pipelinename is required"))
    :type (common-lisp:or pipeline-name common-lisp:null))
   (stage-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":stagename is required"))
    :type (common-lisp:or stage-name common-lisp:null))
   (action-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":actionname is required"))
    :type (common-lisp:or action-name common-lisp:null))
   (result
    (common-lisp:error #A((19) common-lisp:base-char . ":result is required"))
    :type (common-lisp:or approval-result common-lisp:null))
   (token
    (common-lisp:error #A((18) common-lisp:base-char . ":token is required"))
    :type (common-lisp:or approval-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-approval-result-input
                    'make-put-approval-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-approval-result-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "stageName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stage-name)))
    (aws-sdk/generator/shape::to-query-params "actionName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-name)))
    (aws-sdk/generator/shape::to-query-params "result"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'result)))
    (aws-sdk/generator/shape::to-query-params "token"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'token))))))
(common-lisp:progn
 (common-lisp:defstruct (put-approval-result-output (:copier common-lisp:nil))
   (approved-at common-lisp:nil :type
    (common-lisp:or timestamp common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-approval-result-output
                    'make-put-approval-result-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-approval-result-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "approvedAt"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'approved-at))))))
(common-lisp:progn
 (common-lisp:defstruct
     (put-job-failure-result-input (:copier common-lisp:nil))
   (job-id
    (common-lisp:error #A((18) common-lisp:base-char . ":jobid is required"))
    :type (common-lisp:or job-id common-lisp:null))
   (failure-details
    (common-lisp:error
     #A((27) common-lisp:base-char . ":failuredetails is required"))
    :type (common-lisp:or failure-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-job-failure-result-input
                    'make-put-job-failure-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-job-failure-result-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-id)))
    (aws-sdk/generator/shape::to-query-params "failureDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'failure-details))))))
(common-lisp:progn
 (common-lisp:defstruct
     (put-job-success-result-input (:copier common-lisp:nil))
   (job-id
    (common-lisp:error #A((18) common-lisp:base-char . ":jobid is required"))
    :type (common-lisp:or job-id common-lisp:null))
   (current-revision common-lisp:nil :type
    (common-lisp:or current-revision common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null))
   (execution-details common-lisp:nil :type
    (common-lisp:or execution-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-job-success-result-input
                    'make-put-job-success-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-job-success-result-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-id)))
    (aws-sdk/generator/shape::to-query-params "currentRevision"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'current-revision)))
    (aws-sdk/generator/shape::to-query-params "continuationToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'continuation-token)))
    (aws-sdk/generator/shape::to-query-params "executionDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'execution-details))))))
(common-lisp:progn
 (common-lisp:defstruct
     (put-third-party-job-failure-result-input (:copier common-lisp:nil))
   (job-id
    (common-lisp:error #A((18) common-lisp:base-char . ":jobid is required"))
    :type (common-lisp:or third-party-job-id common-lisp:null))
   (client-token
    (common-lisp:error
     #A((24) common-lisp:base-char . ":clienttoken is required"))
    :type (common-lisp:or client-token common-lisp:null))
   (failure-details
    (common-lisp:error
     #A((27) common-lisp:base-char . ":failuredetails is required"))
    :type (common-lisp:or failure-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-third-party-job-failure-result-input
                    'make-put-third-party-job-failure-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-third-party-job-failure-result-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-id)))
    (aws-sdk/generator/shape::to-query-params "clientToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'client-token)))
    (aws-sdk/generator/shape::to-query-params "failureDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'failure-details))))))
(common-lisp:progn
 (common-lisp:defstruct
     (put-third-party-job-success-result-input (:copier common-lisp:nil))
   (job-id
    (common-lisp:error #A((18) common-lisp:base-char . ":jobid is required"))
    :type (common-lisp:or third-party-job-id common-lisp:null))
   (client-token
    (common-lisp:error
     #A((24) common-lisp:base-char . ":clienttoken is required"))
    :type (common-lisp:or client-token common-lisp:null))
   (current-revision common-lisp:nil :type
    (common-lisp:or current-revision common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null))
   (execution-details common-lisp:nil :type
    (common-lisp:or execution-details common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'put-third-party-job-success-result-input
                    'make-put-third-party-job-success-result-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          put-third-party-job-success-result-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "jobId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-id)))
    (aws-sdk/generator/shape::to-query-params "clientToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'client-token)))
    (aws-sdk/generator/shape::to-query-params "currentRevision"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'current-revision)))
    (aws-sdk/generator/shape::to-query-params "continuationToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'continuation-token)))
    (aws-sdk/generator/shape::to-query-params "executionDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'execution-details))))))
(common-lisp:defstruct
    (query-param-map
     (:constructor |make-query-param-map|
      (aws-sdk/generator/shape::key aws-sdk/generator/shape::value)))
  aws-sdk/generator/shape::key
  aws-sdk/generator/shape::value)
(common-lisp:progn
 (common-lisp:defstruct (retry-stage-execution-input (:copier common-lisp:nil))
   (pipeline-name
    (common-lisp:error
     #A((25) common-lisp:base-char . ":pipelinename is required"))
    :type (common-lisp:or pipeline-name common-lisp:null))
   (stage-name
    (common-lisp:error
     #A((22) common-lisp:base-char . ":stagename is required"))
    :type (common-lisp:or stage-name common-lisp:null))
   (pipeline-execution-id
    (common-lisp:error
     #A((32) common-lisp:base-char . ":pipelineexecutionid is required"))
    :type (common-lisp:or pipeline-execution-id common-lisp:null))
   (retry-mode
    (common-lisp:error
     #A((22) common-lisp:base-char . ":retrymode is required"))
    :type (common-lisp:or stage-retry-mode common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retry-stage-execution-input
                    'make-retry-stage-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          retry-stage-execution-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-name)))
    (aws-sdk/generator/shape::to-query-params "stageName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stage-name)))
    (aws-sdk/generator/shape::to-query-params "pipelineExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution-id)))
    (aws-sdk/generator/shape::to-query-params "retryMode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'retry-mode))))))
(common-lisp:progn
 (common-lisp:defstruct
     (retry-stage-execution-output (:copier common-lisp:nil))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'retry-stage-execution-output
                    'make-retry-stage-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          retry-stage-execution-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution-id))))))
(common-lisp:deftype revision () 'common-lisp:string)
(common-lisp:deftype revision-change-identifier () 'common-lisp:string)
(common-lisp:deftype revision-summary () 'common-lisp:string)
(common-lisp:deftype role-arn () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (s3artifact-location (:copier common-lisp:nil))
   (bucket-name
    (common-lisp:error
     #A((23) common-lisp:base-char . ":bucketname is required"))
    :type (common-lisp:or s3bucket-name common-lisp:null))
   (object-key
    (common-lisp:error
     #A((22) common-lisp:base-char . ":objectkey is required"))
    :type (common-lisp:or s3object-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 's3artifact-location 'make-s3artifact-location))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape s3artifact-location))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "bucketName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bucket-name)))
    (aws-sdk/generator/shape::to-query-params "objectKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'object-key))))))
(common-lisp:deftype s3bucket-name () 'common-lisp:string)
(common-lisp:deftype s3object-key () 'common-lisp:string)
(common-lisp:deftype secret-access-key () 'common-lisp:string)
(common-lisp:deftype session-token () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype stage-action-declaration-list ()
   '(trivial-types:proper-list action-declaration))
 (common-lisp:defun |make-stage-action-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list action-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype stage-blocker-declaration-list ()
   '(trivial-types:proper-list blocker-declaration))
 (common-lisp:defun |make-stage-blocker-declaration-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list blocker-declaration))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (stage-context (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or stage-name common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stage-context 'make-stage-context))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape stage-context))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (stage-declaration (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or stage-name common-lisp:null))
   (blockers common-lisp:nil :type
    (common-lisp:or stage-blocker-declaration-list common-lisp:null))
   (actions
    (common-lisp:error #A((20) common-lisp:base-char . ":actions is required"))
    :type (common-lisp:or stage-action-declaration-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'stage-declaration 'make-stage-declaration))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape stage-declaration))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "blockers"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'blockers)))
    (aws-sdk/generator/shape::to-query-params "actions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'actions))))))
(common-lisp:progn
 (common-lisp:defstruct (stage-execution (:copier common-lisp:nil))
   (pipeline-execution-id
    (common-lisp:error
     #A((32) common-lisp:base-char . ":pipelineexecutionid is required"))
    :type (common-lisp:or pipeline-execution-id common-lisp:null))
   (status
    (common-lisp:error #A((19) common-lisp:base-char . ":status is required"))
    :type (common-lisp:or stage-execution-status common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stage-execution 'make-stage-execution))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape stage-execution))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution-id)))
    (aws-sdk/generator/shape::to-query-params "status"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status))))))
(common-lisp:deftype stage-execution-status () 'common-lisp:string)
(common-lisp:deftype stage-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (stage-not-found-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stage-not-found-exception
                    'make-stage-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          stage-not-found-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (stage-not-retryable-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'stage-not-retryable-exception
                    'make-stage-not-retryable-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          stage-not-retryable-exception))
   (common-lisp:append)))
(common-lisp:deftype stage-retry-mode () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (stage-state (:copier common-lisp:nil))
   (stage-name common-lisp:nil :type
    (common-lisp:or stage-name common-lisp:null))
   (inbound-transition-state common-lisp:nil :type
    (common-lisp:or transition-state common-lisp:null))
   (action-states common-lisp:nil :type
    (common-lisp:or action-state-list common-lisp:null))
   (latest-execution common-lisp:nil :type
    (common-lisp:or stage-execution common-lisp:null)))
 (common-lisp:export (common-lisp:list 'stage-state 'make-stage-state))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape stage-state))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "stageName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'stage-name)))
    (aws-sdk/generator/shape::to-query-params "inboundTransitionState"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'inbound-transition-state)))
    (aws-sdk/generator/shape::to-query-params "actionStates"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-states)))
    (aws-sdk/generator/shape::to-query-params "latestExecution"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'latest-execution))))))
(common-lisp:progn
 (common-lisp:deftype stage-state-list ()
   '(trivial-types:proper-list stage-state))
 (common-lisp:defun |make-stage-state-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list stage-state))
   aws-sdk/generator/shape::members))
(common-lisp:deftype stage-transition-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (start-pipeline-execution-input (:copier common-lisp:nil))
   (name
    (common-lisp:error #A((17) common-lisp:base-char . ":name is required"))
    :type (common-lisp:or pipeline-name common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-execution-input
                    'make-start-pipeline-execution-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-pipeline-execution-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct
     (start-pipeline-execution-output (:copier common-lisp:nil))
   (pipeline-execution-id common-lisp:nil :type
    (common-lisp:or pipeline-execution-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'start-pipeline-execution-output
                    'make-start-pipeline-execution-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          start-pipeline-execution-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipelineExecutionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-execution-id))))))
(common-lisp:progn
 (common-lisp:defstruct (third-party-job (:copier common-lisp:nil))
   (client-id common-lisp:nil :type
    (common-lisp:or client-id common-lisp:null))
   (job-id common-lisp:nil :type (common-lisp:or job-id common-lisp:null)))
 (common-lisp:export (common-lisp:list 'third-party-job 'make-third-party-job))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape third-party-job))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "clientId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'client-id)))
    (aws-sdk/generator/shape::to-query-params "jobId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'job-id))))))
(common-lisp:progn
 (common-lisp:defstruct (third-party-job-data (:copier common-lisp:nil))
   (action-type-id common-lisp:nil :type
    (common-lisp:or action-type-id common-lisp:null))
   (action-configuration common-lisp:nil :type
    (common-lisp:or action-configuration common-lisp:null))
   (pipeline-context common-lisp:nil :type
    (common-lisp:or pipeline-context common-lisp:null))
   (input-artifacts common-lisp:nil :type
    (common-lisp:or artifact-list common-lisp:null))
   (output-artifacts common-lisp:nil :type
    (common-lisp:or artifact-list common-lisp:null))
   (artifact-credentials common-lisp:nil :type
    (common-lisp:or awssession-credentials common-lisp:null))
   (continuation-token common-lisp:nil :type
    (common-lisp:or continuation-token common-lisp:null))
   (encryption-key common-lisp:nil :type
    (common-lisp:or encryption-key common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'third-party-job-data 'make-third-party-job-data))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape third-party-job-data))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "actionTypeId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-type-id)))
    (aws-sdk/generator/shape::to-query-params "actionConfiguration"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'action-configuration)))
    (aws-sdk/generator/shape::to-query-params "pipelineContext"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline-context)))
    (aws-sdk/generator/shape::to-query-params "inputArtifacts"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'input-artifacts)))
    (aws-sdk/generator/shape::to-query-params "outputArtifacts"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'output-artifacts)))
    (aws-sdk/generator/shape::to-query-params "artifactCredentials"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'artifact-credentials)))
    (aws-sdk/generator/shape::to-query-params "continuationToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'continuation-token)))
    (aws-sdk/generator/shape::to-query-params "encryptionKey"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'encryption-key))))))
(common-lisp:progn
 (common-lisp:defstruct (third-party-job-details (:copier common-lisp:nil))
   (id common-lisp:nil :type
    (common-lisp:or third-party-job-id common-lisp:null))
   (data common-lisp:nil :type
    (common-lisp:or third-party-job-data common-lisp:null))
   (nonce common-lisp:nil :type (common-lisp:or nonce common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'third-party-job-details 'make-third-party-job-details))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          third-party-job-details))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "data"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'data)))
    (aws-sdk/generator/shape::to-query-params "nonce"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'nonce))))))
(common-lisp:deftype third-party-job-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype third-party-job-list ()
   '(trivial-types:proper-list third-party-job))
 (common-lisp:defun |make-third-party-job-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list third-party-job))
   aws-sdk/generator/shape::members))
(common-lisp:deftype time () 'common-lisp:string)
(common-lisp:deftype timestamp () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (transition-state (:copier common-lisp:nil))
   (enabled common-lisp:nil :type (common-lisp:or enabled common-lisp:null))
   (last-changed-by common-lisp:nil :type
    (common-lisp:or last-changed-by common-lisp:null))
   (last-changed-at common-lisp:nil :type
    (common-lisp:or last-changed-at common-lisp:null))
   (disabled-reason common-lisp:nil :type
    (common-lisp:or disabled-reason common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'transition-state 'make-transition-state))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape transition-state))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "enabled"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'enabled)))
    (aws-sdk/generator/shape::to-query-params "lastChangedBy"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-changed-by)))
    (aws-sdk/generator/shape::to-query-params "lastChangedAt"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'last-changed-at)))
    (aws-sdk/generator/shape::to-query-params "disabledReason"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'disabled-reason))))))
(common-lisp:progn
 (common-lisp:defstruct (update-pipeline-input (:copier common-lisp:nil))
   (pipeline
    (common-lisp:error
     #A((21) common-lisp:base-char . ":pipeline is required"))
    :type (common-lisp:or pipeline-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-input 'make-update-pipeline-input))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-pipeline-input))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipeline"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline))))))
(common-lisp:progn
 (common-lisp:defstruct (update-pipeline-output (:copier common-lisp:nil))
   (pipeline common-lisp:nil :type
    (common-lisp:or pipeline-declaration common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'update-pipeline-output 'make-update-pipeline-output))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          update-pipeline-output))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "pipeline"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pipeline))))))
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:deftype url-template () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (validation-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'validation-exception 'make-validation-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape validation-exception))
   (common-lisp:append)))
(common-lisp:deftype version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defun acknowledge-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id nonce)
   (common-lisp:declare (common-lisp:ignorable job-id nonce))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-acknowledge-job-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AcknowledgeJob")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "AcknowledgeJobOutput" common-lisp:nil)))
 (common-lisp:export 'acknowledge-job))
(common-lisp:progn
 (common-lisp:defun acknowledge-third-party-job
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id nonce client-token)
   (common-lisp:declare (common-lisp:ignorable job-id nonce client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-acknowledge-third-party-job-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"AcknowledgeThirdPartyJob")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "AcknowledgeThirdPartyJobOutput" common-lisp:nil)))
 (common-lisp:export 'acknowledge-third-party-job))
(common-lisp:progn
 (common-lisp:defun create-custom-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category provider version settings
                     configuration-properties input-artifact-details
                     output-artifact-details)
   (common-lisp:declare
    (common-lisp:ignorable category provider version settings
     configuration-properties input-artifact-details output-artifact-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-custom-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateCustomActionType")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateCustomActionTypeOutput" common-lisp:nil)))
 (common-lisp:export 'create-custom-action-type))
(common-lisp:progn
 (common-lisp:defun create-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline)
   (common-lisp:declare (common-lisp:ignorable pipeline))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreatePipeline")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreatePipelineOutput" common-lisp:nil)))
 (common-lisp:export 'create-pipeline))
(common-lisp:progn
 (common-lisp:defun delete-custom-action-type
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key category provider version)
   (common-lisp:declare (common-lisp:ignorable category provider version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-custom-action-type-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteCustomActionType")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-custom-action-type))
(common-lisp:progn
 (common-lisp:defun delete-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeletePipeline")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'delete-pipeline))
(common-lisp:progn
 (common-lisp:defun disable-stage-transition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name transition-type
                     reason)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name transition-type reason))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-disable-stage-transition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DisableStageTransition")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'disable-stage-transition))
(common-lisp:progn
 (common-lisp:defun enable-stage-transition
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name transition-type)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name transition-type))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-enable-stage-transition-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"EnableStageTransition")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'enable-stage-transition))
(common-lisp:progn
 (common-lisp:defun get-job-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id)
   (common-lisp:declare (common-lisp:ignorable job-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-job-details-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetJobDetails")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetJobDetailsOutput" common-lisp:nil)))
 (common-lisp:export 'get-job-details))
(common-lisp:progn
 (common-lisp:defun get-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name version)
   (common-lisp:declare (common-lisp:ignorable name version))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetPipeline")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPipelineOutput" common-lisp:nil)))
 (common-lisp:export 'get-pipeline))
(common-lisp:progn
 (common-lisp:defun get-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name pipeline-execution-id)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name pipeline-execution-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetPipelineExecution")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPipelineExecutionOutput" common-lisp:nil)))
 (common-lisp:export 'get-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun get-pipeline-state
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-pipeline-state-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetPipelineState")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetPipelineStateOutput" common-lisp:nil)))
 (common-lisp:export 'get-pipeline-state))
(common-lisp:progn
 (common-lisp:defun get-third-party-job-details
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id client-token)
   (common-lisp:declare (common-lisp:ignorable job-id client-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-get-third-party-job-details-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetThirdPartyJobDetails")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetThirdPartyJobDetailsOutput" common-lisp:nil)))
 (common-lisp:export 'get-third-party-job-details))
(common-lisp:progn
 (common-lisp:defun list-action-types
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-owner-filter next-token)
   (common-lisp:declare (common-lisp:ignorable action-owner-filter next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-action-types-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListActionTypes")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListActionTypesOutput" common-lisp:nil)))
 (common-lisp:export 'list-action-types))
(common-lisp:progn
 (common-lisp:defun list-pipeline-executions
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name max-results next-token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name max-results next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipeline-executions-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListPipelineExecutions")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPipelineExecutionsOutput" common-lisp:nil)))
 (common-lisp:export 'list-pipeline-executions))
(common-lisp:progn
 (common-lisp:defun list-pipelines
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token)
   (common-lisp:declare (common-lisp:ignorable next-token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-pipelines-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListPipelines")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListPipelinesOutput" common-lisp:nil)))
 (common-lisp:export 'list-pipelines))
(common-lisp:progn
 (common-lisp:defun poll-for-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type-id max-batch-size
                     query-param)
   (common-lisp:declare
    (common-lisp:ignorable action-type-id max-batch-size query-param))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PollForJobs")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "PollForJobsOutput" common-lisp:nil)))
 (common-lisp:export 'poll-for-jobs))
(common-lisp:progn
 (common-lisp:defun poll-for-third-party-jobs
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key action-type-id max-batch-size)
   (common-lisp:declare (common-lisp:ignorable action-type-id max-batch-size))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-poll-for-third-party-jobs-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PollForThirdPartyJobs")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "PollForThirdPartyJobsOutput" common-lisp:nil)))
 (common-lisp:export 'poll-for-third-party-jobs))
(common-lisp:progn
 (common-lisp:defun put-action-revision
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name action-name
                     action-revision)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name action-name
     action-revision))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-action-revision-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutActionRevision")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "PutActionRevisionOutput" common-lisp:nil)))
 (common-lisp:export 'put-action-revision))
(common-lisp:progn
 (common-lisp:defun put-approval-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name action-name
                     result token)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name action-name result token))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-approval-result-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutApprovalResult")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "PutApprovalResultOutput" common-lisp:nil)))
 (common-lisp:export 'put-approval-result))
(common-lisp:progn
 (common-lisp:defun put-job-failure-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id failure-details)
   (common-lisp:declare (common-lisp:ignorable job-id failure-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-job-failure-result-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutJobFailureResult")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'put-job-failure-result))
(common-lisp:progn
 (common-lisp:defun put-job-success-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id current-revision
                     continuation-token execution-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id current-revision continuation-token
     execution-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-put-job-success-result-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutJobSuccessResult")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'put-job-success-result))
(common-lisp:progn
 (common-lisp:defun put-third-party-job-failure-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id client-token failure-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id client-token failure-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-third-party-job-failure-result-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutThirdPartyJobFailureResult")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'put-third-party-job-failure-result))
(common-lisp:progn
 (common-lisp:defun put-third-party-job-success-result
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key job-id client-token current-revision
                     continuation-token execution-details)
   (common-lisp:declare
    (common-lisp:ignorable job-id client-token current-revision
     continuation-token execution-details))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply
                       'make-put-third-party-job-success-result-input
                       aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"PutThirdPartyJobSuccessResult")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      common-lisp:nil common-lisp:nil)))
 (common-lisp:export 'put-third-party-job-success-result))
(common-lisp:progn
 (common-lisp:defun retry-stage-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline-name stage-name
                     pipeline-execution-id retry-mode)
   (common-lisp:declare
    (common-lisp:ignorable pipeline-name stage-name pipeline-execution-id
     retry-mode))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-retry-stage-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"RetryStageExecution")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "RetryStageExecutionOutput" common-lisp:nil)))
 (common-lisp:export 'retry-stage-execution))
(common-lisp:progn
 (common-lisp:defun start-pipeline-execution
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key name)
   (common-lisp:declare (common-lisp:ignorable name))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-start-pipeline-execution-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"StartPipelineExecution")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "StartPipelineExecutionOutput" common-lisp:nil)))
 (common-lisp:export 'start-pipeline-execution))
(common-lisp:progn
 (common-lisp:defun update-pipeline
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key pipeline)
   (common-lisp:declare (common-lisp:ignorable pipeline))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-update-pipeline-input
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((12) common-lisp:base-char . "codepipeline")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"UpdatePipeline")
                                  ("Version" ,@"2015-07-09"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "UpdatePipelineOutput" common-lisp:nil)))
 (common-lisp:export 'update-pipeline))