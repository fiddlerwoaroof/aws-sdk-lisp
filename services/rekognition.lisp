;; DO NOT EDIT: File is generated by AWS-SDK/GENERATOR.

(common-lisp:defpackage #:aws-sdk/services/rekognition
  (:use)
  (:nicknames #:aws/rekognition)
  (:import-from #:aws-sdk/generator/shape)
  (:import-from #:aws-sdk/generator/operation)
  (:import-from #:aws-sdk/api))
(common-lisp:in-package #:aws-sdk/services/rekognition)

(common-lisp:progn
 (common-lisp:defstruct (access-denied-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'access-denied-exception 'make-access-denied-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          access-denied-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (age-range (:copier common-lisp:nil))
   (low common-lisp:nil :type (common-lisp:or uinteger common-lisp:null))
   (high common-lisp:nil :type (common-lisp:or uinteger common-lisp:null)))
 (common-lisp:export (common-lisp:list 'age-range 'make-age-range))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape age-range))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Low"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'low)))
    (aws-sdk/generator/shape::to-query-params "High"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'high))))))
(common-lisp:deftype attribute () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype attributes () '(trivial-types:proper-list attribute))
 (common-lisp:defun |make-attributes|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list attribute))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (beard (:copier common-lisp:nil))
   (value common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'beard 'make-beard))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape beard))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:deftype boolean () 'common-lisp:boolean)
(common-lisp:progn
 (common-lisp:defstruct (bounding-box (:copier common-lisp:nil))
   (width common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (height common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (left common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (top common-lisp:nil :type (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'bounding-box 'make-bounding-box))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape bounding-box))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Width"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'width)))
    (aws-sdk/generator/shape::to-query-params "Height"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'height)))
    (aws-sdk/generator/shape::to-query-params "Left"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'left)))
    (aws-sdk/generator/shape::to-query-params "Top"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'top))))))
(common-lisp:progn
 (common-lisp:defstruct (celebrity (:copier common-lisp:nil))
   (urls common-lisp:nil :type (common-lisp:or urls common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (id common-lisp:nil :type
    (common-lisp:or rekognition-unique-id common-lisp:null))
   (face common-lisp:nil :type (common-lisp:or compared-face common-lisp:null))
   (match-confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'celebrity 'make-celebrity))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape celebrity))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Urls"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'urls)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id)))
    (aws-sdk/generator/shape::to-query-params "Face"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face)))
    (aws-sdk/generator/shape::to-query-params "MatchConfidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'match-confidence))))))
(common-lisp:progn
 (common-lisp:deftype celebrity-list () '(trivial-types:proper-list celebrity))
 (common-lisp:defun |make-celebrity-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list celebrity))
   aws-sdk/generator/shape::members))
(common-lisp:deftype collection-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype collection-id-list ()
   '(trivial-types:proper-list collection-id))
 (common-lisp:defun |make-collection-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list collection-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (compare-faces-match (:copier common-lisp:nil))
   (similarity common-lisp:nil :type (common-lisp:or percent common-lisp:null))
   (face common-lisp:nil :type
    (common-lisp:or compared-face common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compare-faces-match 'make-compare-faces-match))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape compare-faces-match))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Similarity"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'similarity)))
    (aws-sdk/generator/shape::to-query-params "Face"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face))))))
(common-lisp:progn
 (common-lisp:deftype compare-faces-match-list ()
   '(trivial-types:proper-list compare-faces-match))
 (common-lisp:defun |make-compare-faces-match-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compare-faces-match))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (compare-faces-request (:copier common-lisp:nil))
   (source-image
    (common-lisp:error
     #A((25) common-lisp:base-char . ":source-image is required"))
    :type (common-lisp:or image common-lisp:null))
   (target-image
    (common-lisp:error
     #A((25) common-lisp:base-char . ":target-image is required"))
    :type (common-lisp:or image common-lisp:null))
   (similarity-threshold common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compare-faces-request 'make-compare-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          compare-faces-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SourceImage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source-image)))
    (aws-sdk/generator/shape::to-query-params "TargetImage"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'target-image)))
    (aws-sdk/generator/shape::to-query-params "SimilarityThreshold"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'similarity-threshold))))))
(common-lisp:progn
 (common-lisp:defstruct (compare-faces-response (:copier common-lisp:nil))
   (source-image-face common-lisp:nil :type
    (common-lisp:or compared-source-image-face common-lisp:null))
   (face-matches common-lisp:nil :type
    (common-lisp:or compare-faces-match-list common-lisp:null))
   (unmatched-faces common-lisp:nil :type
    (common-lisp:or compare-faces-unmatch-list common-lisp:null))
   (source-image-orientation-correction common-lisp:nil :type
    (common-lisp:or orientation-correction common-lisp:null))
   (target-image-orientation-correction common-lisp:nil :type
    (common-lisp:or orientation-correction common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compare-faces-response 'make-compare-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          compare-faces-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SourceImageFace"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'source-image-face)))
    (aws-sdk/generator/shape::to-query-params "FaceMatches"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-matches)))
    (aws-sdk/generator/shape::to-query-params "UnmatchedFaces"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'unmatched-faces)))
    (aws-sdk/generator/shape::to-query-params
     "SourceImageOrientationCorrection"
     (aws-sdk/generator/shape:shape-to-params
      (common-lisp:slot-value aws-sdk/generator/shape::shape
                              'source-image-orientation-correction)))
    (aws-sdk/generator/shape::to-query-params
     "TargetImageOrientationCorrection"
     (aws-sdk/generator/shape:shape-to-params
      (common-lisp:slot-value aws-sdk/generator/shape::shape
                              'target-image-orientation-correction))))))
(common-lisp:progn
 (common-lisp:deftype compare-faces-unmatch-list ()
   '(trivial-types:proper-list compared-face))
 (common-lisp:defun |make-compare-faces-unmatch-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compared-face))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (compared-face (:copier common-lisp:nil))
   (bounding-box common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (confidence common-lisp:nil :type (common-lisp:or percent common-lisp:null))
   (landmarks common-lisp:nil :type
    (common-lisp:or landmarks common-lisp:null))
   (pose common-lisp:nil :type (common-lisp:or pose common-lisp:null))
   (quality common-lisp:nil :type
    (common-lisp:or image-quality common-lisp:null)))
 (common-lisp:export (common-lisp:list 'compared-face 'make-compared-face))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape compared-face))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "BoundingBox"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bounding-box)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence)))
    (aws-sdk/generator/shape::to-query-params "Landmarks"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'landmarks)))
    (aws-sdk/generator/shape::to-query-params "Pose"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pose)))
    (aws-sdk/generator/shape::to-query-params "Quality"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'quality))))))
(common-lisp:progn
 (common-lisp:deftype compared-face-list ()
   '(trivial-types:proper-list compared-face))
 (common-lisp:defun |make-compared-face-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list compared-face))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (compared-source-image-face (:copier common-lisp:nil))
   (bounding-box common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'compared-source-image-face
                    'make-compared-source-image-face))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          compared-source-image-face))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "BoundingBox"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bounding-box)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:progn
 (common-lisp:defstruct (create-collection-request (:copier common-lisp:nil))
   (collection-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":collection-id is required"))
    :type (common-lisp:or collection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-collection-request
                    'make-create-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-collection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CollectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'collection-id))))))
(common-lisp:progn
 (common-lisp:defstruct (create-collection-response (:copier common-lisp:nil))
   (status-code common-lisp:nil :type
    (common-lisp:or uinteger common-lisp:null))
   (collection-arn common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'create-collection-response
                    'make-create-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          create-collection-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StatusCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status-code)))
    (aws-sdk/generator/shape::to-query-params "CollectionArn"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'collection-arn))))))
(common-lisp:deftype degree () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct (delete-collection-request (:copier common-lisp:nil))
   (collection-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":collection-id is required"))
    :type (common-lisp:or collection-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-collection-request
                    'make-delete-collection-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-collection-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CollectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'collection-id))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-collection-response (:copier common-lisp:nil))
   (status-code common-lisp:nil :type
    (common-lisp:or uinteger common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-collection-response
                    'make-delete-collection-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-collection-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "StatusCode"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'status-code))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-faces-request (:copier common-lisp:nil))
   (collection-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":collection-id is required"))
    :type (common-lisp:or collection-id common-lisp:null))
   (face-ids
    (common-lisp:error
     #A((21) common-lisp:base-char . ":face-ids is required"))
    :type (common-lisp:or face-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-faces-request 'make-delete-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape delete-faces-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CollectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'collection-id)))
    (aws-sdk/generator/shape::to-query-params "FaceIds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-ids))))))
(common-lisp:progn
 (common-lisp:defstruct (delete-faces-response (:copier common-lisp:nil))
   (deleted-faces common-lisp:nil :type
    (common-lisp:or face-id-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'delete-faces-response 'make-delete-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          delete-faces-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "DeletedFaces"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'deleted-faces))))))
(common-lisp:progn
 (common-lisp:defstruct (detect-faces-request (:copier common-lisp:nil))
   (image
    (common-lisp:error #A((18) common-lisp:base-char . ":image is required"))
    :type (common-lisp:or image common-lisp:null))
   (attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-faces-request 'make-detect-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape detect-faces-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Image"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'image)))
    (aws-sdk/generator/shape::to-query-params "Attributes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'attributes))))))
(common-lisp:progn
 (common-lisp:defstruct (detect-faces-response (:copier common-lisp:nil))
   (face-details common-lisp:nil :type
    (common-lisp:or face-detail-list common-lisp:null))
   (orientation-correction common-lisp:nil :type
    (common-lisp:or orientation-correction common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-faces-response 'make-detect-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detect-faces-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "FaceDetails"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-details)))
    (aws-sdk/generator/shape::to-query-params "OrientationCorrection"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'orientation-correction))))))
(common-lisp:progn
 (common-lisp:defstruct (detect-labels-request (:copier common-lisp:nil))
   (image
    (common-lisp:error #A((18) common-lisp:base-char . ":image is required"))
    :type (common-lisp:or image common-lisp:null))
   (max-labels common-lisp:nil :type
    (common-lisp:or uinteger common-lisp:null))
   (min-confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-labels-request 'make-detect-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detect-labels-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Image"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'image)))
    (aws-sdk/generator/shape::to-query-params "MaxLabels"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-labels)))
    (aws-sdk/generator/shape::to-query-params "MinConfidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'min-confidence))))))
(common-lisp:progn
 (common-lisp:defstruct (detect-labels-response (:copier common-lisp:nil))
   (labels common-lisp:nil :type (common-lisp:or labels common-lisp:null))
   (orientation-correction common-lisp:nil :type
    (common-lisp:or orientation-correction common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-labels-response 'make-detect-labels-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detect-labels-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Labels"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'labels)))
    (aws-sdk/generator/shape::to-query-params "OrientationCorrection"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'orientation-correction))))))
(common-lisp:progn
 (common-lisp:defstruct
     (detect-moderation-labels-request (:copier common-lisp:nil))
   (image
    (common-lisp:error #A((18) common-lisp:base-char . ":image is required"))
    :type (common-lisp:or image common-lisp:null))
   (min-confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-moderation-labels-request
                    'make-detect-moderation-labels-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detect-moderation-labels-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Image"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'image)))
    (aws-sdk/generator/shape::to-query-params "MinConfidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'min-confidence))))))
(common-lisp:progn
 (common-lisp:defstruct
     (detect-moderation-labels-response (:copier common-lisp:nil))
   (moderation-labels common-lisp:nil :type
    (common-lisp:or moderation-labels common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'detect-moderation-labels-response
                    'make-detect-moderation-labels-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          detect-moderation-labels-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "ModerationLabels"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'moderation-labels))))))
(common-lisp:progn
 (common-lisp:defstruct (emotion (:copier common-lisp:nil))
   (type common-lisp:nil :type (common-lisp:or emotion-name common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'emotion 'make-emotion))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape emotion))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:deftype emotion-name () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype emotions () '(trivial-types:proper-list emotion))
 (common-lisp:defun |make-emotions|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list emotion))
   aws-sdk/generator/shape::members))
(common-lisp:deftype external-image-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (eye-open (:copier common-lisp:nil))
   (value common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'eye-open 'make-eye-open))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape eye-open))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:progn
 (common-lisp:defstruct (eyeglasses (:copier common-lisp:nil))
   (value common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'eyeglasses 'make-eyeglasses))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape eyeglasses))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:progn
 (common-lisp:defstruct (face (:copier common-lisp:nil))
   (face-id common-lisp:nil :type (common-lisp:or face-id common-lisp:null))
   (bounding-box common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (image-id common-lisp:nil :type (common-lisp:or image-id common-lisp:null))
   (external-image-id common-lisp:nil :type
    (common-lisp:or external-image-id common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'face 'make-face))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape face))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "FaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-id)))
    (aws-sdk/generator/shape::to-query-params "BoundingBox"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bounding-box)))
    (aws-sdk/generator/shape::to-query-params "ImageId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'image-id)))
    (aws-sdk/generator/shape::to-query-params "ExternalImageId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'external-image-id)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:progn
 (common-lisp:defstruct (face-detail (:copier common-lisp:nil))
   (bounding-box common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (age-range common-lisp:nil :type
    (common-lisp:or age-range common-lisp:null))
   (smile common-lisp:nil :type (common-lisp:or smile common-lisp:null))
   (eyeglasses common-lisp:nil :type
    (common-lisp:or eyeglasses common-lisp:null))
   (sunglasses common-lisp:nil :type
    (common-lisp:or sunglasses common-lisp:null))
   (gender common-lisp:nil :type (common-lisp:or gender common-lisp:null))
   (beard common-lisp:nil :type (common-lisp:or beard common-lisp:null))
   (mustache common-lisp:nil :type (common-lisp:or mustache common-lisp:null))
   (eyes-open common-lisp:nil :type (common-lisp:or eye-open common-lisp:null))
   (mouth-open common-lisp:nil :type
    (common-lisp:or mouth-open common-lisp:null))
   (emotions common-lisp:nil :type (common-lisp:or emotions common-lisp:null))
   (landmarks common-lisp:nil :type
    (common-lisp:or landmarks common-lisp:null))
   (pose common-lisp:nil :type (common-lisp:or pose common-lisp:null))
   (quality common-lisp:nil :type
    (common-lisp:or image-quality common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'face-detail 'make-face-detail))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape face-detail))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "BoundingBox"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bounding-box)))
    (aws-sdk/generator/shape::to-query-params "AgeRange"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'age-range)))
    (aws-sdk/generator/shape::to-query-params "Smile"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'smile)))
    (aws-sdk/generator/shape::to-query-params "Eyeglasses"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'eyeglasses)))
    (aws-sdk/generator/shape::to-query-params "Sunglasses"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sunglasses)))
    (aws-sdk/generator/shape::to-query-params "Gender"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'gender)))
    (aws-sdk/generator/shape::to-query-params "Beard"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'beard)))
    (aws-sdk/generator/shape::to-query-params "Mustache"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'mustache)))
    (aws-sdk/generator/shape::to-query-params "EyesOpen"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'eyes-open)))
    (aws-sdk/generator/shape::to-query-params "MouthOpen"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'mouth-open)))
    (aws-sdk/generator/shape::to-query-params "Emotions"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'emotions)))
    (aws-sdk/generator/shape::to-query-params "Landmarks"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'landmarks)))
    (aws-sdk/generator/shape::to-query-params "Pose"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pose)))
    (aws-sdk/generator/shape::to-query-params "Quality"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'quality)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:progn
 (common-lisp:deftype face-detail-list ()
   '(trivial-types:proper-list face-detail))
 (common-lisp:defun |make-face-detail-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-detail))
   aws-sdk/generator/shape::members))
(common-lisp:deftype face-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype face-id-list () '(trivial-types:proper-list face-id))
 (common-lisp:defun |make-face-id-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-id))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:deftype face-list () '(trivial-types:proper-list face))
 (common-lisp:defun |make-face-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (face-match (:copier common-lisp:nil))
   (similarity common-lisp:nil :type (common-lisp:or percent common-lisp:null))
   (face common-lisp:nil :type (common-lisp:or face common-lisp:null)))
 (common-lisp:export (common-lisp:list 'face-match 'make-face-match))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape face-match))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Similarity"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'similarity)))
    (aws-sdk/generator/shape::to-query-params "Face"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face))))))
(common-lisp:progn
 (common-lisp:deftype face-match-list ()
   '(trivial-types:proper-list face-match))
 (common-lisp:defun |make-face-match-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-match))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (face-record (:copier common-lisp:nil))
   (face common-lisp:nil :type (common-lisp:or face common-lisp:null))
   (face-detail common-lisp:nil :type
    (common-lisp:or face-detail common-lisp:null)))
 (common-lisp:export (common-lisp:list 'face-record 'make-face-record))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape face-record))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Face"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face)))
    (aws-sdk/generator/shape::to-query-params "FaceDetail"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-detail))))))
(common-lisp:progn
 (common-lisp:deftype face-record-list ()
   '(trivial-types:proper-list face-record))
 (common-lisp:defun |make-face-record-list|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list face-record))
   aws-sdk/generator/shape::members))
(common-lisp:deftype float () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct (gender (:copier common-lisp:nil))
   (value common-lisp:nil :type (common-lisp:or gender-type common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'gender 'make-gender))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape gender))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:deftype gender-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (get-celebrity-info-request (:copier common-lisp:nil))
   (id (common-lisp:error #A((15) common-lisp:base-char . ":id is required"))
    :type (common-lisp:or rekognition-unique-id common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-celebrity-info-request
                    'make-get-celebrity-info-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-celebrity-info-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Id"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'id))))))
(common-lisp:progn
 (common-lisp:defstruct (get-celebrity-info-response (:copier common-lisp:nil))
   (urls common-lisp:nil :type (common-lisp:or urls common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'get-celebrity-info-response
                    'make-get-celebrity-info-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          get-celebrity-info-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Urls"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'urls)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name))))))
(common-lisp:progn
 (common-lisp:defstruct (image (:copier common-lisp:nil))
   (bytes common-lisp:nil :type (common-lisp:or image-blob common-lisp:null))
   (s3object common-lisp:nil :type (common-lisp:or s3object common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image 'make-image))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape image))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Bytes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bytes)))
    (aws-sdk/generator/shape::to-query-params "S3Object"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                's3object))))))
(common-lisp:deftype image-blob ()
  '(common-lisp:simple-array (common-lisp:unsigned-byte 8) (common-lisp:*)))
(common-lisp:deftype image-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (image-quality (:copier common-lisp:nil))
   (brightness common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (sharpness common-lisp:nil :type (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'image-quality 'make-image-quality))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape image-quality))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Brightness"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'brightness)))
    (aws-sdk/generator/shape::to-query-params "Sharpness"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'sharpness))))))
(common-lisp:progn
 (common-lisp:defstruct (image-too-large-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'image-too-large-exception
                    'make-image-too-large-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          image-too-large-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (index-faces-request (:copier common-lisp:nil))
   (collection-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":collection-id is required"))
    :type (common-lisp:or collection-id common-lisp:null))
   (image
    (common-lisp:error #A((18) common-lisp:base-char . ":image is required"))
    :type (common-lisp:or image common-lisp:null))
   (external-image-id common-lisp:nil :type
    (common-lisp:or external-image-id common-lisp:null))
   (detection-attributes common-lisp:nil :type
    (common-lisp:or attributes common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'index-faces-request 'make-index-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape index-faces-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CollectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'collection-id)))
    (aws-sdk/generator/shape::to-query-params "Image"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'image)))
    (aws-sdk/generator/shape::to-query-params "ExternalImageId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'external-image-id)))
    (aws-sdk/generator/shape::to-query-params "DetectionAttributes"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'detection-attributes))))))
(common-lisp:progn
 (common-lisp:defstruct (index-faces-response (:copier common-lisp:nil))
   (face-records common-lisp:nil :type
    (common-lisp:or face-record-list common-lisp:null))
   (orientation-correction common-lisp:nil :type
    (common-lisp:or orientation-correction common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'index-faces-response 'make-index-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape index-faces-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "FaceRecords"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-records)))
    (aws-sdk/generator/shape::to-query-params "OrientationCorrection"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'orientation-correction))))))
(common-lisp:progn
 (common-lisp:defstruct (internal-server-error (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'internal-server-error 'make-internal-server-error))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          internal-server-error))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-image-format-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-image-format-exception
                    'make-invalid-image-format-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-image-format-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-pagination-token-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-pagination-token-exception
                    'make-invalid-pagination-token-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-pagination-token-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (invalid-parameter-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-parameter-exception
                    'make-invalid-parameter-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-parameter-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (invalid-s3object-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'invalid-s3object-exception
                    'make-invalid-s3object-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          invalid-s3object-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct (label (:copier common-lisp:nil))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'label 'make-label))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape label))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:progn
 (common-lisp:deftype labels () '(trivial-types:proper-list label))
 (common-lisp:defun |make-labels|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (landmark (:copier common-lisp:nil))
   (type common-lisp:nil :type (common-lisp:or landmark-type common-lisp:null))
   (x common-lisp:nil :type (common-lisp:or float common-lisp:null))
   (y common-lisp:nil :type (common-lisp:or float common-lisp:null)))
 (common-lisp:export (common-lisp:list 'landmark 'make-landmark))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape landmark))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Type"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'type)))
    (aws-sdk/generator/shape::to-query-params "X"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'x)))
    (aws-sdk/generator/shape::to-query-params "Y"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'y))))))
(common-lisp:deftype landmark-type () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype landmarks () '(trivial-types:proper-list landmark))
 (common-lisp:defun |make-landmarks|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list landmark))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (list-collections-request (:copier common-lisp:nil))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-collections-request 'make-list-collections-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-collections-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (list-collections-response (:copier common-lisp:nil))
   (collection-ids common-lisp:nil :type
    (common-lisp:or collection-id-list common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-collections-response
                    'make-list-collections-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          list-collections-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CollectionIds"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'collection-ids)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:progn
 (common-lisp:defstruct (list-faces-request (:copier common-lisp:nil))
   (collection-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":collection-id is required"))
    :type (common-lisp:or collection-id common-lisp:null))
   (next-token common-lisp:nil :type
    (common-lisp:or pagination-token common-lisp:null))
   (max-results common-lisp:nil :type
    (common-lisp:or page-size common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-faces-request 'make-list-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-faces-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CollectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'collection-id)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token)))
    (aws-sdk/generator/shape::to-query-params "MaxResults"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-results))))))
(common-lisp:progn
 (common-lisp:defstruct (list-faces-response (:copier common-lisp:nil))
   (faces common-lisp:nil :type (common-lisp:or face-list common-lisp:null))
   (next-token common-lisp:nil :type (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'list-faces-response 'make-list-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape list-faces-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Faces"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'faces)))
    (aws-sdk/generator/shape::to-query-params "NextToken"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'next-token))))))
(common-lisp:deftype max-faces () 'common-lisp:integer)
(common-lisp:progn
 (common-lisp:defstruct (moderation-label (:copier common-lisp:nil))
   (confidence common-lisp:nil :type (common-lisp:or percent common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or string common-lisp:null))
   (parent-name common-lisp:nil :type
    (common-lisp:or string common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'moderation-label 'make-moderation-label))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape moderation-label))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "ParentName"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'parent-name))))))
(common-lisp:progn
 (common-lisp:deftype moderation-labels ()
   '(trivial-types:proper-list moderation-label))
 (common-lisp:defun |make-moderation-labels|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list moderation-label))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defstruct (mouth-open (:copier common-lisp:nil))
   (value common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mouth-open 'make-mouth-open))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape mouth-open))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:progn
 (common-lisp:defstruct (mustache (:copier common-lisp:nil))
   (value common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'mustache 'make-mustache))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape mustache))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:deftype orientation-correction () 'common-lisp:string)
(common-lisp:deftype page-size () 'common-lisp:integer)
(common-lisp:deftype pagination-token () 'common-lisp:string)
(common-lisp:deftype percent () 'common-lisp:single-float)
(common-lisp:progn
 (common-lisp:defstruct (pose (:copier common-lisp:nil))
   (roll common-lisp:nil :type (common-lisp:or degree common-lisp:null))
   (yaw common-lisp:nil :type (common-lisp:or degree common-lisp:null))
   (pitch common-lisp:nil :type (common-lisp:or degree common-lisp:null)))
 (common-lisp:export (common-lisp:list 'pose 'make-pose))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape pose))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Roll"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'roll)))
    (aws-sdk/generator/shape::to-query-params "Yaw"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'yaw)))
    (aws-sdk/generator/shape::to-query-params "Pitch"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'pitch))))))
(common-lisp:progn
 (common-lisp:defstruct
     (provisioned-throughput-exceeded-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'provisioned-throughput-exceeded-exception
                    'make-provisioned-throughput-exceeded-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          provisioned-throughput-exceeded-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (recognize-celebrities-request (:copier common-lisp:nil))
   (image
    (common-lisp:error #A((18) common-lisp:base-char . ":image is required"))
    :type (common-lisp:or image common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recognize-celebrities-request
                    'make-recognize-celebrities-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          recognize-celebrities-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Image"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'image))))))
(common-lisp:progn
 (common-lisp:defstruct
     (recognize-celebrities-response (:copier common-lisp:nil))
   (celebrity-faces common-lisp:nil :type
    (common-lisp:or celebrity-list common-lisp:null))
   (unrecognized-faces common-lisp:nil :type
    (common-lisp:or compared-face-list common-lisp:null))
   (orientation-correction common-lisp:nil :type
    (common-lisp:or orientation-correction common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'recognize-celebrities-response
                    'make-recognize-celebrities-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          recognize-celebrities-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CelebrityFaces"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'celebrity-faces)))
    (aws-sdk/generator/shape::to-query-params "UnrecognizedFaces"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'unrecognized-faces)))
    (aws-sdk/generator/shape::to-query-params "OrientationCorrection"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'orientation-correction))))))
(common-lisp:deftype rekognition-unique-id () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (resource-already-exists-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-already-exists-exception
                    'make-resource-already-exists-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          resource-already-exists-exception))
   (common-lisp:append)))
(common-lisp:progn
 (common-lisp:defstruct
     (resource-not-found-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'resource-not-found-exception
                    'make-resource-not-found-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          resource-not-found-exception))
   (common-lisp:append)))
(common-lisp:deftype s3bucket () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (s3object (:copier common-lisp:nil))
   (bucket common-lisp:nil :type (common-lisp:or s3bucket common-lisp:null))
   (name common-lisp:nil :type (common-lisp:or s3object-name common-lisp:null))
   (version common-lisp:nil :type
    (common-lisp:or s3object-version common-lisp:null)))
 (common-lisp:export (common-lisp:list 's3object 'make-s3object))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape s3object))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Bucket"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'bucket)))
    (aws-sdk/generator/shape::to-query-params "Name"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'name)))
    (aws-sdk/generator/shape::to-query-params "Version"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'version))))))
(common-lisp:deftype s3object-name () 'common-lisp:string)
(common-lisp:deftype s3object-version () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct
     (search-faces-by-image-request (:copier common-lisp:nil))
   (collection-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":collection-id is required"))
    :type (common-lisp:or collection-id common-lisp:null))
   (image
    (common-lisp:error #A((18) common-lisp:base-char . ":image is required"))
    :type (common-lisp:or image common-lisp:null))
   (max-faces common-lisp:nil :type
    (common-lisp:or max-faces common-lisp:null))
   (face-match-threshold common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-faces-by-image-request
                    'make-search-faces-by-image-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          search-faces-by-image-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CollectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'collection-id)))
    (aws-sdk/generator/shape::to-query-params "Image"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'image)))
    (aws-sdk/generator/shape::to-query-params "MaxFaces"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-faces)))
    (aws-sdk/generator/shape::to-query-params "FaceMatchThreshold"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-match-threshold))))))
(common-lisp:progn
 (common-lisp:defstruct
     (search-faces-by-image-response (:copier common-lisp:nil))
   (searched-face-bounding-box common-lisp:nil :type
    (common-lisp:or bounding-box common-lisp:null))
   (searched-face-confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null))
   (face-matches common-lisp:nil :type
    (common-lisp:or face-match-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-faces-by-image-response
                    'make-search-faces-by-image-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          search-faces-by-image-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SearchedFaceBoundingBox"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'searched-face-bounding-box)))
    (aws-sdk/generator/shape::to-query-params "SearchedFaceConfidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'searched-face-confidence)))
    (aws-sdk/generator/shape::to-query-params "FaceMatches"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-matches))))))
(common-lisp:progn
 (common-lisp:defstruct (search-faces-request (:copier common-lisp:nil))
   (collection-id
    (common-lisp:error
     #A((26) common-lisp:base-char . ":collection-id is required"))
    :type (common-lisp:or collection-id common-lisp:null))
   (face-id
    (common-lisp:error #A((20) common-lisp:base-char . ":face-id is required"))
    :type (common-lisp:or face-id common-lisp:null))
   (max-faces common-lisp:nil :type
    (common-lisp:or max-faces common-lisp:null))
   (face-match-threshold common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-faces-request 'make-search-faces-request))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape search-faces-request))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "CollectionId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'collection-id)))
    (aws-sdk/generator/shape::to-query-params "FaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-id)))
    (aws-sdk/generator/shape::to-query-params "MaxFaces"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'max-faces)))
    (aws-sdk/generator/shape::to-query-params "FaceMatchThreshold"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-match-threshold))))))
(common-lisp:progn
 (common-lisp:defstruct (search-faces-response (:copier common-lisp:nil))
   (searched-face-id common-lisp:nil :type
    (common-lisp:or face-id common-lisp:null))
   (face-matches common-lisp:nil :type
    (common-lisp:or face-match-list common-lisp:null)))
 (common-lisp:export
  (common-lisp:list 'search-faces-response 'make-search-faces-response))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        (
                         (aws-sdk/generator/shape::shape
                          search-faces-response))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "SearchedFaceId"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'searched-face-id)))
    (aws-sdk/generator/shape::to-query-params "FaceMatches"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'face-matches))))))
(common-lisp:progn
 (common-lisp:defstruct (smile (:copier common-lisp:nil))
   (value common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'smile 'make-smile))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape smile))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:deftype string () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:defstruct (sunglasses (:copier common-lisp:nil))
   (value common-lisp:nil :type (common-lisp:or boolean common-lisp:null))
   (confidence common-lisp:nil :type
    (common-lisp:or percent common-lisp:null)))
 (common-lisp:export (common-lisp:list 'sunglasses 'make-sunglasses))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape sunglasses))
   (common-lisp:append
    (aws-sdk/generator/shape::to-query-params "Value"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'value)))
    (aws-sdk/generator/shape::to-query-params "Confidence"
                                              (aws-sdk/generator/shape:shape-to-params
                                               (common-lisp:slot-value
                                                aws-sdk/generator/shape::shape
                                                'confidence))))))
(common-lisp:progn
 (common-lisp:defstruct (throttling-exception (:copier common-lisp:nil)))
 (common-lisp:export
  (common-lisp:list 'throttling-exception 'make-throttling-exception))
 (common-lisp:defmethod aws-sdk/generator/shape:shape-to-params
                        ((aws-sdk/generator/shape::shape throttling-exception))
   (common-lisp:append)))
(common-lisp:deftype uinteger () 'common-lisp:integer)
(common-lisp:deftype url () 'common-lisp:string)
(common-lisp:progn
 (common-lisp:deftype urls () '(trivial-types:proper-list url))
 (common-lisp:defun |make-urls|
                    (common-lisp:&rest aws-sdk/generator/shape::members)
   (common-lisp:check-type aws-sdk/generator/shape::members
                           (trivial-types:proper-list url))
   aws-sdk/generator/shape::members))
(common-lisp:progn
 (common-lisp:defun compare-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key source-image target-image
                     similarity-threshold)
   (common-lisp:declare
    (common-lisp:ignorable source-image target-image similarity-threshold))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-compare-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CompareFaces")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CompareFacesResponse" common-lisp:nil)))
 (common-lisp:export 'compare-faces))
(common-lisp:progn
 (common-lisp:defun create-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id)
   (common-lisp:declare (common-lisp:ignorable collection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-create-collection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"CreateCollection")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "CreateCollectionResponse" common-lisp:nil)))
 (common-lisp:export 'create-collection))
(common-lisp:progn
 (common-lisp:defun delete-collection
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id)
   (common-lisp:declare (common-lisp:ignorable collection-id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-collection-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteCollection")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteCollectionResponse" common-lisp:nil)))
 (common-lisp:export 'delete-collection))
(common-lisp:progn
 (common-lisp:defun delete-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id face-ids)
   (common-lisp:declare (common-lisp:ignorable collection-id face-ids))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-delete-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DeleteFaces")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DeleteFacesResponse" common-lisp:nil)))
 (common-lisp:export 'delete-faces))
(common-lisp:progn
 (common-lisp:defun detect-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image attributes)
   (common-lisp:declare (common-lisp:ignorable image attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DetectFaces")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DetectFacesResponse" common-lisp:nil)))
 (common-lisp:export 'detect-faces))
(common-lisp:progn
 (common-lisp:defun detect-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image max-labels min-confidence)
   (common-lisp:declare
    (common-lisp:ignorable image max-labels min-confidence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DetectLabels")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DetectLabelsResponse" common-lisp:nil)))
 (common-lisp:export 'detect-labels))
(common-lisp:progn
 (common-lisp:defun detect-moderation-labels
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image min-confidence)
   (common-lisp:declare (common-lisp:ignorable image min-confidence))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-detect-moderation-labels-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"DetectModerationLabels")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "DetectModerationLabelsResponse" common-lisp:nil)))
 (common-lisp:export 'detect-moderation-labels))
(common-lisp:progn
 (common-lisp:defun get-celebrity-info
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key id)
   (common-lisp:declare (common-lisp:ignorable id))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-get-celebrity-info-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"GetCelebrityInfo")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "GetCelebrityInfoResponse" common-lisp:nil)))
 (common-lisp:export 'get-celebrity-info))
(common-lisp:progn
 (common-lisp:defun index-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id image external-image-id
                     detection-attributes)
   (common-lisp:declare
    (common-lisp:ignorable collection-id image external-image-id
     detection-attributes))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-index-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"IndexFaces")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "IndexFacesResponse" common-lisp:nil)))
 (common-lisp:export 'index-faces))
(common-lisp:progn
 (common-lisp:defun list-collections
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key next-token max-results)
   (common-lisp:declare (common-lisp:ignorable next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-collections-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListCollections")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListCollectionsResponse" common-lisp:nil)))
 (common-lisp:export 'list-collections))
(common-lisp:progn
 (common-lisp:defun list-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id next-token max-results)
   (common-lisp:declare
    (common-lisp:ignorable collection-id next-token max-results))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-list-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"ListFaces")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "ListFacesResponse" common-lisp:nil)))
 (common-lisp:export 'list-faces))
(common-lisp:progn
 (common-lisp:defun recognize-celebrities
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key image)
   (common-lisp:declare (common-lisp:ignorable image))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-recognize-celebrities-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"RecognizeCelebrities")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "RecognizeCelebritiesResponse" common-lisp:nil)))
 (common-lisp:export 'recognize-celebrities))
(common-lisp:progn
 (common-lisp:defun search-faces
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id face-id max-faces
                     face-match-threshold)
   (common-lisp:declare
    (common-lisp:ignorable collection-id face-id max-faces
     face-match-threshold))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-faces-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SearchFaces")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "SearchFacesResponse" common-lisp:nil)))
 (common-lisp:export 'search-faces))
(common-lisp:progn
 (common-lisp:defun search-faces-by-image
                    (
                     common-lisp:&rest aws-sdk/generator/operation::args
                     common-lisp:&key collection-id image max-faces
                     face-match-threshold)
   (common-lisp:declare
    (common-lisp:ignorable collection-id image max-faces face-match-threshold))
   (common-lisp:let ((aws-sdk/generator/operation::input
                      (common-lisp:apply 'make-search-faces-by-image-request
                                         aws-sdk/generator/operation::args)))
     (aws-sdk/generator/operation::parse-response
      (aws-sdk/api:aws-request :service
                               #A((11) common-lisp:base-char . "rekognition")
                               :method :post :params
                               (common-lisp:append
                                `(("Action" ,@"SearchFacesByImage")
                                  ("Version" ,@"2016-06-27"))
                                (aws-sdk/generator/shape:shape-to-params
                                 aws-sdk/generator/operation::input)))
      "SearchFacesByImageResponse" common-lisp:nil)))
 (common-lisp:export 'search-faces-by-image))